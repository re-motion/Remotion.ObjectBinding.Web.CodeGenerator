<?xml version="1.0" encoding="utf-8"?><doc><assembly>
        <name>Remotion.Data.DomainObjects</name>
    </assembly><members><member name="T:Remotion.Data.DomainObjects.AutoRollbackBehavior"><summary>
            Provides an enumeration to configure <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope">ClientTransctionScope's</see> automatic rollback behavior.
            </summary></member><member name="F:Remotion.Data.DomainObjects.AutoRollbackBehavior.None"><summary>
            Indicates that <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope" /> should not perform any automatic operation.
            </summary></member><member name="F:Remotion.Data.DomainObjects.AutoRollbackBehavior.Rollback"><summary>
            Indicates that <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope" /> should automatically call <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Rollback" /> at its end when
            its transaction holds uncommitted changed.
            </summary></member><member name="F:Remotion.Data.DomainObjects.AutoRollbackBehavior.Discard"><summary>
            Indicates that <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope" /> should automatically call <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Discard" /> at
            its end.
            </summary></member><member name="T:Remotion.Data.DomainObjects.BinaryPropertyAttribute"><summary>
            Apply the <see cref="T:Remotion.Data.DomainObjects.BinaryPropertyAttribute" /> to properties of type <see cref="T:System.Byte" /> array.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.IMappingAttribute"><summary>
            <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.IMappingAttribute" /> is a marker interface implemented by all attributes relevant to the mapping.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ClientTransaction"><summary>
            Represents an in-memory transaction.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.CreateRootTransaction"><summary>
            Creates a new root <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />, a transaction which uses a <see cref="T:Remotion.Data.DomainObjects.Infrastructure.RootPersistenceStrategy" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.CreateBindingTransaction"><summary>
            Creates a new root <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> that binds all <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances that are created in its context. A bound
            <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> is always accessed in the context of its binding transaction, it never uses <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.CreateEmptyTransactionOfSameType"><summary>Initializes a new instance of this transaction.</summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.Discard"><summary>
            Discards this transaction (rendering it unusable) and, if this transaction is a subtransaction, returns control to the parent transaction.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.EnterDiscardingScope"><summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope" /> for this transaction and enters it, making it the
            <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.ActiveScope" /> for the current thread. When the scope is left, <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Discard" /> is executed. This will
            discard this transaction and make the parent transaction (if any) writeable again.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.EnterScope(Remotion.Data.DomainObjects.AutoRollbackBehavior)"><summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope" /> for this transaction with the given automatic rollback behavior and enters it,
            making it the <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.ActiveScope" /> for the current thread.
            </summary><param name="rollbackBehavior">The automatic rollback behavior to be performed when the scope's <see cref="M:Remotion.Data.DomainObjects.ClientTransactionScope.Leave" />
            method is called.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.EnterNonDiscardingScope"><summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope" /> for this transaction and enters it, making it the
            <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.ActiveScope" /> for the current thread. When the scope is left, this transaction is not discarded and the
            parent transaction (if any) is not made writeable.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetEnlistedDomainObjects"><summary>
            Gets all domain objects enlisted in this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetEnlistedDomainObject(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Returns the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> enlisted for the given <paramref name="objectID" /> via <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.EnlistDomainObject(Remotion.Data.DomainObjects.DomainObject)" />, or 
            <see langword="null" /> if no such object exists.
            </summary><param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> for which to retrieve a <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.IsEnlisted(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Determines whether the specified <paramref name="domainObject" /> is enlisted in this transaction.
            </summary><param name="domainObject">The domain object to be checked.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.EnlistDomainObject(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Allows the given <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to be used in the context of this transaction without needing to explicitly reload it there.
            The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> should be loadable into this transaction (i.e. it must be present in the underlying data store or the
            ParentTransaction), but this is not enforced until first access to the object.
            </summary><param name="domainObject">The object to be enlisted in this transaction.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.CheckDomainObjectForEnlisting(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Checks whether the given <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> can be enlisted in this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />, throwing an 
            <see cref="T:System.InvalidOperationException" /> if it can't.
            </summary><param name="domainObject">The domain object to check.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.EnlistDomainObjects(System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.DomainObject})"><summary>
            Calls <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.EnlistDomainObject(Remotion.Data.DomainObjects.DomainObject)" /> for each <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> reference in the given collection.
            </summary><param name="domainObjects">The domain objects to enlist.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.EnlistDomainObjects(Remotion.Data.DomainObjects.DomainObject[])"><summary>
            Calls <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.EnlistDomainObject(Remotion.Data.DomainObjects.DomainObject)" /> for each <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> reference in the given collection.
            </summary><param name="domainObjects">The domain objects to enlist.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.EnsureDataAvailable(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Ensures that the data of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> with the given <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> has been loaded into this 
            <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />. If it hasn't, this method loads the object's data.
            </summary><param name="objectID">The domain object whose data must be loaded.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.EnsureDataAvailable(System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.ObjectID})"><summary>
            Ensures that the data for the <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s with the given <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> values has been loaded into this 
            <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />. If it hasn't, this method loads the objects' data, performing a bulk load operation.
            </summary><param name="objectIDs">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> values whose data must be loaded.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.CreateNewObjectID(Remotion.Data.DomainObjects.Mapping.ClassDefinition)"><summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> for the given class definition.
            </summary><param name="classDefinition">The class definition to create a new <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> for.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.EnsureDataAvailable(Remotion.Data.DomainObjects.DataManagement.RelationEndPointID)"><summary>
            Ensures that the data of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.IEndPoint" /> with the given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" /> has been loaded into this 
            <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />. If it hasn't, this method loads the relation end point's data.
            </summary><param name="endPointID">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" /> of the end point whose data must be loaded. In order to force a collection-valued 
            relation property to be loaded, pass the <see cref="P:Remotion.Data.DomainObjects.DomainObjectCollection.AssociatedEndPointID" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.CopyCollectionEventHandlers(Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.ClientTransaction)"><summary>
            Copies the event handlers defined on the given <see cref="T:Remotion.Data.DomainObjects.DomainObject" />'s collection properties from another transaction to this
            transaction.
            </summary><param name="domainObject">The domain object the event handlers of whose collection properties are to be copied.</param><param name="sourceTransaction">The transaction to copy the event handlers from.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.CopyTransactionEventHandlers(Remotion.Data.DomainObjects.ClientTransaction)"><summary>
            Copies the event handlers defined on the given <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> to this transaction.
            </summary><param name="sourceTransaction">The transaction to copy the event handlers from.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.CreateSubTransaction"><summary>
            Initializes a new subtransaction with this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> as its <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.ParentTransaction" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.CreateSubTransaction(System.Func{Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.IInvalidDomainObjectManager,Remotion.Data.DomainObjects.ClientTransaction})"><summary>
            Initializes a new subtransaction with this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> as its <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.ParentTransaction" />. A custom transaction
            factory is used to instantiate the subtransaction. This allows subtransactions of types derived from <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />
            to be created. The factory must create a subtransaction whose <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.ParentTransaction" /> is this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />, otherwise
            this method throws an exception.
            </summary><param name="subTransactionFactory">A custom implementation of <see cref="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionComponentFactory" /> to use when instantiating
            the subtransaction.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.HasChanged"><summary>
            Returns whether at least one <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> in this <b>ClientTransaction</b> has been changed.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.Commit"><summary>
            Commits all changes within the <b>ClientTransaction</b> to the underlying data source.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.Rollback"><summary>
            Performs a rollback of all changes within the <b>ClientTransaction</b>.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetObject(Remotion.Data.DomainObjects.ObjectID,System.Boolean)"><summary>
            Gets a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that is already loaded or attempts to load it from the data source.
            </summary><param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that should be loaded. Must not be <see langword="null" />.</param><param name="includeDeleted">Indicates if the method should return <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s that are already deleted.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetObjectReference(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Gets a reference to a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> with the given <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> from this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />. If the
            transaction does not currently hold an object with this <see cref="T:Remotion.Data.DomainObjects.ObjectID" />, an object reference representing that <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> 
            is created without calling a constructor and without loading the object's data from the data source. This method does not check whether an
            object with the given <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> actually exists in the data source.
            </summary><param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> to get an object reference for.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetObjects``1(Remotion.Data.DomainObjects.ObjectID[])"><summary>
            Gets a number of objects that are already loaded or attempts to load them from the data source. If an object cannot be found, an exception is
            thrown.
            </summary><param name="objectIDs">The IDs of the objects to be retrieved.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.TryGetObjects``1(Remotion.Data.DomainObjects.ObjectID[])"><summary>
            Gets a number of objects that are already loaded or attempts to load them from the data source. If an object is not be found, the result array
            will contain a <see langword="null" /> reference in its place.
            </summary><param name="objectIDs">The IDs of the objects to be retrieved.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetObjects``1(System.Collections.Generic.ICollection{Remotion.Data.DomainObjects.ObjectID},System.Boolean)"><summary>
            Gets a number of objects that are already loaded or attempts to load them from the data source.
            </summary><param name="objectIDs">The IDs of the objects to be retrieved.</param><param name="throwOnNotFound">Specifies whether an <see cref="T:Remotion.Data.DomainObjects.Persistence.ObjectNotFoundException" /> is raised (and encapsulated in a
            <see cref="T:Remotion.Data.DomainObjects.Persistence.BulkLoadException" />) when an object cannot be found in the data source. If this parameter is set to false, such objects are
            ignored.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetRelatedObject(Remotion.Data.DomainObjects.DataManagement.RelationEndPointID)"><summary>
            Gets the related object of a given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" />.
            </summary><param name="relationEndPointID">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" /> to evaluate. It must refer to a <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectEndPoint" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetOriginalRelatedObject(Remotion.Data.DomainObjects.DataManagement.RelationEndPointID)"><summary>
            Gets the original related object of a given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" /> at the point of instantiation, loading, commit or rollback.
            </summary><param name="relationEndPointID">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" /> to evaluate. It must refer to a <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectEndPoint" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetRelatedObjects(Remotion.Data.DomainObjects.DataManagement.RelationEndPointID)"><summary>
            Gets the related objects of a given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" />.
            </summary><param name="relationEndPointID">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" /> to evaluate. It must refer to a <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPoint" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.GetOriginalRelatedObjects(Remotion.Data.DomainObjects.DataManagement.RelationEndPointID)"><summary>
            Gets the original related objects of a given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" /> at the point of instantiation, loading, commit or rollback.
            </summary><param name="relationEndPointID">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" /> to evaluate. It must refer to a <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPoint" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.Delete(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Deletes a <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.
            </summary><param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to delete. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.LoadObject(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Loads an object from the data source.
            </summary><param name="id">An <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> object indicating which <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to load. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.LoadObjects(System.Collections.Generic.IList{Remotion.Data.DomainObjects.ObjectID},System.Boolean)"><summary>
            Loads several objects from the data source in a bulk load operation.
            </summary><param name="idsToBeLoaded">An <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> object indicating which <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances to load. Must not be 
            <see langword="null" />.</param><param name="throwOnNotFound">If <see langword="true" />, this method should throw a <see cref="T:Remotion.Data.DomainObjects.Persistence.BulkLoadException" /> if a data container 
            cannot be found for an <see cref="T:Remotion.Data.DomainObjects.ObjectID" />. If <see langword="false" />, <see langword="null" /> is inserted in the result array for the 
            invalid ID.
            </param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.LoadRelatedObject(Remotion.Data.DomainObjects.DataManagement.RelationEndPointID)"><summary>
            Loads the related <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> of a given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" />.
            </summary><param name="relationEndPointID">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" /> of the end point that should be evaluated.
            <paramref name="relationEndPointID" /> must refer to an <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectEndPoint" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.LoadRelatedObjects(Remotion.Data.DomainObjects.DataManagement.RelationEndPointID)"><summary>
            Loads all related <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s of a given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" />.
            </summary><param name="relationEndPointID">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" /> of the end point that should be evaluated.
            <paramref name="relationEndPointID" /> must refer to a <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPoint" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.OnLoaded(Remotion.Data.DomainObjects.ClientTransactionEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.ClientTransaction.Loaded" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.ClientTransactionEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.OnCommitting(Remotion.Data.DomainObjects.ClientTransactionEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.ClientTransaction.Committing" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.ClientTransactionEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.OnCommitted(Remotion.Data.DomainObjects.ClientTransactionEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.ClientTransaction.Committed" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.ClientTransactionEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.OnRollingBack(Remotion.Data.DomainObjects.ClientTransactionEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.ClientTransaction.RollingBack" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.ClientTransactionEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.OnRolledBack(Remotion.Data.DomainObjects.ClientTransactionEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.ClientTransaction.RolledBack" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.ClientTransactionEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransaction.OnSubTransactionCreated(Remotion.Data.DomainObjects.SubTransactionCreatedEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.ClientTransaction.SubTransactionCreated" /> event.
            </summary><param name="eventArgs">A <see cref="T:Remotion.Data.DomainObjects.SubTransactionCreatedEventArgs" /> instance containing the event data.</param></member><member name="P:Remotion.Data.DomainObjects.ClientTransaction.Current"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> currently associated with this thread, or <see langword="null" /> if no such transaction exists.
            </summary></member><member name="E:Remotion.Data.DomainObjects.ClientTransaction.SubTransactionCreated"><summary>
            Occurs when the <b>ClientTransaction</b> has created a subtransaction.
            </summary></member><member name="E:Remotion.Data.DomainObjects.ClientTransaction.Loaded"><summary>
            Occurs after the <b>ClientTransaction</b> has loaded a new object.
            </summary></member><member name="E:Remotion.Data.DomainObjects.ClientTransaction.Committing"><summary>
            Occurs immediately before the <b>ClientTransaction</b> performs a <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Commit" /> operation.
            </summary></member><member name="E:Remotion.Data.DomainObjects.ClientTransaction.Committed"><summary>
            Occurs immediately after the <b>ClientTransaction</b> has successfully performed a <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Commit" /> operation.
            </summary></member><member name="E:Remotion.Data.DomainObjects.ClientTransaction.RollingBack"><summary>
            Occurs immediately before the <b>ClientTransaction</b> performs a <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Rollback" /> operation.
            </summary></member><member name="E:Remotion.Data.DomainObjects.ClientTransaction.RolledBack"><summary>
            Occurs immediately after the <b>ClientTransaction</b> has successfully performed a <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Rollback" /> operation.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransaction.ParentTransaction"><summary>
            Gets the parent transaction for this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransaction.RootTransaction"><summary>
            Gets the root transaction of this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />, i.e. the top-level parent transaction in a row of subtransactions.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransaction.PersistenceStrategy"><summary>
            Gets the persistence strategy associated with this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />. The <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.PersistenceStrategy" /> is used to load
            data from the underlying data source without actually registering the data in this transaction, and it can be used to store data in the
            underlying data source.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransaction.ID"><summary>
            Returns a <see cref="T:System.Guid" /> that uniquely identifies this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransaction.IsReadOnly"><summary>
            Indicates whether this transaction is set read-only.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransaction.IsDiscarded"><summary>
            Returns whether this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> has been discarded. A transaction is discarded when its <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Discard" /> or
            <see cref="M:Remotion.Data.ITransaction.Release" /> methods are called or when it has been used in a discarding scope.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransaction.Extensions"><summary>
            Gets the collection of <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension" />s of this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> hierarchy.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransaction.QueryManager"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Queries.IQueryManager" /> of the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransaction.TransactionEventSink"><summary>
            Gets the transaction event sink for this transaction.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransaction.EnlistedDomainObjectCount"><summary>
            Gets the number of domain objects enlisted in this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransaction.DataManager"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManager" /> of this <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransaction.ApplicationData"><summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2" /> to store application specific objects 
            within the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> hierarchy.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ClientTransactionEventArgs"><summary>
            Provides data for <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> events.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransactionEventArgs.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})"><summary>
            Initializes a new instance of the <b>ClientTransactionEventArgs</b> class.
            </summary><param name="domainObjects">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s affected by the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> operation. Must not be <see langword="null" />.</param></member><member name="P:Remotion.Data.DomainObjects.ClientTransactionEventArgs.DomainObjects"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s affected by the <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Commit" /> operation.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ClientTransactionExtensionCollection"><summary>
            A collection of <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension" />s.
            </summary></member><member name="T:Remotion.Data.DomainObjects.CommonCollection"><summary>
            Base class for all collections of Remotion.Data.DomainObjects.
            </summary></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.#ctor"><summary>
            Initializes a new <b>CommonCollection</b>.
            </summary></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.GetEnumerator"><summary>
            Returns an enumerator that can iterate through the <see cref="T:Remotion.Data.DomainObjects.CommonCollection" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.CopyTo(System.Array,System.Int32)"><summary>
            Copies the items of the <see cref="T:Remotion.Data.DomainObjects.CommonCollection" /> to an Array, starting at a particular Array index.
            </summary><param name="array">The one-dimensional array that is the destination of the items copied from <see cref="T:Remotion.Data.DomainObjects.CommonCollection" />. The array must have zero-based indexing. Must not be <see langword="null" />.</param><param name="index">The zero-based index in array at which copying begins.</param></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.BaseGetObject(System.Int32)"><summary>
            Returns the object with a given index from the collection 
            </summary><param name="index">The index of the object to return.</param></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.BaseGetObject(System.Object)"><summary>
            Returns the object with a given key from the collection.
            </summary><param name="key">The key of the object to return. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.BaseContainsKey(System.Object)"><summary>
            Determines whether the <see cref="T:Remotion.Data.DomainObjects.CommonCollection" /> contains a specific key.
            </summary><param name="key">The key to locate in the <see cref="T:Remotion.Data.DomainObjects.CommonCollection" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.BaseContains(System.Object,System.Object)"><summary>
            Determines whether the <see cref="T:Remotion.Data.DomainObjects.CommonCollection" /> contains a specified value for a key.
            </summary><param name="key">The key to located in the <see cref="T:Remotion.Data.DomainObjects.CommonCollection" />. Must not be <see langword="null" />.</param><param name="value">The object that is expected as value for the specified key.</param></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.BaseAdd(System.Object,System.Object)"><summary>
            Adds an item with the specified key and value.
            </summary><param name="key">A key of the item to add. The key must not be <see langword="null" />. Must not be <see langword="null" />.</param><param name="value">The value of the item to add. The value must not be <see langword="null" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.BaseRemove(System.Object)"><summary>
            Removes the item with the specified key.
            </summary><param name="key">The key of the item to remove. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.BaseClear"><summary>
            Removes all objects from the collection.
            </summary></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.BaseIndexOfKey(System.Object)"><summary>
            Returns the zero-based index of the item with a given key in the collection.
            </summary><param name="key">The <paramref name="key" /> to locate in the collection.</param></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.BaseInsert(System.Int32,System.Object,System.Object)"><summary>
            Inserts an item into the collection at the specified index.
            </summary><param name="index">The zero-based <paramref name="index" /> at which the item should be inserted.</param><param name="key">The key of the item to insert. Must not be <see langword="null" />.</param><param name="value">The <paramref name="value" /> of the item to add. The <paramref name="value" /> can be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.CheckIndexForInsert(System.String,System.Int32)"><summary>
            Checks the <paramref name="index" /> for an insert operation and throws an exception if it is invalid.
            </summary><param name="argumentName">The <paramref name="argumentName" /> for throwing the exception.</param><param name="index">The <paramref name="index" /> to check.</param></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.CheckIndexForIndexer(System.String,System.Int32)"><summary>
            Checks the <paramref name="index" /> for access via the indexer and throws an exception if it is invalid.
            </summary><param name="argumentName">The <paramref name="argumentName" /> for throwing the exception.</param><param name="index">The <paramref name="index" /> to check.</param></member><member name="M:Remotion.Data.DomainObjects.CommonCollection.SetIsReadOnly(System.Boolean)"><summary>
            Sets the <see cref="P:Remotion.Data.DomainObjects.CommonCollection.IsReadOnly" /> property of the collection.
            </summary><param name="isReadOnly">The new value for the <see cref="P:Remotion.Data.DomainObjects.CommonCollection.IsReadOnly" /> property of the collection.</param></member><member name="P:Remotion.Data.DomainObjects.CommonCollection.IsReadOnly"><summary>
            Gets a value indicating whether the collection is read-only.
            </summary></member><member name="P:Remotion.Data.DomainObjects.CommonCollection.IsSynchronized"><summary>
            Gets a value indicating whether access to the <see cref="T:Remotion.Data.DomainObjects.CommonCollection" /> is synchronized (thread-safe).
            </summary></member><member name="P:Remotion.Data.DomainObjects.CommonCollection.Count"><summary>
            Gets the number of items contained in the collection.
            </summary></member><member name="P:Remotion.Data.DomainObjects.CommonCollection.SyncRoot"><summary>
            Gets an object that can be used to synchronize access to the <see cref="T:Remotion.Data.DomainObjects.CommonCollection" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.IClientTransactionExtension"><summary>
            Interface for extending the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> by observing events within the re-store framework.
            </summary></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.SubTransactionCreating(Remotion.Data.DomainObjects.ClientTransaction)"><summary>
            This method is invoked when a subtransaction of <paramref name="parentClientTransaction" /> is about to be created.
            </summary><param name="parentClientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.SubTransactionCreated(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.ClientTransaction)"><summary>
            This method is invoked when a subtransaction of <paramref name="parentClientTransaction" /> has been created.
            </summary><param name="parentClientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="subTransaction">The subtransaction created by <paramref name="parentClientTransaction" />.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.NewObjectCreating(Remotion.Data.DomainObjects.ClientTransaction,System.Type)"><summary>
            This method is invoked when a new <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> is created, but not registered yet. 
            The operation may be cancelled at this point.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="type">The <see cref="T:System.Type" /> of the new <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.ObjectsLoading(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.ObjectID})"><summary>
            This method is invoked when one or multiple <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances are about to be loaded, after their 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer">DataContainers</see> have been created but before the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer">DataContainers</see> are 
            associated with the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="objectIDs">A collection of <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> values identifying the objects to be loaded.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.ObjectsLoaded(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})"><summary>
            This method is invoked when one or multiple <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s were loaded. 
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="loadedDomainObjects">A collection of all <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s that were loaded.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.ObjectsUnloading(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})"><summary>
            This method is invoked when the data of one or multiple <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances are about to be unloaded.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="unloadedDomainObjects">A collection of <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> references whose data is to be unloaded from 
            <paramref name="clientTransaction" />.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.ObjectsUnloaded(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})"><summary>
            This method is invoked when the data of one or multiple <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances was unloaded. 
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="unloadedDomainObjects">A collection of <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> references whose data was unloaded from
            <paramref name="clientTransaction" />.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.ObjectDeleting(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject)"><summary>
            This method is invoked, before a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> is deleted. 
            The operation may be cancelled at this point.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to be deleted.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.ObjectDeleted(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject)"><summary>
            This method is invoked, after a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> was deleted. 
            It indicates the success of the operation. 
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="domainObject">
              The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that was deleted. This object might already be invalid in the <paramref name="clientTransaction" />.<br />
              For more information why and when an object becomes invalid see <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException" />.
            </param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.PropertyValueReading(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.DataContainer,Remotion.Data.DomainObjects.DataManagement.PropertyValue,Remotion.Data.DomainObjects.DataManagement.ValueAccess)"><summary>
            This method is invoked, before a value of <paramref name="dataContainer" /> is read. 
            The operation may be cancelled at this point.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="dataContainer">
              The <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> holding the value that is being read.
              Use the <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject" /> property to get the corresponding <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.
            </param><param name="propertyValue">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> object holding the value that is being read.</param><param name="valueAccess">A value indicating whether the current or the original value is being accessed.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.PropertyValueRead(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.DataContainer,Remotion.Data.DomainObjects.DataManagement.PropertyValue,System.Object,Remotion.Data.DomainObjects.DataManagement.ValueAccess)"><summary>
            This method is invoked when a value of <paramref name="dataContainer" /> was read. 
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="dataContainer">
              The <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> holding the value that was read.
              Use the <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject" /> property to get the corresponding <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.
            </param><param name="propertyValue">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> object holding the value that was read.</param><param name="value">The value that was read.</param><param name="valueAccess">A value indicating whether the current or the original value was accessed.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.PropertyValueChanging(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.DataContainer,Remotion.Data.DomainObjects.DataManagement.PropertyValue,System.Object,System.Object)"><summary>
            This method is invoked before a value of <paramref name="dataContainer" /> is changed.
            The operation may be cancelled at this point.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="dataContainer">
              The <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> holding the <paramref name="propertyValue" /> that is being changed.
              Use the <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject" /> property to get the corresponding <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.
            </param><param name="propertyValue">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> object holding the value that is being changed.</param><param name="oldValue">The value of the property it currently has.</param><param name="newValue">The new value to be assigned to the property.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.PropertyValueChanged(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.DataContainer,Remotion.Data.DomainObjects.DataManagement.PropertyValue,System.Object,System.Object)"><summary>
            This method is invoked after a value of <paramref name="dataContainer" /> was changed.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="dataContainer">
              The <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> holding the <paramref name="propertyValue" /> that was changed.
              Use the <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject" /> property to get the corresponding <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.
            </param><param name="propertyValue">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> object holding the value that was changed.</param><param name="oldValue">The old value of the property it had before.</param><param name="newValue">The value that was assigned to the property.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RelationReading(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.DataManagement.ValueAccess)"><summary>
            This method is invoked, before a relation property is being read. 
            The operation may be cancelled at this point.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> whose relation property is being read.</param><param name="relationEndPointDefinition">The relation endpoint definition of the relation property being read.</param><param name="valueAccess">A value indicating whether the current or the original value is being accessed.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RelationRead(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.DataManagement.ValueAccess)"><summary>
            This method is invoked when a relation property with cardinality <see cref="F:Remotion.Data.DomainObjects.Mapping.CardinalityType.One" /> was read. 
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> whose relation property was read.</param><param name="relationEndPointDefinition">The relation endpoint defintion of the relation property.</param><param name="relatedObject">The related <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> of the relation property.</param><param name="valueAccess">A value indicating whether the current or the original value was accessed.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RelationRead(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.ReadOnlyDomainObjectCollectionAdapter{Remotion.Data.DomainObjects.DomainObject},Remotion.Data.DomainObjects.DataManagement.ValueAccess)"><summary>
            This method is invoked when a relation property with cardinality <see cref="F:Remotion.Data.DomainObjects.Mapping.CardinalityType.Many" /> was read. 
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> whose relation property was read.</param><param name="relationEndPointDefinition">The relation endpoint defintion of the relation property.</param><param name="relatedObjects">
              An implementation of <see cref="T:Remotion.Data.DomainObjects.ReadOnlyDomainObjectCollectionAdapter`1" /> wrapping the related object data that is returned to the reader.
              Implementors should check the <see cref="P:Remotion.Data.DomainObjects.ReadOnlyDomainObjectCollectionAdapter`1.IsDataAvailable" /> property before accessing the collection 
              data in order to avoid reloading an unloaded collection end-point.
            </param><param name="valueAccess">A value indicating whether the current or the original value was accessed.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RelationChanging(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.DomainObject)"><summary>
            This method is invoked before a relation is changed.
            The operation may be cancelled at this point.
            This method might be invoked more than once for a given relation change operation. For example, when a whole related object collection is 
            replaced in one go, the method is invoked once for each old object that is not in the new collection and once for each new object not in the 
            old collection.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> whose relation property is being changed.</param><param name="relationEndPointDefinition">The relation endpoint defintion of the relation property.</param><param name="oldRelatedObject">The related object that is removed from the relation, or <see langword="null" /> if a new item is added without 
            replacing an old one.</param><param name="newRelatedObject">The related object that is added to the relation, or <see langword="null" /> if an old item is removed without 
            being replaced by a new one.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RelationChanged(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition)"><summary>
            This method is invoked after a relation was changed.
            This method might be invoked more than once for a given relation change operation. For example, when a whole related object collection is 
            replaced in one go, the method is invoked once for each old object that is not in the new collection and once for each new object not in the 
            old collection.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> whose relation property was changed.</param><param name="relationEndPointDefinition">The relation endpoint defintion of the relation property.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.FilterQueryResult``1(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.Queries.QueryResult{``0})"><summary>
            This method is invoked after a collection query was executed by <see cref="M:Remotion.Data.DomainObjects.Queries.QueryManager.GetCollection(Remotion.Data.DomainObjects.Queries.IQuery)" />.
            The <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension" /> may change the result at this point.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="queryResult">The <see cref="T:Remotion.Data.DomainObjects.Queries.QueryResult`1" /> representing the objects returned by the query. This object should be returned
            if the query result should not be changed. Access <see cref="P:Remotion.Data.DomainObjects.Queries.QueryResult`1.Query" /> to inspect the query being executed.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.Committing(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})"><summary>
            This method is invoked before a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> is committed.
            The operation may be cancelled at this point.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="changedDomainObjects">A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> holding all changed <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s that are being committed.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.Committed(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})"><summary>
            This method is invoked after a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> was executed.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="changedDomainObjects">A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> holding all changed <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s that are being committed.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RollingBack(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})"><summary>
            This method is invoked before a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> is rolled back.
            The operation may be cancelled at this point.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="changedDomainObjects">A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> holding all changed <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s that are being rolled back.</param></member><member name="M:Remotion.Data.DomainObjects.IClientTransactionExtension.RolledBack(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.ObjectModel.ReadOnlyCollection{Remotion.Data.DomainObjects.DomainObject})"><summary>
            This method is invoked after a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> was rolled back.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instance for which the event is raised.</param><param name="changedDomainObjects">A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> holding all changed <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s that are being rolled back.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransactionExtensionCollection.Add(System.String,Remotion.Data.DomainObjects.IClientTransactionExtension)"><summary>
            Adds an <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension" /> to the collection.
            </summary><param name="extensionName">A name for the extension. Must not be <see langword="null" /> or <see cref="F:System.String.Empty" />.</param><param name="clientTransactionExtension">The extension to add. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransactionExtensionCollection.Remove(System.String)"><summary>
            Removes an <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension" /> from the collection.
            </summary><param name="extensionName">The name of the extension. Must not be <see langword="null" /> or <see cref="F:System.String.Empty" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransactionExtensionCollection.IndexOf(System.String)"><summary>
            Gets the index of an <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension" /> with a given <paramref name="extensionName" />.
            </summary><param name="extensionName">The name of the extension. Must not be <see langword="null" /> or <see cref="F:System.String.Empty" />.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransactionExtensionCollection.Insert(System.Int32,System.String,Remotion.Data.DomainObjects.IClientTransactionExtension)"><summary>
            Inserts an <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension" /> intto the collection at a specified index.
            </summary><param name="extensionName">A name for the extension. Must not be <see langword="null" /> or <see cref="F:System.String.Empty" />.</param><param name="clientTransactionExtension">The extension to insert. Must not be <see langword="null" />.</param><param name="index">The index where the extension should be inserted.</param></member><member name="P:Remotion.Data.DomainObjects.ClientTransactionExtensionCollection.Item(System.String)"><summary>
            Gets an <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension" /> by the extension name.
            </summary><param name="extensionName">The name of the extension. Must not be <see langword="null" /> or <see cref="F:System.String.Empty" />.</param></member><member name="P:Remotion.Data.DomainObjects.ClientTransactionExtensionCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension" /> of a given <paramref name="index" />.
            </summary><param name="index">The index of the extension to be retrieved.</param></member><member name="T:Remotion.Data.DomainObjects.ClientTransactionExtensions"><summary>
            Defines useful extension methods working on <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instances.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransactionExtensions.Execute``1(Remotion.Data.DomainObjects.ClientTransaction,System.Func{``0})"><summary>
            Executes the specified delegate in the context of the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />, returning the result of the delegate. While the
            delegate is being executed, the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> is made the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current" /> transaction.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> in whose context to execute the delegate.</param><param name="func">The delegate to be executed.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransactionExtensions.Execute(Remotion.Data.DomainObjects.ClientTransaction,System.Action)"><summary>
            Executes the specified delegate in the context of the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />. While the
            delegate is being executed, the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> is made the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current" /> transaction.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> in whose context to execute the delegate.</param><param name="action">The delegate to be executed.</param></member><member name="T:Remotion.Data.DomainObjects.ClientTransactionFactory"><summary>The <see cref="T:Remotion.Data.DomainObjects.ClientTransactionFactory" /> is the default implementation of the <see cref="T:Remotion.Data.ITransactionFactory" /> interface.</summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransactionFactory.CreateRootTransaction"><summary>
            Creates a new root transaction instance. This instance is not yet managed by a scope.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ClientTransactionScope"><summary>
            Manages a thread's <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.CurrentTransaction" /> in a scoped way. Optionally, it can also automatically roll back a transaction at the end
            of the scope.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransactionScope.ResetActiveScope"><summary>
            Resets the active scope to <see langword="null" />, causing the previously active scopes to be removed even if they haven't been left.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransactionScope.EnterNullScope"><summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope" /> with an empty (<see langword="null" />) <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.ScopedTransaction" /> and makes
            it the current thread's <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.ActiveScope" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransactionScope.#ctor(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.AutoRollbackBehavior)"><summary>
            Associates a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> with the current thread, specifying the scope's automatic rollback behavior.
            </summary><param name="scopedCurrentTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> object used as the current transaction until the scope is left.</param><param name="autoRollbackBehavior">The automatic rollback behavior to be exhibited by this scope.</param></member><member name="M:Remotion.Data.DomainObjects.ClientTransactionScope.Leave"><summary>
            Resets <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.CurrentTransaction" /> to the value it had before this scope was instantiated and performs the
            <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.AutoRollbackBehavior" />. This method is ignored when executed more than once.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransactionScope.Commit"><summary>
            Commits the transaction scoped by this object. This is equivalent to <c>ScopedTransaction.Commit()</c>.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ClientTransactionScope.Rollback"><summary>
            Performs a rollback on the transaction scoped by this object. This is equivalent to <c>ScopedTransaction.Rollback()</c>.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransactionScope.HasCurrentTransaction"><summary>
            Gets a value indicating if a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> is currently set as <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.CurrentTransaction" />. 
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransactionScope.CurrentTransaction"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> associated with the current thread. 
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransactionScope.ActiveScope"><summary>
            Retrieves the active <see cref="T:Remotion.Data.DomainObjects.ClientTransactionScope" /> for the current thread.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransactionScope.AutoRollbackBehavior"><summary>
            Gets or sets a value indicating whether this scope will automatically call <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.Rollback" /> on a transaction
            with uncommitted changed objects when the scope's <see cref="M:Remotion.Data.DomainObjects.ClientTransactionScope.Leave" /> method is invoked.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransactionScope.ScopedTransaction"><summary>
            Gets the transaction this scope was created for.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransactionScope.Remotion#Data#ITransactionScope#ScopedTransaction"><summary>
            Gets the transaction managed by this scope.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ClientTransactionScope.Remotion#Data#ITransactionScope#IsActiveScope"><summary>
            Gets a flag that describes whether this is the active scope.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationBase"><summary>
            Represents the common information all configuration classes provide.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ConfigurationBase.#ctor(Remotion.Data.DomainObjects.ConfigurationLoader.XmlBasedConfigurationLoader.BaseFileLoader)"><summary>
            Initializes a new instance of the <b>ConfigurationBase</b> class from the specified <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.XmlBasedConfigurationLoader.BaseFileLoader" />.
            </summary><param name="loader">The <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.XmlBasedConfigurationLoader.BaseFileLoader" /> to be used for reading the configuration. Must not be <see langword="null" />.</param></member><member name="P:Remotion.Data.DomainObjects.ConfigurationBase.ResolveTypes"><summary>
            Gets a flag whether type names in the configuration file should be resolved to their corresponding .NET <see cref="T:System.Type" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationException"><summary>
            BaseClass for exceptions that are related to the configuraton of the persistence framework.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DomainObjectException"><summary>
            BaseClass for all exceptions of the persistence framework.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DBBidirectionalRelationAttribute"><summary>
            Declares a relation as bidirectional. Use <see cref="P:Remotion.Data.DomainObjects.DBBidirectionalRelationAttribute.ContainsForeignKey" /> to indicate the the foreign key side in a one-to-one relation
            and the <see cref="P:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.BidirectionalRelationAttribute.SortExpression" /> to specify the <b>Order By</b>-clause.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.BidirectionalRelationAttribute"><summary>
            Declares a relation as bidirectional.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.BidirectionalRelationAttribute.#ctor(System.String)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.BidirectionalRelationAttribute" /> class with the name of the oppsite property.
            </summary><param name="oppositeProperty">The name of the opposite property. Must not be <see langword="null" /> or empty.</param></member><member name="P:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.BidirectionalRelationAttribute.SortExpression"><summary>
            Gets or sets an expression used to sort the relation when it is loaded from the data source. This is only valid on collection-valued properties.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DBBidirectionalRelationAttribute.#ctor(System.String)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.DBBidirectionalRelationAttribute" /> class with the name of the oppsite property
            and the <see cref="P:Remotion.Data.DomainObjects.DBBidirectionalRelationAttribute.ContainsForeignKey" /> value.
            </summary><param name="oppositeProperty">The name of the opposite property. Must not be <see langword="null" /> or empty.</param></member><member name="P:Remotion.Data.DomainObjects.DBBidirectionalRelationAttribute.ContainsForeignKey"><summary>Gets or sets a flag that indicates the foreign key side in a one-to-one relation.</summary></member><member name="T:Remotion.Data.DomainObjects.DBColumnAttribute"><summary>Overrides the name used as the column name in the <b>RDBMS</b>.</summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.IStorageSpecificIdentifierAttribute"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.IStorageSpecificIdentifierAttribute" /> interface is used as a storage provider indifferent marker interface for more 
            conrete attributes such as the <see cref="T:Remotion.Data.DomainObjects.DBColumnAttribute" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.IStorageSpecificIdentifierAttribute.Identifier"><summary>
            Gets the <see cref="T:System.String" /> used as the identifier.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DBColumnAttribute.#ctor(System.String)"><summary>Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.DBColumnAttribute" /> class.</summary><param name="name">The name. Must not be <see langword="null" /> or empty.</param></member><member name="P:Remotion.Data.DomainObjects.DBColumnAttribute.Name"><summary>
            Gets the column name defined by this <see cref="T:Remotion.Data.DomainObjects.DBColumnAttribute" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DBStorageGroupAttribute"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.DBStorageGroupAttribute" /> is the standard <see cref="T:Remotion.Data.DomainObjects.StorageGroupAttribute" /> for types persisted into a database.
            </summary></member><member name="T:Remotion.Data.DomainObjects.StorageGroupAttribute"><summary>The <see cref="T:Remotion.Data.DomainObjects.StorageGroupAttribute" /> is the base class for defining storage groups in the domain layer.</summary></member><member name="T:Remotion.Data.DomainObjects.DBTableAttribute"><summary>
            Use the <see cref="T:Remotion.Data.DomainObjects.DBTableAttribute" /> to define the distribution of the types within a persistence hierarchy into one or more database tables.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DBTableAttribute.#ctor"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.DBTableAttribute" /> class.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DBTableAttribute.#ctor(System.String)"><summary>Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.DBTableAttribute" /> class with a custom table name.</summary><param name="name">The name of the table. Must not be <see langword="null" /> or empty.</param></member><member name="P:Remotion.Data.DomainObjects.DBTableAttribute.Name"><summary>
            Gets the table name defined by this <see cref="T:Remotion.Data.DomainObjects.DBTableAttribute" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DomainObject"><summary>
            Base class for all objects that are persisted by the framework.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.NewObject``1"><summary>
            Returns a new instance of a concrete domain object for the current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />. The object is constructed
            using the default constructor in the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current" /> <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.NewObject``1(Remotion.Reflection.ParamList)"><summary>
            Returns a new instance of a concrete domain object for the current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />. The object is constructed
            using the supplied constructor arguments in the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current" /> <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary><param name="constructorParameters">A <see cref="T:Remotion.Reflection.ParamList" /> encapsulating the parameters to be passed to the constructor. Instantiate this
            by using one of the <see cref="M:Remotion.Reflection.ParamList.Create``2(``0,``1)" /> methods.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.GetObject``1(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Gets a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that is already loaded or attempts to load it from the data source.
            </summary><param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that should be loaded. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.GetObject``1(Remotion.Data.DomainObjects.ObjectID,System.Boolean)"><summary>
            Gets a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that is already loaded or attempts to load it from the data source.
            </summary><param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that should be loaded. Must not be <see langword="null" />.</param><param name="includeDeleted">Indicates if the method should return <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s that are already deleted.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.#ctor"><summary>
            Initializes a new <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> with the current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> class in the process of deserialization.
            </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> coming from the .NET serialization infrastructure.</param><param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> coming from the .NET serialization infrastructure.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.GetBindingTransaction"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> this <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instance was bound to. If the object has not been 
            bound, this method throws an exception. Use <see cref="P:Remotion.Data.DomainObjects.DomainObject.HasBindingTransaction" /> to check whether the object has been boung to a 
            <see cref="T:Remotion.Data.DomainObjects.Infrastructure.BindingClientTransaction" /> or not.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.PerformConstructorCheck"><summary>
            Ensures that <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances are not created via constructor checks.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.BaseGetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"><summary>
            Serializes the base data needed to deserialize a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instance.
            </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> coming from the .NET serialization infrastructure.</param><param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> coming from the .NET serialization infrastructure.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.Initialize(Remotion.Data.DomainObjects.ObjectID,Remotion.Data.DomainObjects.ClientTransaction)"><summary>
            Initializes a new <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> during a call to <see cref="M:Remotion.Data.DomainObjects.DomainObject.NewObject``1" /> or <see cref="M:Remotion.Data.DomainObjects.DomainObject.GetObject``1(Remotion.Data.DomainObjects.ObjectID)" />. This method
            is automatically called by the framework and should not normally be invoked by user code.
            </summary><param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> to associate the new <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> with.</param><param name="bindingTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> to bind the new <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to, or 
            <see langword="null" /> if the object should not be bound.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.GetType"><summary>
            GetType might return a <see cref="T:System.Type" /> object for a generated class, which is usually not what is expected.
            <see cref="M:Remotion.Data.DomainObjects.DomainObject.GetPublicDomainObjectType" /> can be used to get the Type object of the original underlying domain object type. If
            the <see cref="T:System.Type" /> object for the generated class is explicitly required, this object can be cast to 'object' before calling GetType.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.GetPublicDomainObjectType"><summary>
            Returns the public type representation of this domain object, i.e. the type object visible to mappings, database, etc.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.GetPublicDomainObjectTypeImplementation"><summary>
            Implements the functionality required by <see cref="M:Remotion.Data.DomainObjects.DomainObject.GetPublicDomainObjectType" />. This is a separate method to avoid having to make the 
            virtual call in the constructor. The implementation of this class must expect calls from the constructor of a base class.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.ToString"><summary>
            Returns a textual representation of this object's <see cref="P:Remotion.Data.DomainObjects.DomainObject.ID" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.MarkAsChanged"><summary>
            Marks the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> as changed in the default transaction, ie. in its binding transaction or - if
            none - <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current" />. If the object's previous <see cref="P:Remotion.Data.DomainObjects.DomainObject.State" /> was <see cref="F:Remotion.Data.DomainObjects.StateType.Unchanged" />, it
            will be <see cref="F:Remotion.Data.DomainObjects.StateType.Changed" /> after this method has been called.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.EnsureDataAvailable"><summary>
            Ensures that this <see cref="T:Remotion.Data.DomainObjects.DomainObject" />'s data has been loaded into the default transaction, ie. in its binding transaction or - if
            none - <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current" />. If it hasn't, this method causes the object's data to be loaded.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.Delete"><summary>
            Deletes the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> in the default transaction, ie. in its binding transaction or - if
            none - <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.RaiseReferenceInitializatingEvent"><summary>
            Calls the <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnReferenceInitializing" /> method, setting a flag indicating that no mapped properties must be used.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.OnLoaded"><summary>
            Calls the <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnLoaded(Remotion.Data.DomainObjects.LoadMode)" /> method with the right <see cref="T:Remotion.Data.DomainObjects.LoadMode" /> parameter.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.OnReferenceInitializing"><summary>
            This method is invoked while this <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> is being initialized. This occurs whenever a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> 
            is initialized, no matter whether the object is created, loaded, transported, cloned, or somehow else instantiated, and it occurs as early 
            as possible, after the object was enlisted with a transaction and at a point of time where it is safe to access the <see cref="P:Remotion.Data.DomainObjects.DomainObject.ID" /> of the 
            object. The <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnReferenceInitializing" /> notification occurs exactly once per DomainObject, and its purpose is the initialization of 
            DomainObject fields that do not depend on the object's mapped data properties. 
            See restrictions in the Remarks section.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.OnLoaded(Remotion.Data.DomainObjects.LoadMode)"><summary>
            This method is invoked after the loading process of the object is completed.
            </summary><param name="loadMode">Specifies whether the whole domain object or only the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> has been
            newly loaded.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.OnUnloading"><summary>
            This method is invoked before an object's data is unloaded from the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current" /> transaction.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.OnUnloaded"><summary>
            This method is invoked after an object's data has been unloaded from the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current" /> transaction.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObject.OnCommitting(System.EventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.Committing" /> event.
            </summary><param name="args">A <see cref="T:System.EventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.OnCommitted(System.EventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.Committed" /> event.
            </summary><param name="args">A <see cref="T:System.EventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.OnRollingBack(System.EventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.RollingBack" /> event.
            </summary><param name="args">A <see cref="T:System.EventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.OnRolledBack(System.EventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.RolledBack" /> event.
            </summary><param name="args">A <see cref="T:System.EventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.OnRelationChanging(Remotion.Data.DomainObjects.RelationChangingEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.RelationChanging" /> event.
            This method is invoked once per involved operation and thus might be raised more often than <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnRelationChanged(Remotion.Data.DomainObjects.RelationChangedEventArgs)" />. For example,
            when a whole related object collection is replaced in one go, this method is invoked once for each old object that is not in the new collection
            and once for each new object not in the old collection.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.RelationChangingEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.OnRelationChanged(Remotion.Data.DomainObjects.RelationChangedEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.RelationChanged" /> event.
            This method is only invoked once per relation change and thus might be invoked less often than <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnRelationChanging(Remotion.Data.DomainObjects.RelationChangingEventArgs)" />.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.RelationChangedEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.OnPropertyChanging(Remotion.Data.DomainObjects.PropertyChangeEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.PropertyChanging" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.PropertyChangeEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.OnPropertyChanged(Remotion.Data.DomainObjects.PropertyChangeEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.PropertyChanged" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.PropertyChangeEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.OnDeleting(System.EventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.Deleting" /> event.
            </summary><param name="args">A <see cref="T:System.EventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObject.OnDeleted(System.EventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObject.Deleted" /> event.
            </summary><param name="args">A <see cref="T:System.EventArgs" /> object that contains the event data.</param></member><member name="E:Remotion.Data.DomainObjects.DomainObject.PropertyChanging"><summary>
            Occurs before a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> is changed.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DomainObject.PropertyChanged"><summary>
            Occurs after a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> is changed.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DomainObject.RelationChanging"><summary>
            Occurs before a Relation of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> is changed.
            This event might be raised more than once for a given relation change operation. For example, when a whole related object collection is 
            replaced in one go, this event is raised once for each old object that is not in the new collection and once for each new object not in the 
            old collection.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DomainObject.RelationChanged"><summary>
            Occurs after a Relation of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> has been changed.
            This event might be raised more than once for a given relation change operation. For example, when a whole related object collection is 
            replaced in one go, this event is raised once for each old object that is not in the new collection and once for each new object not in the 
            old collection.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DomainObject.Deleting"><summary>
            Occurs before the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> is deleted.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DomainObject.Deleted"><summary>
            Occurs after the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> has been deleted.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DomainObject.Committing"><summary>
            Occurs before the changes of a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> are committed.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DomainObject.Committed"><summary>
            Occurs after the changes of a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> are successfully committed.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DomainObject.RollingBack"><summary>
            Occurs before the changes of a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> are rolled back.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DomainObject.RolledBack"><summary>
            Occurs after the changes of a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> are successfully rolled back.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObject.ID"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObject.HasBindingTransaction"><summary>
            Gets a value indicating whether this instance is bound to specific transaction. If it is, it will always use that transaction, otherwise,
            it will always use <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current" /> when it is accessed.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObject.TransactionContext"><summary>
            Gets a <see cref="T:Remotion.Data.DomainObjects.Infrastructure.DomainObjectTransactionContextIndexer" /> object that can be used to select an <see cref="T:Remotion.Data.DomainObjects.IDomainObjectTransactionContext" />
            for a specific <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />. To obtain the default context, use <see cref="P:Remotion.Data.DomainObjects.DomainObject.DefaultTransactionContext" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObject.DefaultTransactionContext"><summary>
            Gets the default <see cref="T:Remotion.Data.DomainObjects.IDomainObjectTransactionContext" />, i.e. the transaction context that is used when this 
            <see cref="T:Remotion.Data.DomainObjects.DomainObject" />'s properties are accessed without specifying a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObject.State"><summary>
            Gets the current state of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> in the <see cref="P:Remotion.Data.DomainObjects.ClientTransactionScope.CurrentTransaction" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObject.IsInvalid"><summary>
            Gets a value indicating whther the object is invalid in the default transaction, ie. in its binding transaction or - if
            none - <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObject.Timestamp"><summary>
            Gets the timestamp used for optimistic locking when the object is committed to the database in the default transaction, ie. in 
            its binding transaction or - if none - <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObject.CurrentProperty"><summary>
            Provides simple, encapsulated access to the current property.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObject.Properties"><summary>
            Provides simple, encapsulated access to the properties of this <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DomainObjectCollection"><summary>
            Represents a collection of <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IAssociatableDomainObjectCollection"><summary>
            Defines APIs used by <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPoint" /> when it needs to transform a stand-alone <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> to
            an associated collection.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IAssociatableDomainObjectCollection.CreateAssociationCommand(Remotion.Data.DomainObjects.DataManagement.CollectionEndPoint)"><summary>
            Creates an <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand" /> instance that encapsulates all the modifications required to associate this
            <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> with the given <paramref name="endPoint" />. This API is usually not employed by framework users,
            but it is automatically invoked when a collection-valued relation property is set to a new collection.
            </summary><param name="endPoint">The end point to associate with. That end point's <see cref="P:Remotion.Data.DomainObjects.DataManagement.ICollectionEndPoint.OppositeDomainObjects" /> collection
            must have the same type and <see cref="P:Remotion.Data.DomainObjects.DomainObjectCollection.RequiredItemType" /> as this collection.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IAssociatableDomainObjectCollection.TransformToAssociated(Remotion.Data.DomainObjects.DataManagement.ICollectionEndPoint)"><summary>
            Transforms the collection to an associated collection. The collection will represent the data stored by <paramref name="endPoint" />, and
            all modifications will be performed on the <paramref name="endPoint" />. 
            This interface is used by  <see cref="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.CollectionEndPointReplaceWholeCollectionCommand" /> and should usually not be required by framework 
            users.
            </summary><param name="endPoint">The end point to associate with.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IAssociatableDomainObjectCollection.TransformToStandAlone"><summary>
            Transforms the collection to a stand-alone collection. The collection will get its own data store and will not be associated with an 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.ICollectionEndPoint" /> any longer.
            This interface is used by  <see cref="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.CollectionEndPointReplaceWholeCollectionCommand" /> and should usually not be required by framework 
            users.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IAssociatableDomainObjectCollection.IsAssociatedWith(Remotion.Data.DomainObjects.DataManagement.ICollectionEndPoint)"><summary>
            Determines whether this <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> instance is associated to the specified <see cref="T:Remotion.Data.DomainObjects.DataManagement.ICollectionEndPoint" />.
            </summary><param name="endPoint">The end point to check for. Pass <see langword="null" /> to check whether this collection is stand-alone.</param></member><member name="P:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IAssociatableDomainObjectCollection.AssociatedEndPointID"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DataManagement.ICollectionEndPoint" /> associated with this <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />, or <see langword="null" /> if
            this is a stand-alone collection.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionEventRaiser"><summary>
            Provides an interface to clients requiring to raise <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> events from outside of the collection.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.CreateDataStrategyForStandAloneCollection(Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData,System.Type,Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionEventRaiser)"><summary>
            Creates an <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" /> object for stand-alone collections. The returned object takes care of argument checks,
            required item checks, and event raising.
            </summary><param name="dataStore">The data store to use for the collection.</param><param name="requiredItemType">The required item type to use for the collection.</param><param name="eventRaiser">The event raiser to use for raising events.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.#ctor"><summary>
            Initializes a new <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.#ctor(System.Type)"><summary>
            Initializes a new <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> that only takes a certain <see cref="T:System.Type" /> as members.
            </summary><param name="requiredItemType">The <see cref="T:System.Type" /> that are required for members.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.#ctor(Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> class with a given <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" />
            data storage strategy.
            </summary><param name="dataStrategy">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" /> instance to use as the data storage strategy.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.#ctor(System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.DomainObject},System.Type)"><summary>
            Initializes a new <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> as a shallow copy of a given enumeration of <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s.
            </summary><param name="domainObjects">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s to copy. Must not be <see langword="null" />.</param><param name="requiredItemType">The required item type of the new collection.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.IsAssociatedWith(Remotion.Data.DomainObjects.DataManagement.ICollectionEndPoint)"><summary>
            Determines whether this <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> instance is associated to the specified <see cref="T:Remotion.Data.DomainObjects.DataManagement.ICollectionEndPoint" />.
            </summary><param name="endPoint">The end point to check for. Pass <see langword="null" /> to check whether this collection is stand-alone.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.EnsureDataAvailable"><summary>
            If this <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> represents a relation end point, ensures that the end point's data has been loaded, loading
            the data if necessary. If this <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> is a stand-alone collection, this method does nothing.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.GetEnumerator"><summary>
            Gets an enumerator for iterating over the items in this <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.ContainsObject(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Determines whether the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> contains a reference to the specified <paramref name="domainObject" />.
            </summary><param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to locate in the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Contains(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Determines whether an item is in the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.
            </summary><param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to locate in the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.IndexOf(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Returns the zero-based index of a given <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> in the collection.
            </summary><param name="domainObject">The <paramref name="domainObject" /> to locate in the collection.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.IndexOf(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Returns the zero-based index of a given <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> in the collection.
            </summary><param name="id">The <paramref name="id" /> to locate in the collection.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Add(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Adds a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to the collection.
            </summary><param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to add. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.AddRange(System.Collections.IEnumerable)"><summary>
            Adds a range of <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances to this collection, calling <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.Add(Remotion.Data.DomainObjects.DomainObject)" /> for each single item.
            </summary><param name="domainObjects">The domain objects to add.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.RemoveAt(System.Int32)"><summary>
            Removes a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> from the collection.
            </summary><param name="index">The index of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to remove.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Remove(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Removes a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> from the collection.
            </summary><param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to remove. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Remove(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Removes a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> from the collection.
            </summary><param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to remove. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Clear"><summary>
            Removes all items from the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Insert(System.Int32,Remotion.Data.DomainObjects.DomainObject)"><summary>
            Inserts a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> into the collection at the specified index.
            </summary><param name="index">The zero-based <paramref name="index" /> at which the item should be inserted.</param><param name="domainObject">The <paramref name="domainObject" /> to add. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.CopyTo(System.Array,System.Int32)"></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Clone"><summary>
            Creates a shallow copy of this collection, i.e. a collection of the same type and with the same contents as this collection. 
            No <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Adding" />, <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Added" />, <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removing" />, or <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removed" /> 
            events are raised during the process of cloning.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.Clone(System.Boolean)"><summary>
            Creates a shallow copy of this collection, i.e. a collection of the same type and with the same contents as this collection, while allowing
            to specify whether the clone should be read-only or not. 
            No <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Adding" />, <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Added" />, <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removing" />, or <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removed" /> 
            events are raised during the process of cloning.
            </summary><param name="makeCloneReadOnly">Specifies whether the cloned collection should be read-only.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.GetNonNotifyingData"><summary>
            Returns an implementation of <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" /> that represents the data held by this collection but will
            not raise any notifications. This means that no events wil be raised when the data is manipulated and no bidirectional notifications will be
            performed. The returned object also does not check whether this collection is read-only.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.ReplaceItemsWithoutNotifications(System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.DomainObject})"><summary>
            Replaces the items in the collection with a given set of new items.
            </summary><param name="newItems">The items to be put into the collection. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnAdding(Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Adding" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnAdded(Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Added" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnRemoving(Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removing" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnRemoved(Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removed" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnDeleting"><summary>
            The method is invoked immediately before the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> holding this collection is deleted if the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> represents a one-to-many relation.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollection.OnDeleted"><summary>
            The method is invoked after the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> holding this collection is deleted if the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> represents a one-to-many relation.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DomainObjectCollection.Adding"><summary>
            Occurs before an object is added to the collection.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DomainObjectCollection.Added"><summary>
            Occurs after an object is added to the collection.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removing"><summary>
            Occurs before an object is removed to the collection.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removed"><summary>
            Occurs after an object is removed to the collection.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DomainObjectCollection.Deleting"><summary>
            Occurs before the object holding this collection is deleted if this <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> represents a one-to-many relation.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DomainObjectCollection.Deleted"><summary>
            Occurs after the object holding this collection is deleted if this <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> represents a one-to-many relation.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObjectCollection.Count"><summary>
            Gets the number of elements contained in the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObjectCollection.IsReadOnly"><summary>
            Gets a value indicating whether this collection is read-only.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObjectCollection.RequiredItemType"><summary>
            Gets the required <see cref="T:System.Type" /> for all elements of the collection. If the collection is read-only, this is <see langword="null" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObjectCollection.AssociatedEndPointID"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DataManagement.ICollectionEndPoint" /> associated with this <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />, or <see langword="null" /> if
            this is a stand-alone collection.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObjectCollection.Item(System.Int32)"><summary>
            Gets or sets the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> with a given <paramref name="index" /> in the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObjectCollection.Item(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> with a given <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> from the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObjectCollection.System#Collections#ICollection#IsSynchronized"><summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe). Always
            returns <see langword="false" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObjectCollection.System#Collections#IList#IsFixedSize"><summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size. Always returns <see langword="false" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventHandler"><summary>
            Represents the method that will handle the <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Adding" />, <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Added" />, 
            <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removed" /> and <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removing" /> events of a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs"><summary>
            Provides data for the <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Adding" />, <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Added" />, 
            <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removing" /> and <see cref="E:Remotion.Data.DomainObjects.DomainObjectCollection.Removed" /> event of a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs.#ctor(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Initializes a new instance of the <b>DomainObjectCollectionChangingEventArgs</b> class.
            </summary><param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that is being added or removed to the collection. Must not be <see langword="null" />.</param></member><member name="P:Remotion.Data.DomainObjects.DomainObjectCollectionChangeEventArgs.DomainObject"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that is being added or removed.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DomainObjectCollectionExtensions"><summary>
            Provides extension methods for <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollectionExtensions.CheckNotReadOnly(Remotion.Data.DomainObjects.DomainObjectCollection,System.String)"><summary>
            Checks that the given <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> is not read only, throwing a <see cref="T:System.NotSupportedException" /> if it is.
            </summary><param name="collection">The collection to check.</param><param name="message">The message the exception should have if one is thrown.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollectionExtensions.UnionWith(Remotion.Data.DomainObjects.DomainObjectCollection,Remotion.Data.DomainObjects.DomainObjectCollection)"><summary>
            Adds all items of the given <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> to the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />, that are not already part of it.
            This method is a convenience method combining <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.Contains(Remotion.Data.DomainObjects.ObjectID)" /> and <see cref="M:Remotion.Data.DomainObjects.DomainObjectCollection.AddRange(System.Collections.IEnumerable)" />. If there are no changes made to this
            collection, the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> method does not touch the associated end point (if any).
            </summary><param name="collection">The collection to add items to.</param><param name="sourceCollection">The collection to add items from. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollectionExtensions.GetItemsExcept(Remotion.Data.DomainObjects.DomainObjectCollection,Remotion.Data.DomainObjects.DomainObjectCollection)"><summary>
            Returns all items of a given <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> that are not part of another <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />. The
            comparison is made by <see cref="P:Remotion.Data.DomainObjects.DomainObject.ID" />, not by reference.
            </summary><param name="collection">The collection to return items from.</param><param name="exceptedDomainObjects">A collection containing items that should not be returned.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollectionExtensions.SequenceEqual(Remotion.Data.DomainObjects.DomainObjectCollection,System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.DomainObject})"><summary>
            Checks whether a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> matches a sequence of <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> items by reference. 
            The comparison takes the order of elements into account.
            </summary><param name="collection">The <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> to check.</param><param name="comparedSequence">The sequence of elements to check against.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollectionExtensions.SetEquals(Remotion.Data.DomainObjects.DomainObjectCollection,System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.DomainObject})"><summary>
            Checks whether a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> matches another set of <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> items by reference. 
            The comparison does not take the order of elements into account.
            </summary><param name="collection">The <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> to check.</param><param name="comparedSet">The set of elements to check against.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollectionExtensions.AsList``1(Remotion.Data.DomainObjects.DomainObjectCollection)"><summary>
            Adapts the given <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> as an <see cref="T:System.Collections.Generic.IList`1" />.
            </summary><param name="collection">The collection to be wrapped..</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollectionExtensions.AsReadOnlyCollection(Remotion.Data.DomainObjects.DomainObjectCollection)"><summary>
            Returns a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> representing the data of the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.
            The data is not copied; instead, the returned collection holds the same data store as the original collection and will therefore reflect
            any changes made to the original.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObjectCollectionExtensions.AsReadOnlyCollection``1(Remotion.Data.DomainObjects.ObjectList{``0})"><summary>
            Returns a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> representing the data of the <see cref="T:Remotion.Data.DomainObjects.ObjectList`1" />.
            The data is not copied; instead, the returned collection holds the same data store as the original collection and will therefore reflect
            any changes made to the original.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DomainObjectCollectionWrapper`1"><summary>
            Implements the <see cref="T:System.Collections.Generic.IList`1" /> interface around a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DomainObjectGraphTraverser"><summary>
            Provides a mechanism for retrieving all the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances directly or indirectly referenced by a root object via
            <see cref="F:Remotion.Data.DomainObjects.Infrastructure.PropertyKind.RelatedObject" /> and <see cref="F:Remotion.Data.DomainObjects.Infrastructure.PropertyKind.RelatedObjectCollection" /> properties. A
            <see cref="T:Remotion.Data.DomainObjects.IGraphTraversalStrategy" /> can be given to decide which objects to include and which links to follow when traversing the
            object graph.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObjectGraphTraverser.GetFlattenedRelatedObjectGraph"><summary>
            Gets the flattened related object graph for the root <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> associated with this traverser.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DomainObjectMixin`1"><summary>
            Base class for mixins adding persistent properties to domain objects.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DomainObjectMixin`2"><summary>
            Base class for mixins adding persistent properties to domain objects.
            </summary></member><member name="T:Remotion.Data.DomainObjects.IDomainObjectMixin"><summary>
            Allows a mixin applied to a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to react on events related to the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instance.
            </summary></member><member name="M:Remotion.Data.DomainObjects.IDomainObjectMixin.OnDomainObjectReferenceInitializing"><summary>
            Called when the mixin's target domain object has been initialized. This is executed right after 
            <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnReferenceInitializing" />, see <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnReferenceInitializing" /> for details.
            </summary></member><member name="M:Remotion.Data.DomainObjects.IDomainObjectMixin.OnDomainObjectCreated"><summary>
            Called when the mixin's target domain object has been newly created, after the constructors have finished execution.
            </summary></member><member name="M:Remotion.Data.DomainObjects.IDomainObjectMixin.OnDomainObjectLoaded(Remotion.Data.DomainObjects.LoadMode)"><summary>
            Called when the mixin's target domain object has been loaded.
            </summary><param name="loadMode">Specifies whether the whole domain object or only the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> has been
            newly loaded.</param></member><member name="M:Remotion.Data.DomainObjects.DomainObjectMixin`2.GetPublicDomainObjectType"><summary>
            Gets the type returned by <see cref="M:Remotion.Data.DomainObjects.DomainObject.GetPublicDomainObjectType" /> when called on this mixin's target object.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObjectMixin`2.OnDomainObjectReferenceInitializing"><summary>
            Called when the mixin's target domain object is being initialized. This is executed right after 
            <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnReferenceInitializing" />, see <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnReferenceInitializing" /> for details.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObjectMixin`2.OnDomainObjectCreated"><summary>
            Called when the mixin's target domain object has been newly created, after the constructors have finished execution.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainObjectMixin`2.OnDomainObjectLoaded(Remotion.Data.DomainObjects.LoadMode)"><summary>
            Called when the mixin's target domain object has been loaded.
            </summary><param name="loadMode">Specifies whether the whole domain object or only the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> has been
            newly loaded.</param></member><member name="P:Remotion.Data.DomainObjects.DomainObjectMixin`2.ID"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of this mixin's target object.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObjectMixin`2.State"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.StateType" /> returned by this mixin's target object's <see cref="P:Remotion.Data.DomainObjects.DomainObject.State" /> property.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObjectMixin`2.IsInvalid"><summary>
            Gets a value indicating whether this mixin's target object is invalid in its default transaction.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DomainObjectMixin`2.Properties"><summary>
            Gets the properties of this mixin's target object, as returned by the <see cref="P:Remotion.Data.DomainObjects.DomainObject.Properties" /> property.
            </summary></member><member name="T:Remotion.Data.DomainObjects.IDomainObjectBaseCallRequirements"><summary>
            Describes the minimum base call requirements that <see cref="T:Remotion.Data.DomainObjects.DomainObjectMixin`2" /> has to its target
            objects.
            </summary></member><member name="P:Remotion.Data.DomainObjects.IDomainObjectBaseCallRequirements.Properties"><summary>
            Defines that the mixin's target object must have a property called Properties which returns an object of type <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer" />.
            The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> base class already defines this property.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ExtensibleEnumPropertyAttribute"><summary>
            Apply the <see cref="T:Remotion.Data.DomainObjects.ExtensibleEnumPropertyAttribute" /> to extensible enum properties to set additional
            options.
            </summary></member><member name="T:Remotion.Data.DomainObjects.IGraphTraversalStrategy"><summary>
            Defines a strategy to use when traversing a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> graph using a <see cref="T:Remotion.Data.DomainObjects.DomainObjectGraphTraverser" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.IGraphTraversalStrategy.ShouldProcessObject(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Determines whether to process the given object in the result set when traversing a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> graph.
            </summary><param name="domainObject">The domain object to decide about.</param></member><member name="M:Remotion.Data.DomainObjects.IGraphTraversalStrategy.ShouldFollowLink(Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.DomainObject,System.Int32,Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor)"><summary>
            Determines whether to follow a relation link when traversing a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> graph.
            </summary><param name="root">The root domain object from which the traversal was started.</param><param name="currentObject">The current domain object defining the relation link.</param><param name="currentDepth">The number of links that were traversed from the root to the current object. Note that this value is not
            necessarily the shortest path from the root to the current object; if an object can be reached in more than one way, it is not defined
            which way is taken by the traverser.</param><param name="linkProperty">The link property. Note that when the property's <see cref="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.GetValue``1" /> methods are
            accessed, this can cause the related objects to be loaded from the database.</param></member><member name="T:Remotion.Data.DomainObjects.IDomainObjectTransactionContext"><summary>
            Represents the context of a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that is associated with a specific <see cref="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.ClientTransaction" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.MarkAsChanged"><summary>
            Marks the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> as changed. If the object's previous <see cref="P:Remotion.Data.DomainObjects.DomainObject.State" /> was <see cref="F:Remotion.Data.DomainObjects.StateType.Unchanged" />, it
            will be <see cref="F:Remotion.Data.DomainObjects.StateType.Changed" /> after this method has been called.
            </summary></member><member name="M:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.EnsureDataAvailable"><summary>
            Ensures that the <see cref="T:Remotion.Data.DomainObjects.DomainObject" />'s data has been loaded. If it hasn't, this method causes the object's data to be loaded.
            </summary></member><member name="M:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.Execute``1(System.Func{Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.ClientTransaction,``0})"><summary>
            Executes the specified delegate in the context of the <see cref="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.ClientTransaction" /> associated with this 
            <see cref="T:Remotion.Data.DomainObjects.IDomainObjectTransactionContext" />, returning the result of the delegate. While the
            delegate is being executed, the <see cref="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.ClientTransaction" /> is made the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current" /> transaction.
            </summary><param name="func">The delegate to be executed. The delegate gets the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> and the <see cref="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.ClientTransaction" />
            associated with this <see cref="T:Remotion.Data.DomainObjects.IDomainObjectTransactionContext" /> as its parameters.
            </param></member><member name="M:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.Execute(System.Action{Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.ClientTransaction})"><summary>
            Executes the specified delegate in the context of the <see cref="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.ClientTransaction" /> associated with this 
            <see cref="T:Remotion.Data.DomainObjects.IDomainObjectTransactionContext" />. While the
            delegate is being executed, the <see cref="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.ClientTransaction" /> is made the <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.Current" /> transaction.
            </summary><param name="action">The delegate to be executed. The delegate gets the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> and the <see cref="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.ClientTransaction" />
            associated with this <see cref="T:Remotion.Data.DomainObjects.IDomainObjectTransactionContext" /> as its parameters.</param></member><member name="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.ClientTransaction"><summary>
            Gets the <see cref="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.ClientTransaction" /> this context is associated with.
            </summary></member><member name="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.State"><summary>
            Gets the current state of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> in the associated <see cref="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.ClientTransaction" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.IsInvalid"><summary>
            Gets a value indicating the invalid status of the object in the associated <see cref="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.ClientTransaction" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.IDomainObjectTransactionContext.Timestamp"><summary>
            Gets the timestamp used for optimistic locking when the object is committed to the database.
            </summary></member><member name="T:Remotion.Data.DomainObjects.InstantiableAttribute"><summary>
            When the <see cref="T:Remotion.Data.DomainObjects.InstantiableAttribute" /> is defined on a type, it signals that this type can be instantiated by the
            <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> infrastructure even though it declared as <see langword="abstract" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.InstantiableAttribute.#ctor"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.InstantiableAttribute" /> class.
            </summary></member><member name="T:Remotion.Data.DomainObjects.InvalidEnumValueException"><summary>
            The exception that is thrown when a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> is set with an enum value that does not match the property's type.
            </summary></member><member name="T:Remotion.Data.DomainObjects.InvalidTypeException"><summary>
            The exception that is thrown when a PropertyValue is set to a value of wrong type.
            </summary></member><member name="M:Remotion.Data.DomainObjects.InvalidTypeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"><summary>
            Sets the SerializationInfo object with the parameter name and additional exception information.
            </summary><param name="info">The object that holds the serialized object data.</param><param name="context">The contextual information about the source or destination.</param></member><member name="P:Remotion.Data.DomainObjects.InvalidTypeException.PropertyName"><summary>
            The name of the property that caused the exception.
            </summary></member><member name="P:Remotion.Data.DomainObjects.InvalidTypeException.ExpectedType"><summary>
            The type that was expected for the property value.
            </summary></member><member name="P:Remotion.Data.DomainObjects.InvalidTypeException.ActualType"><summary>
            The type that was provided for the property value.
            </summary></member><member name="T:Remotion.Data.DomainObjects.LinqCastMethodAttribute"><summary>
            Denotes a property or method to be treated like a cast to the member's return type when used in a database LINQ query. To apply the attribute 
            to a property, attribute the property's get accessor.
            </summary></member><member name="T:Remotion.Data.DomainObjects.LinqCastMethodAttribute.MethodCallTransformer"><summary>
            Implements the transformation that allows the SQL generator to regard a property or method as a cast.
            </summary></member><member name="T:Remotion.Data.DomainObjects.LinqPropertyRedirectionAttribute"><summary>
            Allows a property or method to be redirected to a different property in the scope of LINQ queries. To redirect a property, apply the attribute 
            to the property's get accessor.
            </summary></member><member name="M:Remotion.Data.DomainObjects.LinqPropertyRedirectionAttribute.#ctor(System.Type,System.String)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.LinqPropertyRedirectionAttribute" /> class.
            </summary><param name="declaringType">The declaring type of the property to which the attribute's target is redirected. The property must
            exist within the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> holding the redirected attribute (or one of its persistent mixins).</param><param name="mappedPropertyName">The name of the property to which the attribute's target is redirected.</param></member><member name="M:Remotion.Data.DomainObjects.LinqPropertyRedirectionAttribute.GetMappedProperty"><summary>
            Gets the property to which the attribute's target is redirected, throwing an exception if the property does not exist.
            </summary></member><member name="P:Remotion.Data.DomainObjects.LinqPropertyRedirectionAttribute.DeclaringType"><summary>
            Gets the declaring type of the property to which the attribute's target is redirected
            </summary></member><member name="P:Remotion.Data.DomainObjects.LinqPropertyRedirectionAttribute.MappedPropertyName"><summary>
            Gets the name of the property to which the attribute's target is redirected.
            </summary></member><member name="T:Remotion.Data.DomainObjects.LinqPropertyRedirectionAttribute.MethodCallTransformer"><summary>
            Implements the transformations required to map a member onto another property.
            </summary></member><member name="T:Remotion.Data.DomainObjects.LoadMode"><summary>
            Indicates whether a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> was loaded as a whole or if only its <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> was loaded.
            </summary></member><member name="F:Remotion.Data.DomainObjects.LoadMode.WholeDomainObjectInitialized"><summary>
            The whole object has been loaded, e.g. as a reaction to <see cref="M:Remotion.Data.DomainObjects.DomainObject.GetObject``1(Remotion.Data.DomainObjects.ObjectID)" />.
            </summary></member><member name="F:Remotion.Data.DomainObjects.LoadMode.DataContainerLoadedOnly"><summary>
            Only the object's <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> has been loaded, e.g. as a reaction to <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.EnlistDomainObject(Remotion.Data.DomainObjects.DomainObject)" /> or
            in a substransaction.
            </summary></member><member name="T:Remotion.Data.DomainObjects.MandatoryAttribute"><summary>
            Apply the <see cref="T:Remotion.Data.DomainObjects.MandatoryAttribute" /> to properties of type <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ObjectID"><summary>
            Uniquely identifies a domain object.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ObjectID.op_Equality(Remotion.Data.DomainObjects.ObjectID,Remotion.Data.DomainObjects.ObjectID)"><summary>
            Tests whether two specified <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> objects are equivalent.
            </summary><param name="id1">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> object that is to the left of the equality operator.</param><param name="id2">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> object that is to the right of the equality operator.</param></member><member name="M:Remotion.Data.DomainObjects.ObjectID.op_Inequality(Remotion.Data.DomainObjects.ObjectID,Remotion.Data.DomainObjects.ObjectID)"><summary>
            Tests whether two specified <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> objects are different.
            </summary><param name="id1">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> object that is to the left of the inequality operator.</param><param name="id2">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> object that is to the right of the inequality operator.</param></member><member name="M:Remotion.Data.DomainObjects.ObjectID.Equals(Remotion.Data.DomainObjects.ObjectID,Remotion.Data.DomainObjects.ObjectID)"><summary>
            Determines whether the specified <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> instances are considered equal.
            </summary><param name="id1">The first <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> to compare.</param><param name="id2">The second <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> to compare.</param></member><member name="M:Remotion.Data.DomainObjects.ObjectID.Parse(System.String)"><summary>
            Converts the string representation of the ID to an <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> instance. If the operation fails, an exception is thrown.
            </summary><param name="objectIDString">A string containing the object ID to convert.</param></member><member name="M:Remotion.Data.DomainObjects.ObjectID.TryParse(System.String,Remotion.Data.DomainObjects.ObjectID@)"><summary>
            Converts the string representation of the ID to an <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> instance. A return value indicates whether the operation succeeded.
            </summary><param name="objectIDString">A string containing the object ID to convert.</param><param name="result">If the conversion completes successfully, this parameter is set to an <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> instance equivalent to the 
            object ID contained in <paramref name="objectIDString" />. Otherwise, it is set to <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ObjectID.#ctor(System.String,System.Object)"><summary>
            Initializes a new instance of the <b>ObjectID</b> class with the specified class ID and ID value.
            </summary><param name="classID">The ID of the class of the object. Must not be <see langword="null" />.</param><param name="value">The ID value used to identify the object in the storage provider. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ObjectID.#ctor(System.Type,System.Object)"><summary>
            Initializes a new instance of the <b>ObjectID</b> class with the specified class type and ID value.
            </summary><param name="classType">The <see cref="T:System.Type" /> of the class of the object. Must not be <see langword="null" />.</param><param name="value">The ID value used to identify the object in the storage provider. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ObjectID.#ctor(Remotion.Data.DomainObjects.Mapping.ClassDefinition,System.Object)"><summary>
            Initializes a new instance of the <b>ObjectID</b> class with the specified <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition" /> and ID value.
            </summary><param name="classDefinition">The <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition" /> of the object. Must not be <see langword="null" />.</param><param name="value">The ID value used to identify the object in the storage provider. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ObjectID.ToString"><summary>
            Returns the string representation of the current <see cref="T:Remotion.Data.DomainObjects.ObjectID" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ObjectID.GetHashCode"><summary>
            Returns the hash code for this instance.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ObjectID.CompareTo(System.Object)"><summary>
            Compares this <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> with another <see cref="T:Remotion.Data.DomainObjects.ObjectID" />and returns an integer that indicates whether the current instance 
            precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary><param name="obj">An <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> to compare with this instance.</param></member><member name="M:Remotion.Data.DomainObjects.ObjectID.Equals(System.Object)"><summary>
            Determines whether the specified <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> is equal to the current <b>ObjectID</b>.
            </summary><param name="obj">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> to compare with the current <b>ObjectID</b>. </param></member><member name="P:Remotion.Data.DomainObjects.ObjectID.StorageProviderID"><summary>
            Gets the ID of the <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider" /> which stores the object.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ObjectID.Value"><summary>
            Gets the ID value used to identify the object in the storage provider.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ObjectID.ClassID"><summary>
            The class ID of the object class.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ObjectID.ClassDefinition"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition" /> associated with this <b>ObjectID</b>.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ObjectList`1.#ctor(Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> class with a given <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" />
            data storage strategy. The <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" />'s <see cref="P:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData.RequiredItemType" />
            must be set to <typeparamref name="T" />.
            </summary><param name="dataStrategy">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" /> instance to use as the data storage strategy.</param></member><member name="M:Remotion.Data.DomainObjects.ObjectList`1.#ctor(System.Collections.Generic.IEnumerable{`0})"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.ObjectList`1" /> class with a given initial contents.
            </summary><param name="domainObjects">The domain objects to use as the initial contents of the <see cref="T:Remotion.Data.DomainObjects.ObjectList`1" />.</param></member><member name="T:Remotion.Data.DomainObjects.PropertyChangeEventArgs"><summary>
            Provides data for a <b>PropertyChanging</b> event.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ValueChangeEventArgs"><summary>
            Provides data for change events of <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> instances.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ValueChangeEventArgs.#ctor(System.Object,System.Object)"><summary>
            Initializes a new instance of the <b>ValueChangingEventArgs</b>.
            </summary><param name="oldValue">The old value.</param><param name="newValue">The new value.</param></member><member name="P:Remotion.Data.DomainObjects.ValueChangeEventArgs.OldValue"><summary>
            Gets the old value.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ValueChangeEventArgs.NewValue"><summary>
            Gets the new value.
            </summary></member><member name="M:Remotion.Data.DomainObjects.PropertyChangeEventArgs.#ctor(Remotion.Data.DomainObjects.DataManagement.PropertyValue,System.Object,System.Object)"><summary>
            Initializes a new instance of the <b>ValueChangingEventArgs</b> class.
            </summary><param name="propertyValue">The <see cref="P:Remotion.Data.DomainObjects.PropertyChangeEventArgs.PropertyValue" /> that is being changed. Must not be <see langword="null" />.</param><param name="oldValue">The old value.</param><param name="newValue">The new value.</param></member><member name="P:Remotion.Data.DomainObjects.PropertyChangeEventArgs.PropertyValue"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> object that is being changed.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ReadOnlyDomainObjectCollectionAdapter`1"><summary>
            This class acts as a read-only adapter for an <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" /> object.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ReflectionUtility"><summary>
            Utility class for methods using reflection.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ReflectionUtility.GetConfigFileDirectory"><summary>
            Returns the directory of the current executing assembly.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ReflectionUtility.GetAssemblyDirectory(System.Reflection.Assembly)"><summary>
            Gets the directory containing the given assembly.
            </summary><param name="assembly">The assembly whose directory to retrieve.</param></member><member name="M:Remotion.Data.DomainObjects.ReflectionUtility.GetAssemblyDirectory(System.Runtime.InteropServices._Assembly)"><summary>
            Gets the directory containing the given assembly.
            </summary><param name="assembly">The assembly whose directory to retrieve.</param></member><member name="M:Remotion.Data.DomainObjects.ReflectionUtility.CreateObject(System.Type,System.Object[])"><summary>
            Creates an object of a given type.
            </summary><param name="type">The <see cref="T:System.Type" /> of the object to instantiate. Must not be <see langword="null" />.</param><param name="constructorParameters">The parameters for the constructor of the object.</param></member><member name="M:Remotion.Data.DomainObjects.ReflectionUtility.GetPropertyName(System.Reflection.PropertyInfo)"><summary>
            Returns the reflection based property identifier for a given property member.
            </summary><param name="propertyInfo">The property whose identifier should be returned. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ReflectionUtility.GetPropertyName(System.Type,System.String)"><summary>Returns the property name scoped for a specific <paramref name="originalDeclaringType" />.</summary></member><member name="M:Remotion.Data.DomainObjects.ReflectionUtility.IsObjectList(System.Type)"><summary>
            Evaluates whether the <paramref name="type" /> is an <see cref="T:Remotion.Data.DomainObjects.ObjectList`1" /> or derived from <see cref="T:Remotion.Data.DomainObjects.ObjectList`1" />.
            </summary><param name="type">The <see cref="T:System.Type" /> to check. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ReflectionUtility.IsDomainObject(System.Type)"><summary>
            Checks if a property type is a domain object.
            </summary><param name="type">The <see cref="T:System.Type" /> to check. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ReflectionUtility.IsRelationType(System.Type)"><summary>
            Checks if a property type is a relation property.
            </summary><param name="type">The <see cref="T:System.Type" /> to check. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ReflectionUtility.GetObjectListTypeParameter(System.Type)"><summary>
            Returns the type parameter of the <see cref="T:Remotion.Data.DomainObjects.ObjectList`1" />.
            </summary><param name="type">The <see cref="T:System.Type" /> for which to return the type parameter. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.ReflectionUtility.GetRelatedObjectTypeFromRelationProperty(System.Reflection.PropertyInfo)"><summary>
            Gets the type of the related object (the type of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" />) for a relation <paramref name="propertyInfo" />.
            </summary><param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo" /> to analyze.</param></member><member name="M:Remotion.Data.DomainObjects.ReflectionUtility.GetDeclaringDomainObjectTypeForProperty(System.Reflection.PropertyInfo,Remotion.Data.DomainObjects.Mapping.ReflectionBasedClassDefinition)"><summary>
            Gets the declaring domain object type for the given property.
            </summary><param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo" /> to analyze.</param><param name="classDefinition">The <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition" /> of the given <see cref="T:System.Reflection.PropertyInfo" /></param></member><member name="M:Remotion.Data.DomainObjects.ReflectionUtility.IsMixedProperty(System.Reflection.PropertyInfo,Remotion.Data.DomainObjects.Mapping.ReflectionBasedClassDefinition)"><summary>
            Checks if the given <see cref="T:System.Reflection.PropertyInfo" /> on the given <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition" /> is a mixed property.
            </summary><param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo" /> to analyze.</param><param name="classDefinition">The <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition" /> of the given <see cref="T:System.Reflection.PropertyInfo" /></param></member><member name="M:Remotion.Data.DomainObjects.ReflectionUtility.IsInheritanceRoot(System.Type)"><summary>
            Checks if the given type is the inheritance root. A type is the inheritance root if it is either the domain object base or if the
            type has the <see cref="T:Remotion.Data.DomainObjects.StorageGroupAttribute" /> applied.
            </summary><param name="type">The <see cref="T:System.Type" /> to be analyzed</param></member><member name="M:Remotion.Data.DomainObjects.ReflectionUtility.IsDomainObjectBase(System.Type)"><summary>
            Checks if the given type is the domain object base.
            </summary><param name="type">The <see cref="T:System.Type" /> to check. Must not be <see langword="null" />.</param></member><member name="T:Remotion.Data.DomainObjects.RelationChangedEventArgs"><summary>
            Provides data for a <b>RelationChanged</b> event.
            </summary></member><member name="M:Remotion.Data.DomainObjects.RelationChangedEventArgs.#ctor(Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition)"><summary>
            Initializes a new instance of the <b>RelationChangingEventArgs</b> class.
            </summary><param name="relationEndPointDefinition">The relation endpoint defintion. Must not be <see langword="null" />.</param></member><member name="P:Remotion.Data.DomainObjects.RelationChangedEventArgs.RelationEndPointDefinition"><summary>
            Gets the relation endpoint defintion of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> that has been changed due to the relation change.
            </summary></member><member name="T:Remotion.Data.DomainObjects.RelationChangingEventArgs"><summary>
            Provides data for a <b>RelationChanging</b> event.
            </summary></member><member name="M:Remotion.Data.DomainObjects.RelationChangingEventArgs.#ctor(Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.DomainObject)"><summary>
            Initializes a new instance of the <b>RelationChangingEventArgs</b> class.
            </summary><param name="relationEndPointDefinition">The relation endpoint definition. Must not be <see langword="null" />.</param><param name="oldRelatedObject">The old object that was related.</param><param name="newRelatedObject">The new object that is related.</param></member><member name="P:Remotion.Data.DomainObjects.RelationChangingEventArgs.OldRelatedObject"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that was related.
            </summary></member><member name="P:Remotion.Data.DomainObjects.RelationChangingEventArgs.NewRelatedObject"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that is related.
            </summary></member><member name="P:Remotion.Data.DomainObjects.RelationChangingEventArgs.RelationEndPointDefinition"><summary>
            Gets the relation endpoint defintion of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> that has been changed due to the relation change.
            </summary></member><member name="T:Remotion.Data.DomainObjects.SimpleDomainObject`1"><summary>
            Represents a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that can be instantiated (via <see cref="M:Remotion.Data.DomainObjects.SimpleDomainObject`1.NewObject" />), retrieved (via
            <see cref="M:Remotion.Data.DomainObjects.SimpleDomainObject`1.GetObject(Remotion.Data.DomainObjects.ObjectID)" />), and deleted via public methods.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObject"><summary>
            Provides a base class for bindable <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> classes.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectMixin"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectMixin" /> applies the <see cref="T:Remotion.ObjectBinding.IBusinessObjectWithIdentity" /> implementation for bindable types derived 
            from <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObject.#ctor"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObject" /> class.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObject" /> class in the process of deserialization.
            </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> coming from the .NET serialization infrastructure.</param><param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> coming from the .NET serialization infrastructure.</param></member><member name="P:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObject.DisplayName"><summary>
            Provides a possibility to override the display name of the bindable domain object.
            </summary></member><member name="M:Remotion.Data.DomainObjects.SimpleDomainObject`1.NewObject"><summary>
            Returns a new instance of a concrete domain object for the current<see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />. The instance is constructed
            with the default constructor.
            </summary></member><member name="M:Remotion.Data.DomainObjects.SimpleDomainObject`1.NewObject(Remotion.Reflection.ParamList)"><summary>
            Returns a new instance of a concrete domain object for the current<see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />. The instance is constructed
            with a constructor accepting the given parameter list.
            </summary><param name="constructorParameters">A <see cref="T:Remotion.Reflection.ParamList" /> object holding the parameters to be passed to the constructor. Instantiate this
            by using one of the <see cref="M:Remotion.Reflection.ParamList.Create``2(``0,``1)" /> methods.</param></member><member name="M:Remotion.Data.DomainObjects.SimpleDomainObject`1.GetObject(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Gets a <see cref="T:Remotion.Data.DomainObjects.SimpleDomainObject`1" /> that is already loaded or attempts to load it from the data source.
            </summary><param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the <see cref="T:Remotion.Data.DomainObjects.SimpleDomainObject`1" /> that should be loaded. Must not be 
            <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.SimpleDomainObject`1.GetObject(Remotion.Data.DomainObjects.ObjectID,System.Boolean)"><summary>
            Gets a <see cref="T:Remotion.Data.DomainObjects.SimpleDomainObject`1" /> that is already loaded or attempts to load it from the data source.
            </summary><param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the <see cref="T:Remotion.Data.DomainObjects.SimpleDomainObject`1" /> that should be loaded. Must not be <see langword="null" />.</param><param name="includeDeleted">Indicates if the method should return <see cref="T:Remotion.Data.DomainObjects.SimpleDomainObject`1" />s that are already deleted.</param></member><member name="M:Remotion.Data.DomainObjects.SimpleDomainObject`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.SimpleDomainObject`1" /> class in the process of deserialization.
            </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> coming from the .NET serialization infrastructure.</param><param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> coming from the .NET serialization infrastructure.</param></member><member name="M:Remotion.Data.DomainObjects.SimpleDomainObject`1.Delete"><summary>
            Deletes the <see cref="T:Remotion.Data.DomainObjects.SimpleDomainObject`1" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.StateType"><summary>
            Indicates the state of a <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.
            </summary></member><member name="F:Remotion.Data.DomainObjects.StateType.Unchanged"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> has not changed since it was loaded.
            </summary></member><member name="F:Remotion.Data.DomainObjects.StateType.Changed"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> has been changed since it was loaded.
            </summary></member><member name="F:Remotion.Data.DomainObjects.StateType.New"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> has been instanciated and has not been committed.
            </summary></member><member name="F:Remotion.Data.DomainObjects.StateType.Deleted"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> has been deleted.
            </summary></member><member name="F:Remotion.Data.DomainObjects.StateType.Invalid"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> reference is no longer or not yet valid for use in this transaction.
            </summary></member><member name="F:Remotion.Data.DomainObjects.StateType.NotLoadedYet"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.DomainObject" />'s data has not been loaded yet into the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />. It will be loaded when needed,
            e.g. when a property value or relation is accessed, or when 
            <see cref="M:Remotion.Data.DomainObjects.DomainObject.EnsureDataAvailable" /> is called for the <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.StorageClassNoneAttribute"><summary>Defines the property as not managed by the persistence framework.</summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.StorageClassAttribute"><summary>Defines if and how a property is managed by the persistence framework.</summary></member><member name="T:Remotion.Data.DomainObjects.StorageClassTransactionAttribute"><summary>Defines the property as managed in the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> but not-persisted in the underlying data store.</summary></member><member name="T:Remotion.Data.DomainObjects.StringPropertyAttribute"><summary>
            Apply the <see cref="T:Remotion.Data.DomainObjects.StringPropertyAttribute" /> to properties of type <see cref="T:System.String" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.SubTransactionCreatedEventArgs"><summary>
            Provides data for the <see cref="E:Remotion.Data.DomainObjects.ClientTransaction.SubTransactionCreated" /> event.
            </summary></member><member name="M:Remotion.Data.DomainObjects.SubTransactionCreatedEventArgs.#ctor(Remotion.Data.DomainObjects.ClientTransaction)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.SubTransactionCreatedEventArgs" /> class.
            </summary><param name="subTransaction">The subtransaction created.</param></member><member name="P:Remotion.Data.DomainObjects.SubTransactionCreatedEventArgs.SubTransaction"><summary>
            Gets the subtransaction created.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ValueTooLongException"><summary>
            The exception that is thrown when a domain object property is set with a value that is exceeds the <see cref="P:Remotion.Data.DomainObjects.Mapping.PropertyDefinition.MaxLength" /> of 
            the property.
            </summary></member><member name="M:Remotion.Data.DomainObjects.ValueTooLongException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"><summary>
            Sets the SerializationInfo object with the parameter name and additional exception information.
            </summary><param name="info">The object that holds the serialized object data.</param><param name="context">The contextual information about the source or destination.</param></member><member name="P:Remotion.Data.DomainObjects.ValueTooLongException.PropertyName"><summary>
            Gets the PropertyName that was set with a value exceeding the maximum length.
            </summary></member><member name="P:Remotion.Data.DomainObjects.ValueTooLongException.MaxLength"><summary>
            Gets the maximum length of the property.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Cloning.CompleteCloneStrategy"><summary>
            Assists <see cref="T:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner" /> by cloning all objects referenced by a cloned source object as well. This ensures deep cloning
            of a whole object graph.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Cloning.ICloneStrategy"><summary>
            Provides an interface for classes determining the details about how <see cref="T:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner" /> clones a <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Cloning.ICloneStrategy.HandleReference(Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor,Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor,Remotion.Data.DomainObjects.Cloning.CloneContext)"><summary>
            Called when <see cref="T:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner" /> encounters a reference that might need to be cloned.
            </summary><param name="sourceReference">The reference on the source object.</param><param name="cloneReference">The reference on the cloned object.</param><param name="context">A <see cref="T:Remotion.Data.DomainObjects.Cloning.CloneContext" /> that should be used to obtain clones of objects held by <paramref name="sourceReference" />.</param></member><member name="M:Remotion.Data.DomainObjects.Cloning.CompleteCloneStrategy.HandleReference(Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor,Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor,Remotion.Data.DomainObjects.Cloning.CloneContext)"><summary>
            Sets the <paramref name="cloneReference" /> to hold clones of the objects referenced by <paramref name="sourceReference" />.
            </summary><param name="sourceReference">The reference on the source object.</param><param name="cloneReference">The reference on the cloned object.</param><param name="context">The <see cref="T:Remotion.Data.DomainObjects.Cloning.CloneContext" /> that is used to obtain clones of objects held by <paramref name="sourceReference" />.</param></member><member name="T:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner"><summary>
            Assists in cloning <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner.CreateValueClone``1(``0)"><summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instance of the same type and with the same property values as the given <paramref name="source" />.
            Relations are not cloned, foreign key properties default to null.
            </summary><param name="source">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to be cloned.</param></member><member name="M:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner.CreateCloneHull``1(``0)"><summary>
            Creates a clone hull, which is a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> of the same type as a given source object, but with no properties or
            relations being set.
            </summary><param name="source">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to be cloned.</param></member><member name="M:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner.CreateClone``1(``0,Remotion.Data.DomainObjects.Cloning.ICloneStrategy)"><summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instance of the same type and with the same property values as the given <paramref name="source" />.
            Referenced objects are cloned according to the given strategy.
            </summary><param name="source">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to be cloned.</param><param name="strategy">The <see cref="T:Remotion.Data.DomainObjects.Cloning.ICloneStrategy" /> to be used when cloning the object's references.</param></member><member name="M:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner.CreateClone``1(``0,Remotion.Data.DomainObjects.Cloning.ICloneStrategy,Remotion.Data.DomainObjects.Cloning.CloneContext)"><summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instance of the same type and with the same property values as the given <paramref name="source" />.
            Referenced objects are cloned according to the given strategy, the given context is used instead of creating a new one.
            </summary><param name="source">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to be cloned.</param><param name="strategy">The <see cref="T:Remotion.Data.DomainObjects.Cloning.ICloneStrategy" /> to be used when cloning the object's references.</param><param name="context">The <see cref="T:Remotion.Data.DomainObjects.Cloning.CloneContext" /> to be used by the cloner.</param></member><member name="P:Remotion.Data.DomainObjects.Cloning.DomainObjectCloner.CloneTransaction"><summary>
            Gets or sets the transaction to be used for the clone. If this is set to <see langword="null" />, the current transaction is used.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Configuration.DomainObjectsConfiguration"><summary>
            <see cref="T:System.Configuration.ConfigurationSectionGroup" /> for grouping the <see cref="T:System.Configuration.ConfigurationSection" /> in the <b>Remotion.Data.DomainObjects</b> namespace.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Configuration.IDomainObjectsConfiguration"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.Configuration.IDomainObjectsConfiguration" /> interface is an abstraction for the <see cref="T:System.Configuration.ConfigurationSectionGroup" /> and the fake 
            implementation of the domain objects configuration.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.AllMappingPropertiesFinder"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.AllMappingPropertiesFinder" /> is used to find all <see cref="T:System.Reflection.PropertyInfo" /> objects that have a mapping attribute applied.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.PropertyFinderBase"><summary>The <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.PropertyFinderBase" /> is used to find all <see cref="T:System.Reflection.PropertyInfo" /> objects relevant for the mapping.</summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.ClassReflector"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.ClassReflector" /> is used to build a <see cref="T:Remotion.Data.DomainObjects.Mapping.ReflectionBasedClassDefinition" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.ClassReflectorForRelations"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.ClassReflectorForRelations" /> is used to build the <see cref="T:Remotion.Data.DomainObjects.Mapping.RelationDefinition" /> objects for a type.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.IgnoreForMappingConfigurationAttribute"><summary>
            Apply this attribute to a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> class to have the <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.MappingReflector" /> ignore the class when building the
            mapping configuration.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.IRelationEndPointDefinitionFactory"><summary>
            Defines a factory interface for classes creating <see cref="T:Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition" /> instances. There is only one implementation
            (<see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.ReflectionBasedRelationEndPointDefinitionFactory" />), this class exists primarily for testing purposes.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.MemberReflectorBase"><summary>Base class for reflecting on the properties and relations of a class.</summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.NameBasedPropertyFinder"><summary>
            Finds a property based on its name. This is used by <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationReflectorBase" /> to find the opposite property for a relation end-point.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.PropertyFinder"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.PropertyFinder" /> is used to find all <see cref="T:System.Reflection.PropertyInfo" /> objects that constitute a <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.PropertyReflector"><summary>Used to create the <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition" /> from a <see cref="T:System.Reflection.PropertyInfo" />.</summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RdbmsRelationEndPointReflector"><summary>Used to create the <see cref="T:Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition" /> from a <see cref="T:System.Reflection.PropertyInfo" /> for types persisted in an <b>RDBMS</b>.</summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationEndPointReflector"><summary>Used to create the <see cref="T:Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition" /> from a <see cref="T:System.Reflection.PropertyInfo" />.</summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationReflectorBase"><summary>Base class for reflecting on the relations of a class.</summary></member><member name="P:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationReflectorBase.DeclaringDomainObjectTypeForProperty"><summary>
            Gives the type of DomainObject that originally declared the property.
            There are four cases:
            - If the <see cref="P:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationReflectorBase.ClassDefinition" />'s type itself declares the property, this returns the 
              <see cref="P:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationReflectorBase.ClassDefinition" />'s type.
            - If a base class of the <see cref="P:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationReflectorBase.ClassDefinition" />'s type declares the property, this returns the base class. This can only 
              happen if the <see cref="P:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationReflectorBase.ClassDefinition" /> is the inheritance root and the base class is above the inheritance root. (The 
              <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.ClassReflectorForRelations" /> will only create <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationReflectorBase" /> objects for properties declared above the
              <see cref="P:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationReflectorBase.ClassDefinition" />'s type if the <see cref="P:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationReflectorBase.ClassDefinition" /> is an inheritance root.)
            - If a mixin applied to the <see cref="P:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationReflectorBase.ClassDefinition" />'s type declares the property, this returns the <see cref="P:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationReflectorBase.ClassDefinition" />'s type.
            - If a mixin applied to a base class of the <see cref="P:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationReflectorBase.ClassDefinition" />'s type declares the property, this returns the base class. Again,
              this can only happen if the <see cref="P:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationReflectorBase.ClassDefinition" /> is an inheritance root.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.ReflectionBasedRelationEndPointDefinitionFactory"><summary>
            Implements the <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.IRelationEndPointDefinitionFactory" /> by delegating to the <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationEndPointReflector" /> class.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationPropertyFinder"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationPropertyFinder" /> is used to find all <see cref="T:System.Reflection.PropertyInfo" /> objects that constitute a 
            <see cref="T:Remotion.Data.DomainObjects.Mapping.RelationEndPointDefinition" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.RelationReflector"><summary>Used to create the <see cref="T:Remotion.Data.DomainObjects.Mapping.RelationDefinition" /> from a <see cref="T:System.Reflection.PropertyInfo" />.</summary></member><member name="T:Remotion.Data.DomainObjects.Design.DomainObjectsDesignModeHelper"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.Design.DomainObjectsDesignModeHelper" /> is inteded to encapsulate design mode specific initialization code for <see cref="T:System.ComponentModel.IComponent" />
            implementations in the <see cref="N:Remotion.Data.DomainObjects" /> namespace, such as data sources.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Development.FakeDomainObjectsConfiguration"><summary>
            Fake implementation of the <see cref="T:Remotion.Data.DomainObjects.Configuration.IDomainObjectsConfiguration" /> interface. Use this class for programmatically setting up the configuration 
            in unit test scenarios.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DomainImplementation.LifetimeService"><summary>
            Provides functionality to instantiate, get, and delete <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainImplementation.LifetimeService.NewObject(Remotion.Data.DomainObjects.ClientTransaction,System.Type,Remotion.Reflection.ParamList)"><summary>
            Returns a new instance of a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> with the supplied constructor arguments in the given <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.</param><param name="domainObjectType">The <see cref="T:System.Type" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to be created.</param><param name="constructorParameters">A <see cref="T:Remotion.Reflection.ParamList" /> encapsulating the parameters to be passed to the constructor. Instantiate this
            by using one of the <see cref="M:Remotion.Reflection.ParamList.Create``2(``0,``1)" /> methods.</param></member><member name="M:Remotion.Data.DomainObjects.DomainImplementation.LifetimeService.GetObject(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.ObjectID,System.Boolean)"><summary>
            Gets a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that already exists or attempts to load it from the data source.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.</param><param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> that should be loaded. Must not be <see langword="null" />.</param><param name="includeDeleted">Indicates if the method should return <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s that are already deleted.</param></member><member name="M:Remotion.Data.DomainObjects.DomainImplementation.LifetimeService.GetObjectReference(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.ObjectID)"><summary>
            Gets a reference to a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> with the given <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> in a specific <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />. If the
            transaction does not currently hold an object with this <see cref="T:Remotion.Data.DomainObjects.ObjectID" />, an object reference representing that <see cref="T:Remotion.Data.DomainObjects.ObjectID" />
            is created without calling a constructor and without loading the object's data from the data source. This method does not check whether an
            object with the given <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> actually exists in the data source.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> to get the reference from.</param><param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> to get an object reference for.</param></member><member name="M:Remotion.Data.DomainObjects.DomainImplementation.LifetimeService.DeleteObject(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject)"><summary>
            Deletes the given <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.</param><param name="objectToBeDeleted">The object to be deleted.</param></member><member name="T:Remotion.Data.DomainObjects.DomainImplementation.UnloadService"><summary>
            Provides functionality for unloading the data that a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> stores for <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DomainImplementation.UnloadService.UnloadCollectionEndPoint(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.RelationEndPointID,Remotion.Data.DomainObjects.DomainImplementation.UnloadTransactionMode)"><summary>
            Unloads the unchanged collection end point indicated by the given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" /> in the specified
            <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />. If the end point has not been loaded or has already been unloaded, this method does nothing.
            </summary><param name="clientTransaction">The client transaction to unload the data from.</param><param name="endPointID">The end point ID. In order to retrieve this ID from a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> representing a relation
            end point, specify the <see cref="P:Remotion.Data.DomainObjects.DomainObjectCollection.AssociatedEndPointID" />.</param><param name="transactionMode">The <see cref="T:Remotion.Data.DomainObjects.DomainImplementation.UnloadTransactionMode" /> to use. This can be used to specify whether the unload operation should 
            affect this transaction only or the whole transaction hierarchy, up to the root transaction.</param></member><member name="M:Remotion.Data.DomainObjects.DomainImplementation.UnloadService.TryUnloadCollectionEndPoint(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.RelationEndPointID,Remotion.Data.DomainObjects.DomainImplementation.UnloadTransactionMode)"><summary>
            Tries to unload the unchanged collection end point indicated by the given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" /> in the specified
            <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />, returning a value indicating whether the unload operation succeeded. If the end point has not been loaded or
            has already been unloaded, this method does nothing.
            </summary><param name="clientTransaction">The client transaction to unload the data from.</param><param name="endPointID">The end point ID. In order to retrieve this ID from a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> representing a relation
            end point, specify the <see cref="P:Remotion.Data.DomainObjects.DomainObjectCollection.AssociatedEndPointID" />.</param><param name="transactionMode">The <see cref="T:Remotion.Data.DomainObjects.DomainImplementation.UnloadTransactionMode" /> to use. This can be used to specify whether the unload operation should
            affect this transaction only or the whole transaction hierarchy, up to the root transaction.</param></member><member name="M:Remotion.Data.DomainObjects.DomainImplementation.UnloadService.UnloadData(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.ObjectID,Remotion.Data.DomainObjects.DomainImplementation.UnloadTransactionMode)"><summary>
            Unloads the data held by the given <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> for the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> with the specified 
            <paramref name="objectID" />. The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> reference 
            and <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> instances held by the object are not removed, only the data is. The object can only be unloaded if 
            it is in unchanged state and no relation end-points would remain inconsistent.
            </summary><param name="clientTransaction">The client transaction.</param><param name="objectID">The object ID.</param><param name="transactionMode">The <see cref="T:Remotion.Data.DomainObjects.DomainImplementation.UnloadTransactionMode" /> to use. This can be used to specify whether the unload operation should 
            affect this transaction only or the whole transaction hierarchy, up to the root transaction.</param></member><member name="M:Remotion.Data.DomainObjects.DomainImplementation.UnloadService.TryUnloadData(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.ObjectID,Remotion.Data.DomainObjects.DomainImplementation.UnloadTransactionMode)"><summary>
            Unloads the data held by the given <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> for the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> with the specified
            <paramref name="objectID" />, returning a value indicating whether the unload operation succeeded. The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> reference
            and <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> instances held by the object are not removed, only the data is. The object can only be unloaded if
            it is in unchanged state and no relation end-points would remain inconsistent.
            </summary><param name="clientTransaction">The client transaction.</param><param name="objectID">The object ID.</param><param name="transactionMode">The <see cref="T:Remotion.Data.DomainObjects.DomainImplementation.UnloadTransactionMode" /> to use. This can be used to specify whether the unload operation should
            affect this transaction only or the whole transaction hierarchy, up to the root transaction.</param></member><member name="M:Remotion.Data.DomainObjects.DomainImplementation.UnloadService.UnloadCollectionEndPointAndData(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.RelationEndPointID,Remotion.Data.DomainObjects.DomainImplementation.UnloadTransactionMode)"><summary>
            Unloads the unchanged collection end point indicated by the given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" /> in the specified 
            <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> as well as the data items stored by it. If the end point has not been loaded or has already been unloaded, 
            this method does nothing.
            </summary><param name="clientTransaction">The client transaction to unload the data from.</param><param name="endPointID">The end point ID. In order to retrieve this ID from a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> representing a relation
            end point, specify the <see cref="P:Remotion.Data.DomainObjects.DomainObjectCollection.AssociatedEndPointID" />.</param><param name="transactionMode">The <see cref="T:Remotion.Data.DomainObjects.DomainImplementation.UnloadTransactionMode" /> to use. This can be used to specify whether the unload operation should 
            affect this transaction only or the whole transaction hierarchy, up to the root transaction.</param></member><member name="M:Remotion.Data.DomainObjects.DomainImplementation.UnloadService.TryUnloadCollectionEndPointAndData(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DataManagement.RelationEndPointID,Remotion.Data.DomainObjects.DomainImplementation.UnloadTransactionMode)"><summary>
            Unloads the unchanged collection end point indicated by the given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" /> in the specified
            <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> as well as the data items stored by it, returning a value indicating whether the unload operation succeeded. 
            If the end point has not been loaded or has already been unloaded, this method returns <see langword="true" /> and does nothing.
            </summary><param name="clientTransaction">The client transaction to unload the data from.</param><param name="endPointID">The end point ID. In order to retrieve this ID from a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> representing a relation
            end point, specify the <see cref="P:Remotion.Data.DomainObjects.DomainObjectCollection.AssociatedEndPointID" />.</param><param name="transactionMode">The <see cref="T:Remotion.Data.DomainObjects.DomainImplementation.UnloadTransactionMode" /> to use. This can be used to specify whether the unload operation should
            affect this transaction only or the whole transaction hierarchy, up to the root transaction.</param></member><member name="T:Remotion.Data.DomainObjects.DomainImplementation.UnloadTransactionMode"><summary>
            Defines how an unload operation should treat transactions that are part of a hierarchy.
            </summary></member><member name="F:Remotion.Data.DomainObjects.DomainImplementation.UnloadTransactionMode.ThisTransactionOnly"><summary>
            Affect the given transaction only.
            </summary></member><member name="F:Remotion.Data.DomainObjects.DomainImplementation.UnloadTransactionMode.RecurseToRoot"><summary>
            Affect this transaction and all of its parent transactions, up to the root transaction. This parent transactions are temporarily
            made writeable while the operation is executing. The recursive operation is not atomic; if an error occurs in one of the parent 
            transactions, the effects of the operation in the subtransactions will already have taken place.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.Enlistment.DelegatingEnlistedDomainObjectManager"><summary>
            Implements the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.Enlistment.IEnlistedDomainObjectManager" /> by delegating to a given <see cref="P:Remotion.Data.DomainObjects.Infrastructure.Enlistment.DelegatingEnlistedDomainObjectManager.TargetTransaction" />. Every object registered with
            this manager actually is registered in the <see cref="P:Remotion.Data.DomainObjects.Infrastructure.Enlistment.DelegatingEnlistedDomainObjectManager.TargetTransaction" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.Enlistment.IEnlistedDomainObjectManager"><summary>
            Provides an interface for classes managing the set of <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> references that can be used in a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.Enlistment.IEnlistedDomainObjectManager.GetEnlistedDomainObjects"><summary>
            Gets all domain objects enlisted by this <see cref="T:Remotion.Data.DomainObjects.Infrastructure.Enlistment.IEnlistedDomainObjectManager" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.Enlistment.IEnlistedDomainObjectManager.GetEnlistedDomainObject(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Returns the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> enlisted for the given <paramref name="objectID" /> via <see cref="M:Remotion.Data.DomainObjects.Infrastructure.Enlistment.IEnlistedDomainObjectManager.EnlistDomainObject(Remotion.Data.DomainObjects.DomainObject)" />, or 
            <see langword="null" /> if no such object exists.
            </summary><param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> for which to retrieve a <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.Enlistment.IEnlistedDomainObjectManager.EnlistDomainObject(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Enlists the given domain object in the transaction managed by this <see cref="T:Remotion.Data.DomainObjects.Infrastructure.Enlistment.IEnlistedDomainObjectManager" />.
            </summary><param name="domainObject">The domain object to be enlisted.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.Enlistment.IEnlistedDomainObjectManager.IsEnlisted(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Determines whether the specified <paramref name="domainObject" /> has been enlisted via <see cref="M:Remotion.Data.DomainObjects.Infrastructure.Enlistment.IEnlistedDomainObjectManager.EnlistDomainObject(Remotion.Data.DomainObjects.DomainObject)" />.
            </summary><param name="domainObject">The domain object to be checked.</param></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.Enlistment.IEnlistedDomainObjectManager.EnlistedDomainObjectCount"><summary>
            Gets the number of domain objects enlisted by this <see cref="T:Remotion.Data.DomainObjects.Infrastructure.Enlistment.IEnlistedDomainObjectManager" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.Enlistment.DictionaryBasedEnlistedDomainObjectManager"><summary>
            Manages the enlisted objects via a <see cref="T:System.Collections.Generic.Dictionary`2" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.Interception.IInterceptedDomainObject"><summary>
            Marker interface indicating that a domain object type was generated by <see cref="T:Remotion.Data.DomainObjects.Infrastructure.Interception.TypeGenerator" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.Interception.NonInterceptableTypeException"><summary>
            This exception is thrown when the property interception mechanism cannot be applied to a specific <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> type
            because of problems with that type's declaration.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.Interception.NonInterceptableTypeException.#ctor(System.String,System.Type)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.Interception.NonInterceptableTypeException" /> class.
            </summary><param name="message">The exception message.</param><param name="type">The type that cannot be intercepted.</param></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.Interception.NonInterceptableTypeException.Type"><summary>
            The type that cannot be intercepted.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectIDStringSerialization.GuidObjectIDValueParser"><summary>
            Parses the <see cref="T:System.Guid" /> value of an <see cref="T:Remotion.Data.DomainObjects.ObjectID" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectIDStringSerialization.IObjectIDValueParser"><summary>
            Provides a common interface to parsing values of an <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> from a <see cref="T:System.String" />. This is used by <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectIDStringSerialization.ObjectIDStringSerializer" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectIDStringSerialization.Int32ObjectIDValueParser"><summary>
            Parses the <see cref="T:System.Int32" /> value of an <see cref="T:Remotion.Data.DomainObjects.ObjectID" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectIDStringSerialization.ObjectIDStringSerializer"><summary>
            Provides a mechanism to serialize <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> instances to and from strings.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.ObjectIDStringSerialization.ObjectIDStringSerializer.CheckSerializableStringValue(System.String)"><summary>
            Checks whether the given <paramref name="value" /> can be used as an <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> value if the <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> should
            later be serialized to a <see cref="T:System.String" />.
            </summary><param name="value">The value.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.ObjectIDStringSerialization.ObjectIDStringSerializer.Serialize(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Serializes the specified object ID into a <see cref="T:System.String" /> value that can later be re-parsed via <see cref="M:Remotion.Data.DomainObjects.Infrastructure.ObjectIDStringSerialization.ObjectIDStringSerializer.Parse(System.String)" /> or <see cref="M:Remotion.Data.DomainObjects.Infrastructure.ObjectIDStringSerialization.ObjectIDStringSerializer.TryParse(System.String,Remotion.Data.DomainObjects.ObjectID@)" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.ObjectIDStringSerialization.ObjectIDStringSerializer.Parse(System.String)"><summary>
            Parses the specified object ID string, throwing an <see cref="T:System.FormatException" /> if an error occurs.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.ObjectIDStringSerialization.ObjectIDStringSerializer.TryParse(System.String,Remotion.Data.DomainObjects.ObjectID@)"><summary>
            Parses the specified object ID string, indicating by a boolean return value whether the operation was completed successfully.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectIDStringSerialization.StringObjectIDValueParser"><summary>
            Parses the <see cref="T:System.String" /> value of an <see cref="T:Remotion.Data.DomainObjects.ObjectID" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.BindingClientTransaction.CreateRootTransaction"><summary>
            Do not use this method, use <see>ClientTransaction.CreateRootTransaction</see> instead.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener"><summary>
            Defines an interface for objects listening for events occuring in the scope of a ClientTransaction.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener.NewObjectCreating(Remotion.Data.DomainObjects.ClientTransaction,System.Type,Remotion.Data.DomainObjects.DomainObject)"><summary>
            Indicates a new <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instance is being created. This event is called while the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> base 
            constructor is executing before the subclass constructors have run and before the object has got its <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> or 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />. If this method throws an exception, the object construction will be canceled and no side effects will remain.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener.RelationRead(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.DataManagement.ValueAccess)"><summary>
            Indicates that a scalar-value relation has been read.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> providing the scope to the operation.</param><param name="domainObject">The domain object owning the relation that has been read.</param><param name="relationEndPointDefinition">The relation endpoint definition of the relation that has been read.</param><param name="relatedObject">The related object that is returned to the reader.</param><param name="valueAccess">An indicator whether the current or original values have been read.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener.RelationRead(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.ReadOnlyDomainObjectCollectionAdapter{Remotion.Data.DomainObjects.DomainObject},Remotion.Data.DomainObjects.DataManagement.ValueAccess)"><summary>
            Indicates that a collection-value relation has been read.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> providing the scope to the operation.</param><param name="domainObject">The domain object owning the relation that has been read.</param><param name="relationEndPointDefinition">The relation endpoint definition of the relation that has been read.</param><param name="relatedObjects">
              A read-only wrapper of the related object data that is returned to the reader. Implementors should check the 
              <see cref="P:Remotion.Data.DomainObjects.ReadOnlyDomainObjectCollectionAdapter`1.IsDataAvailable" /> property before accessing the collection data in order to avoid reloading 
              an unloaded collection end-point.
            </param><param name="valueAccess">An indicator whether the current or original values have been read.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener.RelationChanging(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.DomainObject)"><summary>
            Indicates that a relation is about to change. 
            This method might be invoked more than once for a given relation change operation. For example, when a whole related object collection is 
            replaced in one go, the method is invoked once for each old object that is not in the new collection and once for each new object not in the 
            old collection.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> providing the scope to the operation.</param><param name="domainObject">The domain object holding the relation being changed.</param><param name="relationEndPointDefinition">The relation endpoint definition of the relation that changes.</param><param name="oldRelatedObject">The related object that is removed from the relation, or <see langword="null" /> if a new item is added without 
              replacing an old one.</param><param name="newRelatedObject">The related object that is added to the relation, or <see langword="null" /> if an old item is removed without 
              being replaced by a new one.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener.RelationChanged(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition)"><summary>
            Indicates that a relation has been changed. 
            This method might be invoked more than once for a given relation change operation. For example, when a whole related object collection is 
            replaced in one go, the method is invoked once for each old object that is not in the new collection and once for each new object not in the 
            old collection.
            </summary><param name="clientTransaction">The <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> providing the scope to the operation.</param><param name="domainObject">The domain object holding the relation being changed.</param><param name="relationEndPointDefinition">The relation endpoint defintition of the relation that changes.</param></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionReadOnlyException"><summary>
            Thrown when a client transaction's state is tried to be modified and the ClientTransaction's internal state is set to read-only,
            usually because there is an active nested transaction.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionReadOnlyException.#ctor(System.String)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionReadOnlyException" /> class, specifying an exception message.
            </summary><param name="message">The exception message.</param></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper" /> provides a wrapper for ClientTransactions that implements the <see cref="T:Remotion.Data.ITransaction" /> interface.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.To``1"><summary> Gets the native transaction.</summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.Commit"><summary> Commits the transaction. </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.Rollback"><summary> Rolls the transaction back. </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.CreateChild"><summary> Creates a new child transaction for the current transaction. </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.Release"><summary> Allows the transaction to implement clean up logic. </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.EnterScope"><summary>
            Enters a new scope for the given transaction, making it the active transaction while the scope exists.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.RegisterObjects(System.Collections.IEnumerable)"><summary>Registers the <paramref name="objects" /> with the transaction.</summary><param name="objects">The objects to be registered. Must not be <see langword="null" />.</param></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.CanCreateChild"><summary> 
              Gets a flag that describes whether the transaction supports creating child transactions by invoking
              <see cref="M:Remotion.Data.ITransaction.CreateChild" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.Parent"><summary> Gets the transaction's parent transaction. </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.IsChild"><summary>Gets a flag describing whether the transaction is a child transaction.</summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.HasUncommittedChanges"><summary>Gets a flag describing whether the transaction has been changed since the last commit or rollback.</summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.ClientTransactionWrapper.IsReadOnly"><summary>Gets a flag describing whether the transaction is in a read-only state.</summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.CompoundClientTransactionListener"><summary>
            Implements a collection of <see cref="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener" /> objects.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.CurrentPropertyManager"><summary>
            Manages a stack of property names per thread.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.CurrentPropertyManager.GetAndCheckCurrentPropertyName"><summary>
            Retrieves the current property name and throws an exception if there is no property name on this thread's property name stack.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.CurrentPropertyManager.PreparePropertyAccess(System.String)"><summary>
            Prepares access to the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> of the given name by pushing its name on top of the current thread's stack of property 
            names.
            </summary><param name="propertyName">The name of the property to be accessed.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.CurrentPropertyManager.PropertyAccessFinished"><summary>
            Indicates that access to the property of the given name is finished by removing it from the current thread's stack of property names.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.CurrentPropertyManager.CurrentPropertyName"><summary>
            Returns the property name last put on this thread's stack, or null if the stack is empty.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.DomainObjectCheckUtility"><summary>
            Contains commonly used get and check methods dealing with <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.DomainObjectCheckUtility.EnsureNotInvalid(Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.ClientTransaction)"><summary>
            Checks if an object is invalid in the given <paramref name="clientTransaction" />, and, if yes, throws an <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException" />.
            </summary><param name="domainObject">The domain object to check.</param><param name="clientTransaction">The transaction to check the object against.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.DomainObjectCheckUtility.EnsureNotDeleted(Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.ClientTransaction)"><summary>
            Checks if an object has been deleted in the given <paramref name="clientTransaction" />, and, if yes, throws an 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectDeletedException" />.
            </summary><param name="domainObject">The domain object to check.</param><param name="clientTransaction">The transaction to check the object against.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.DomainObjectCheckUtility.CheckIfRightTransaction(Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.ClientTransaction)"><summary>
            Checks if the given <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> can be used in the given transaction, and, if not, throws a 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.ClientTransactionsDifferException" />. If the method succeeds, <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.IsEnlisted(Remotion.Data.DomainObjects.DomainObject)" /> is guaranteed to be
            <see langword="true" /> for the given <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.
            </summary><param name="domainObject">The domain object to check.</param><param name="clientTransaction">The transaction to check the object against.</param></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.DomainObjectMixinCodeGenerationBridge"><summary>
            Forms a bridge between domain objects and mixins by supporting generation and deserialization of mixed domain objects.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.DomainObjectStateCache"><summary>
            Implements <see cref="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener" /> in order to cache the values of <see cref="P:Remotion.Data.DomainObjects.DomainObject.State" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.DomainObjectStateCache.GetState(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.StateType" /> value for the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> with the given <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> from the cache; recalculating 
            it if the cache does not have an up-to-date <see cref="T:Remotion.Data.DomainObjects.StateType" /> value.
            </summary><param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> whose state to get.</param></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.DomainObjectTransactionContext"><summary>
            Provides the default implementation of the <see cref="T:Remotion.Data.DomainObjects.IDomainObjectTransactionContext" /> interface.
            Represents the context of a <see cref="P:Remotion.Data.DomainObjects.Infrastructure.DomainObjectTransactionContext.DomainObject" /> that is associated with a specific <see cref="P:Remotion.Data.DomainObjects.Infrastructure.DomainObjectTransactionContext.ClientTransaction" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.DomainObjectTransactionContextIndexer"><summary>
            Provides an indexing property to access a <see cref="T:Remotion.Data.DomainObjects.DomainObject" />'s transaction-dependent context for a specific <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.ExtensionClientTransactionListener"><summary>
            A <see cref="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener" /> implementation that notifies <see cref="T:Remotion.Data.DomainObjects.IClientTransactionExtension">IClientTransactionExtensions</see>
            about transaction events.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionComponentFactory"><summary>
            Defines an interface for factories building <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> instances.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListenerFactory"><summary>
            Defines an interface for creating <see cref="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener" /> objects.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.IDomainObjectCreator"><summary>
            Provides a common interface for classes creating new instances of <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> types.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.IDomainObjectCreator.CreateObjectReference(Remotion.Data.DomainObjects.ObjectID,Remotion.Data.DomainObjects.ClientTransaction)"><summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instance and initializes it with the given <paramref name="objectID" /> and 
            <paramref name="clientTransaction" />. The object is enlisted with the transaction, but no <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> is created for it.
            The instance is created without a constructor being called.
            </summary><param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> to assign to the object.</param><param name="clientTransaction">The transaction to create the object reference with. The reference is automatically enlisted in the given
            transaction. If the transaction is a binding transaction, the reference is automatically bound to it.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.IDomainObjectCreator.GetConstructorLookupInfo(System.Type)"><summary>
            Gets a <see cref="T:Remotion.Reflection.ConstructorLookupInfo" /> that can be used to construct a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> of the given 
            <paramref name="domainObjectType" />.
            </summary><param name="domainObjectType">Type of the domain object.</param></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.InitializedEventDomainObjectTransactionContextDecorator"><summary>
            Provides an implementation of the <see cref="T:Remotion.Data.DomainObjects.IDomainObjectTransactionContext" /> interface that is returned while the 
            <see cref="M:Remotion.Data.DomainObjects.DomainObject.OnReferenceInitializing" /> is run. It does not allow access to properties and methods that read or modify
            the state of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> in the associated <see cref="P:Remotion.Data.DomainObjects.Infrastructure.InitializedEventDomainObjectTransactionContextDecorator.ClientTransaction" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectCreator"><summary>
            Creates new domain object instances via the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory"><summary>
            Provides functionality for creating instances of DomainObjects which intercept property calls.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory.#ctor"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory" /> class.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory.#ctor(System.String)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory" /> class.
            </summary><param name="assemblyDirectory">The directory to save the generated assemblies to. This directory is only used when
            <see cref="M:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory.SaveGeneratedAssemblies" /> is used.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory.SaveGeneratedAssemblies"><summary>
            Saves the assemblies generated by the factory and returns the paths of the saved manifest modules.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory.GetConcreteDomainObjectType(System.Type)"><summary>
            Gets a domain object type assignable to the given base type which intercepts property calls.
            </summary><param name="baseType">The base domain object type whose properties should be intercepted.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory.GetConcreteDomainObjectType(Remotion.Data.DomainObjects.Mapping.ClassDefinition,System.Type)"><summary>
            Gets a domain object type assignable to the given base type which intercepts property calls.
            </summary><param name="baseTypeClassDefinition">The base domain object type whose properties should be intercepted.</param><param name="concreteBaseType">The base domain object type whose properties should be intercepted.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory.WasCreatedByFactory(System.Type)"><summary>
            Checkes whether a given domain object type was created by this factory implementation (but not necessarily the same factory instance).
            </summary><param name="type">The type to be checked.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory.PrepareUnconstructedInstance(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Prepares an instance which has not been created via an ordinary constructor callfor use.
            </summary><param name="instance">The instance to be prepared</param></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.InterceptedDomainObjectTypeFactory.Scope"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.Interception.ModuleManager" /> scope used by this factory.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.IObjectLoader"><summary>
            Provides a common interface for classes allowing to load a set of <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> objects into a <see cref="P:Remotion.Data.DomainObjects.Infrastructure.IObjectLoader.ClientTransaction" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.IPersistenceStrategy"><summary>
            Provides a common interface for classes that can load <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> instances from a data source and persist them.
            TODO 2246: Very similar to PersistenceManager.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.IPersistenceStrategy.CreateNewObjectID(Remotion.Data.DomainObjects.Mapping.ClassDefinition)"><summary>
            Creates a new <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> for the given class definition. The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> must be created in a such a way that it can 
            later be used to identify objects when persisting or loading <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> instances.
            </summary><param name="classDefinition">The class definition to create a new <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> for.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.IPersistenceStrategy.LoadDataContainer(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Loads a data container from the underlying data source.
            </summary><param name="id">The id of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> to load.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.IPersistenceStrategy.LoadDataContainers(System.Collections.Generic.ICollection{Remotion.Data.DomainObjects.ObjectID},System.Boolean)"><summary>
            Loads a number of data containers from the underlying data source.
            </summary><param name="objectIDs">The ids of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> objects to load.</param><param name="throwOnNotFound">If <see langword="true" />, this method should throw a <see cref="T:Remotion.Data.DomainObjects.Persistence.BulkLoadException" /> if a data container 
            cannot be found for an <see cref="T:Remotion.Data.DomainObjects.ObjectID" />. If <see langword="false" />, the method should proceed as if the invalid ID hadn't been given.
            </param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.IPersistenceStrategy.LoadRelatedDataContainer(Remotion.Data.DomainObjects.DataManagement.DataContainer,Remotion.Data.DomainObjects.DataManagement.RelationEndPointID)"><summary>
            Loads the related <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> for a given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" />.
            </summary><param name="originatingDataContainer">
              A <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> representing the object whose related object's <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> should be loaded.
            </param><param name="relationEndPointID">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" /> of the end point that should be evaluated.
              <paramref name="relationEndPointID" /> must refer to an <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectEndPoint" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.IPersistenceStrategy.LoadRelatedDataContainers(Remotion.Data.DomainObjects.DataManagement.RelationEndPointID)"><summary>
            Loads all related <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />s of a given <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" />.
            </summary><param name="relationEndPointID">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID" /> of the end point that should be evaluated.
            <paramref name="relationEndPointID" /> must refer to a <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPoint" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.IPersistenceStrategy.LoadDataContainersForQuery(Remotion.Data.DomainObjects.Queries.IQuery)"><summary>
            Executes the given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> and returns its results as an array of <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> instances.
            </summary><param name="query">The <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> to be executed.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.IPersistenceStrategy.LoadScalarForQuery(Remotion.Data.DomainObjects.Queries.IQuery)"><summary>
            Executes the given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> and returns its result as a scalar value.
            </summary><param name="query">The query to be executed.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.IPersistenceStrategy.PersistData(System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.DataManagement.DataContainer},System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.DataManagement.RelationEndPoint})"><summary>
            Persists the changed data stored by the given <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> instances.
            </summary><param name="dataContainers">The data containers whose data should be persisted.</param><param name="endPoints">The end points whose data should be persisted.</param></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.IPersistenceStrategy.ParentTransaction"><summary>
            Gets the parent transaction, or <see langword="null" /> if this <see cref="T:Remotion.Data.DomainObjects.Infrastructure.IPersistenceStrategy" /> does not define a parent-child
            relationship with another <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.LoggingClientTransactionListener"><summary>
            A listener implementation logging all transaction events.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.NullClientTransactionListener"><summary>
            <see cref="T:Remotion.INullObject" /> implementation of <see cref="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.ObjectLoader"><summary>
            Implements the mechanisms for loading a set of <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> objects into a <see cref="P:Remotion.Data.DomainObjects.Infrastructure.ObjectLoader.ClientTransaction" />.
            This class should only be used by <see cref="P:Remotion.Data.DomainObjects.Infrastructure.ObjectLoader.ClientTransaction" /> and its subclasses.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor"><summary>
            Provides an encapsulation of a <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.DomainObject">DomainObject's</see> property for simple access as well as static methods
            supporting working with properties.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.#ctor(Remotion.Data.DomainObjects.DomainObject,Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData,Remotion.Data.DomainObjects.ClientTransaction)"><summary>
            Initializes the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor" /> object.
            </summary><param name="domainObject">The domain object whose property is to be encapsulated.</param><param name="propertyData">a <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData" /> object describing the property to be accessed.</param><param name="clientTransaction">The transaction to be used for accessing the property.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.GetValue``1"><summary>
            Gets the property's value.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.GetValueWithoutTypeCheck"><summary>
            Gets the property's value without performing a type check.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.GetRelatedObjectID"><summary>
            Gets the ID of the related object for related object properties.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.GetOriginalValue``1"><summary>
            Gets the property's value from that moment when the property's domain object was enlisted in the current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.GetOriginalValueWithoutTypeCheck"><summary>
            Gets the property's original value without performing a type check.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.GetOriginalRelatedObjectID"><summary>
            Gets the original ID of the related object for related object properties.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.SetValue``1(``0)"><summary>
            Sets the property's value.
            </summary><param name="value">The value to be set. For simple value properties,
            this is the value to be set. For related objects, this is the related object. For related object collections,
            this is an <see cref="T:Remotion.Data.DomainObjects.ObjectList`1" />, where "T" is the related objects' type.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.SetValueWithoutTypeCheck(System.Object)"><summary>
            Sets the property's value without performing an exact type check on the given value. The value must still be asssignable to
            <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.PropertyType" />, though.
            </summary><param name="value">The value to be set. For simple value properties,
            this is the value to be set. For related objects, this is the related object. For related object collections,
            this is an <see cref="T:Remotion.Data.DomainObjects.ObjectList`1" />, where "T" is the related objects' type.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.ToString"><summary>
            Returns the full property name of the property represented by this <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.DomainObject"><summary>
            Gets the domain object of this property.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.PropertyData"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData" /> object describing the property to be accessed.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.ClientTransaction"><summary>
            Gets the client transaction used to access this property.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.HasChanged"><summary>
            Indicates whether the property's value has been changed in its current transaction.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.HasBeenTouched"><summary>
            Indicates whether  the property's value (for simple and related object properties) or one of its elements (for related object collection
            properties) has been assigned since instantiation, loading, commit or rollback, regardless of whether the current value differs from the
            original value.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor.IsNull"><summary>
            Gets a value indicating whether the property's value is <see langword="null" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.GetPropertyKind(Remotion.Data.DomainObjects.Mapping.ClassDefinition,System.String)"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyKind" /> for a given property identifier and class definition.
            </summary><param name="classDefinition">The <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition" /> object describing the property's declaring class.</param><param name="propertyIdentifier">The property identifier.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.GetPropertyType(Remotion.Data.DomainObjects.Mapping.ClassDefinition,System.String)"><summary>
            Returns the value type of the given property.
            </summary><param name="classDefinition">The <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition" /> object describing the property's declaring class.</param><param name="propertyIdentifier">The property identifier.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.GetPropertyDefinitionObjects(Remotion.Data.DomainObjects.Mapping.ClassDefinition,System.String)"><summary>
            Returns mapping objects for the given property.
            </summary><param name="classDefinition">The <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition" /> object describing the property's declaring class.</param><param name="propertyIdentifier">The property identifier.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.Equals(System.Object)"><summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData" /> by comparing
            <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.PropertyIdentifier" /> and <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.ClassDefinition" />.
            </summary><param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData" />.</param></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.ClassDefinition"><summary>
            The definition object for the property's declaring class.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.Kind"><summary>
            Indicates which kind of property is encapsulated by this structure.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.PropertyIdentifier"><summary>
            The identifier for the property encapsulated by this structure.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.PropertyType"><summary>
            The property value type. For simple value properties, this is the simple property type. For related objects, this
            is the related object's type. For related object collections, this is <see cref="T:Remotion.Data.DomainObjects.ObjectList`1" />, where "T" is the
            related objects' type.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.PropertyDefinition"><summary>
            The encapsulated object's property definition object (can be <see langword="null" />).
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData.RelationEndPointDefinition"><summary>
            The encapsulated object's relation end point definition object (can be <see langword="null" />).
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer"><summary>
            Provides an indexer to access a specific property of a domain object. Instances of this value type are returned by
            <see cref="P:Remotion.Data.DomainObjects.DomainObject.Properties" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.#ctor(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Initializes a new <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer" /> instance. This is usually not called from the outside; instead, <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer" />
            instances are returned by <see cref="P:Remotion.Data.DomainObjects.DomainObject.Properties" />.
            </summary><param name="domainObject">The domain object whose properties should be accessed with this <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer" />.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.GetPropertyCount"><summary>
            Gets the number of properties defined by the domain object. This corresponds to the number of <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessor" /> objects
            indexable by this structure and enumerated by <see cref="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.AsEnumerable" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.AsEnumerable"><summary>
            Returns an implementation of <see cref="T:System.Collections.Generic.IEnumerable`1" /> that enumerates over all the properties indexed by this <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer" />
            in the <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.DomainObject" />'s <see cref="P:Remotion.Data.DomainObjects.DomainObject.DefaultTransactionContext" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.AsEnumerable(Remotion.Data.DomainObjects.ClientTransaction)"><summary>
            Returns an implementation of <see cref="T:System.Collections.Generic.IEnumerable`1" /> that enumerates over all the properties indexed by this <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer" />
            in the given <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary><param name="transaction">The transaction to be used to enumerate the properties.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Contains(System.String)"><summary>
            Determines whether the domain object contains a property with the specified identifier.
            </summary><param name="propertyIdentifier">The long property identifier to check for.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Contains(System.Type,System.String)"><summary>
            Determines whether the domain object contains a property with the specified short name and declaring type.
            </summary><param name="domainObjectType">The type declaring the property with the given <paramref name="shortPropertyName" />.</param><param name="shortPropertyName">The short property name to check for.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Find(System.Type,System.String)"><summary>
            Finds a property with the specified short name, starting its search at a given declaring type upwards the inheritance hierarchy.
            </summary><param name="typeToStartSearch">The type to start searching from.</param><param name="shortPropertyName">The short name of the property to find.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Find``1(``0,System.String)"><summary>
            Finds a property with the specified short name, starting its search at the type of the given <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.DomainObject" /> argument.
            </summary><param name="thisDomainObject">The domain object parameter used for inference of type <typeparamref name="TDomainObject" />.</param><param name="shortPropertyName">The short name of the property to find.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Find(System.String)"><summary>
            Finds a property with the specified short name, starting its search at the type of the <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.DomainObject" /> whose properties
            are represented by this indexer.
            </summary><param name="shortPropertyName">The short name of the property to find.</param></member><member name="M:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.GetAllRelatedObjects"><summary>
            Gets all related objects of the associated <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.DomainObject" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.DomainObject"><summary>
            Gets the <see cref="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.DomainObject" /> associated with this <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Item(System.String)"><summary>
            Selects the property of the domain object with the given name.
            </summary><param name="propertyName">The name of the property to be accessed.</param></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Item(System.Type,System.String)"><summary>
            Selects the property of the domain object with the given short name and declaring type.
            </summary><param name="shortPropertyName">The short name of the property to be accessed.</param><param name="domainObjectType">The type declaring the property.</param></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Item(System.String,Remotion.Data.DomainObjects.ClientTransaction)"><summary>
            Selects the property of the domain object with the given name.
            </summary><param name="propertyName">The name of the property to be accessed.</param><param name="transaction">The transaction to use for accessing the property.</param></member><member name="P:Remotion.Data.DomainObjects.Infrastructure.PropertyIndexer.Item(System.Type,System.String,Remotion.Data.DomainObjects.ClientTransaction)"><summary>
            Selects the property of the domain object with the given short name and declaring type.
            </summary><param name="shortPropertyName">The short name of the property to be accessed.</param><param name="domainObjectType">The type declaring the property.</param><param name="transaction">The transaction to use for accessing the property.</param></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.PropertyKind"><summary>
            Indicates the kind of a <see cref="T:Remotion.Data.DomainObjects.DomainObject">DomainObject's</see> property.
            </summary></member><member name="F:Remotion.Data.DomainObjects.Infrastructure.PropertyKind.PropertyValue"><summary>
            The property is a simple value.
            </summary></member><member name="F:Remotion.Data.DomainObjects.Infrastructure.PropertyKind.RelatedObject"><summary>
            The property is a single related domain object.
            </summary></member><member name="F:Remotion.Data.DomainObjects.Infrastructure.PropertyKind.RelatedObjectCollection"><summary>
            The property is a collection of related domain objects.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.ReadOnlyClientTransactionListener"><summary>
            An implementation of <see cref="T:Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener" /> which throws an exception if the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> is about
            to be modified while in a read-only state.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.RootClientTransactionComponentFactory"><summary>
            Creates all parts necessary to construct a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> with root-transaction semantics.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.RootCollectionEndPointChangeDetectionStrategy"><summary>
            Implements <see cref="T:Remotion.Data.DomainObjects.DataManagement.ICollectionEndPointChangeDetectionStrategy" /> for root transactions. In root transactions, a collection end point
            is regarded to have changed when either the opposite collection reference has changed or the set of items has changed. The order of the items
            is ignored.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.ICollectionEndPointChangeDetectionStrategy"><summary>
            Provides an interface for classes determining whether a collection end point has changed. This is used by 
            <see cref="P:Remotion.Data.DomainObjects.DataManagement.CollectionEndPoint.HasChanged" />,
            and its concrete implementation is installed by <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.RootPersistenceStrategy"><summary>
            Represents a top-level <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />, which does not have a parent transaction.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.SubClientTransactionComponentFactory"><summary>
            Creates all parts necessary to construct a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> with sub-transaction semantics.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.SubClientTransactionListener"><summary>
            Implements events that need to be specially handled in the context of sub-transactions.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.SubCollectionEndPointChangeDetectionStrategy"><summary>
            Implements <see cref="T:Remotion.Data.DomainObjects.DataManagement.ICollectionEndPointChangeDetectionStrategy" /> for sub-transactions. In sub-transactions, a collection end point
            is regarded to have changed when either the opposite collection reference has changed or the sequence of items has changed. The order of the 
            items is significant.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.SubPersistenceStrategy"><summary>
            Represents a transaction that is part of a bigger parent transaction. Any changes made within this subtransaction are not visible in
            the parent transaction until the subtransaction is committed, and a commit operation will only commit the changes to the parent transaction, 
            not to any storage providers.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Infrastructure.TransactionUnlocker"><summary>
            Temporarily makes a read-only transaction writeable.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1.#ctor(Remotion.Data.Linq.SqlBackend.SqlPreparation.ISqlPreparationStage,Remotion.Data.Linq.SqlBackend.MappingResolution.IMappingResolutionStage,Remotion.Data.Linq.SqlBackend.SqlGeneration.ISqlGenerationStage,Remotion.Data.Linq.Parsing.Structure.MethodCallExpressionNodeTypeRegistry)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1" /> class.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1.#ctor(Remotion.Data.Linq.QueryProviderBase,System.Linq.Expressions.Expression)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1" /> class.
            </summary><param name="provider">The provider to be used for querying.</param><param name="expression">The expression encapsulated by this <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1" /> instance.</param></member><member name="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor"><summary>
            Provides an implementation of <see cref="T:Remotion.Data.Linq.IQueryExecutor" /> for <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> queries.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor.#ctor(Remotion.Data.DomainObjects.Mapping.ClassDefinition,Remotion.Data.Linq.SqlBackend.SqlPreparation.ISqlPreparationStage,Remotion.Data.Linq.SqlBackend.MappingResolution.IMappingResolutionStage,Remotion.Data.Linq.SqlBackend.SqlGeneration.ISqlGenerationStage)"><summary>
            Initializes a new instance of this <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor" /> class.
            </summary><param name="startingClassDefinition">The <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> type the query is started 
              with. This determines the <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider" /> used for the query.</param><param name="preparationStage">The <see cref="T:Remotion.Data.Linq.SqlBackend.SqlPreparation.ISqlPreparationStage" /> provides methods to prepare the <see cref="T:Remotion.Data.Linq.SqlBackend.SqlStatementModel.SqlStatement" /> based on a <see cref="T:Remotion.Data.Linq.QueryModel" />.</param><param name="resolutionStage">The <see cref="T:Remotion.Data.Linq.SqlBackend.MappingResolution.IMappingResolutionStage" /> provides methods to resolve the expressions in the <see cref="T:Remotion.Data.Linq.SqlBackend.SqlStatementModel.SqlStatement" />.</param><param name="generationStage">The <see cref="T:Remotion.Data.Linq.SqlBackend.SqlGeneration.ISqlGenerationStage" /> provides methods to generate sql text for the given <see cref="T:Remotion.Data.Linq.SqlBackend.SqlStatementModel.SqlStatement" />.</param></member><member name="M:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor.ExecuteScalar``1(Remotion.Data.Linq.QueryModel)"><summary>
            Creates and executes a given <see cref="T:Remotion.Data.Linq.QueryModel" /> as an <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> using the current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />'s
            <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.QueryManager" />. The query is executed as a scalar query.
            </summary><param name="queryModel">The generated <see cref="T:Remotion.Data.Linq.QueryModel" /> of the LINQ query.</param></member><member name="M:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor.ExecuteSingle``1(Remotion.Data.Linq.QueryModel,System.Boolean)"><summary>
            Creates and executes a given <see cref="T:Remotion.Data.Linq.QueryModel" /> as an <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> using the current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />'s
            <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.QueryManager" />. The query is executed as a collection query, and its result set is expected in its result set.
            </summary><param name="queryModel">The generated <see cref="T:Remotion.Data.Linq.QueryModel" /> of the LINQ query.</param><param name="returnDefaultWhenEmpty">If <see langword="true" />, the executor returns a default value when the result set is empty; 
            if <see langword="false" />, it throws an <see cref="T:System.InvalidOperationException" /> when its result set is empty.</param></member><member name="M:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor.ExecuteCollection``1(Remotion.Data.Linq.QueryModel)"><summary>
            Creates and executes a given <see cref="T:Remotion.Data.Linq.QueryModel" /> as an <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> using the current <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />'s
            <see cref="P:Remotion.Data.DomainObjects.ClientTransaction.QueryManager" />. The query is executed as a collection query.
            </summary><param name="queryModel">The generated <see cref="T:Remotion.Data.Linq.QueryModel" /> of the LINQ query.</param></member><member name="M:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor.CreateQuery(System.String,Remotion.Data.Linq.QueryModel,System.Collections.Generic.IEnumerable{Remotion.Data.Linq.EagerFetching.FetchQueryModelBuilder},Remotion.Data.DomainObjects.Queries.Configuration.QueryType)"><summary>
            Creates an <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> object based on the given <see cref="T:Remotion.Data.Linq.QueryModel" />.
            </summary><param name="id">The identifier for the linq query.</param><param name="queryModel">The <see cref="T:Remotion.Data.Linq.QueryModel" /> for the given query.</param><param name="fetchQueryModelBuilders">The <see cref="T:Remotion.Data.Linq.EagerFetching.FetchQueryModelBuilder" /> instances for the fetch requests to be executed together with 
            the query.</param><param name="queryType">The type of query to create.</param></member><member name="M:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor.CreateQuery(System.String,Remotion.Data.Linq.QueryModel,System.Collections.Generic.IEnumerable{Remotion.Data.Linq.EagerFetching.FetchQueryModelBuilder},Remotion.Data.DomainObjects.Queries.Configuration.QueryType,Remotion.Data.DomainObjects.Mapping.ClassDefinition,System.String)"><summary>
            Creates an <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> object based on the given <see cref="T:Remotion.Data.Linq.QueryModel" />.
            </summary><param name="id">The identifier for the linq query.</param><param name="queryModel">The <see cref="T:Remotion.Data.Linq.QueryModel" /> for the given query.</param><param name="fetchQueryModelBuilders">The <see cref="T:Remotion.Data.Linq.EagerFetching.FetchQueryModelBuilder" /> instances for the fetch requests to be executed together with 
            the query.</param><param name="queryType">The type of query to create.</param><param name="classDefinitionOfResult">The class definition of the result objects to be returned by the query. This is used to obtain the
            storage provider to execute the query and to resolve the relation properties of the fetch requests.</param><param name="sortExpression">A SQL expression that is used in an ORDER BY clause to sort the query results.</param></member><member name="M:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor.CreateSqlCommand(Remotion.Data.Linq.QueryModel,System.Boolean)"><summary>
            Creates a SQL query from a given <see cref="T:Remotion.Data.Linq.QueryModel" />.
            </summary><param name="queryModel">
            The <see cref="T:Remotion.Data.Linq.QueryModel" /> a sql query is generated for. The query must not contain any eager fetch result operators.
            </param><param name="checkResultIsDomainObject">If <see langword="true" />, the method will check whether the query returns <see cref="T:Remotion.Data.DomainObjects.DomainObject" />
            instances and throw an exception if yes. If <see langword="false" />, no such check will be made.</param></member><member name="M:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor.CreateQuery(System.String,System.String,System.String,Remotion.Data.Linq.SqlBackend.SqlGeneration.CommandParameter[],Remotion.Data.DomainObjects.Queries.Configuration.QueryType)"><summary>
            Creates a <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> object.
            </summary><param name="id">The identifier for the linq query.</param><param name="storageProviderID">The ID of the <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider" /> to be used for the query.</param><param name="statement">The sql statement of the query.</param><param name="commandParameters">The parameters of the sql statement.</param><param name="queryType">The type of query to create.</param></member><member name="M:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor.TransformAndResolveQueryModel(Remotion.Data.Linq.QueryModel)"><summary>
            Transforms and resolves <see cref="T:Remotion.Data.Linq.QueryModel" /> to build a <see cref="T:Remotion.Data.Linq.SqlBackend.SqlStatementModel.SqlStatement" /> which represents an AST to generate query text.
            </summary><param name="queryModel">The <see cref="T:Remotion.Data.Linq.QueryModel" /> which should be transformed.</param></member><member name="M:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor.CreateSqlCommand(Remotion.Data.Linq.SqlBackend.SqlStatementModel.SqlStatement)"><summary>
            Creates a SQL command based on a given <see cref="T:Remotion.Data.Linq.SqlBackend.SqlStatementModel.SqlStatement" />.
            </summary><param name="sqlStatement">The <see cref="T:Remotion.Data.Linq.SqlBackend.SqlStatementModel.SqlStatement" /> a SQL query has to be generated for.</param></member><member name="P:Remotion.Data.DomainObjects.Linq.DomainObjectQueryExecutor.StartingClassDefinition"><summary>
            Gets the starting class definition, i.e., the <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> type the query is started with.
            This determines the <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider" /> used for the query.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Linq.EagerFetchingExtensionMethods.FetchMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})"><summary>
            Specifies that, when the <paramref name="query" /> is executed, the relation indicated by <paramref name="relatedObjectSelector" /> should be eagerly
            fetched if supported by the query provider implementation. The relation must be a collection property.
            </summary><param name="query">The query for which the fetch request should be made.</param><param name="relatedObjectSelector">A lambda expression selecting the related objects to be eager-fetched.</param></member><member name="M:Remotion.Data.DomainObjects.Linq.EagerFetchingExtensionMethods.FetchOne``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})"><summary>
            Specifies that, when the <paramref name="query" /> is executed, the relation indicated by <paramref name="relatedObjectSelector" /> should be eagerly
            fetched if supported by the query provider implementation. The relation must be of cardinality one.
            </summary><param name="query">The query for which the fetch request should be made.</param><param name="relatedObjectSelector">A lambda expression selecting the related object to be eager-fetched.</param></member><member name="M:Remotion.Data.DomainObjects.Linq.EagerFetchingExtensionMethods.ThenFetchMany``3(Remotion.Data.Linq.EagerFetching.FluentFetchRequest{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2}}})"><summary>
            Specifies that, when the previous fetch request is executed, the relation indicated by <paramref name="relatedObjectSelector" /> should be 
            eagerly fetched, too, if supported by the query provider implementation. The relation must be a collection property.
            </summary><param name="query">The query for which the fetch request should be made.</param><param name="relatedObjectSelector">A lambda expression selecting the next related objects to be eager-fetched.</param></member><member name="M:Remotion.Data.DomainObjects.Linq.EagerFetchingExtensionMethods.ThenFetchOne``3(Remotion.Data.Linq.EagerFetching.FluentFetchRequest{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}})"><summary>
            Specifies that, when the previous fetch request is executed, the relation indicated by <paramref name="relatedObjectSelector" /> should be 
            eagerly fetched, too, if supported by the query provider implementation. The relation must be a collection property.
            </summary><param name="query">The query for which the fetch request should be made.</param><param name="relatedObjectSelector">A lambda expression selecting the next related objects to be eager-fetched.</param></member><member name="T:Remotion.Data.DomainObjects.Linq.FetchResultOperatorHandler"><summary>
            Implements <see cref="T:Remotion.Data.Linq.SqlBackend.SqlPreparation.IResultOperatorHandler" /> for classes derived from <see cref="T:Remotion.Data.Linq.EagerFetching.FetchRequestBase" />. Since those result operators cannot
            be translated to SQL, but must be removed by the LINQ provider _before_ the query is translated to SQL, the <see cref="T:Remotion.Data.DomainObjects.Linq.FetchResultOperatorHandler" />
            always throws a <see cref="T:System.NotSupportedException" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Linq.IStorageSpecificExpressionResolver"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Linq.IStorageSpecificExpressionResolver" /> defines the API for classes that evaluate the re-store persistence model when resolving
            re-linq expressions.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Linq.MappingResolver"><summary>
            Implements <see cref="T:Remotion.Data.Linq.SqlBackend.MappingResolution.IMappingResolver" /> to supply information from re-store to the re-linq SQL backend.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Linq.StorageSpecificExpressionResolver"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.Linq.StorageSpecificExpressionResolver" /> is responsible to resolve expressions for a specific storage system.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.SortExpressions.SortedPropertySpecification"><summary>
            Defines how a property is to be sorted.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.SortExpressions.SortExpressionDefinition"><summary>
            Defines how to sort a number of items in a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.SortExpressions.SortExpressionParser"><summary>
            Parses a <see cref="P:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.BidirectionalRelationAttribute.SortExpression" /> into a <see cref="T:Remotion.Data.DomainObjects.Mapping.SortExpressions.SortExpressionDefinition" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.SortExpressions.SortOrder"><summary>
            Defines how a property is to be sorted as part of a <see cref="T:Remotion.Data.DomainObjects.Mapping.SortExpressions.SortExpressionDefinition" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Logical.CheckForPropertyNotFoundRelationEndPointsValidationRule"><summary>
            Validates that the given <see cref="T:Remotion.Data.DomainObjects.Mapping.RelationDefinition" /> has no a <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyNotFoundRelationEndPointDefinition" />
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.IRelationDefinitionValidatorRule"><summary>
            Defines the API for the relation definition mapping validator rules.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Logical.CheckForTypeNotFoundClassDefinitionValidationRule"><summary>
            Validates that the given<see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition" /> is no <see cref="T:Remotion.Data.DomainObjects.Mapping.TypeNotFoundClassDefinition" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Logical.PropertyTypeIsSupportedValidationRule"><summary>
            Validates that a property type is supported.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.IPropertyDefinitionValidationRule"><summary>
            Defines the API for the property definition mapping validation rules.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Logical.RelationEndPointCombinationIsSupportedValidationRule"><summary>
            Validates that a relation has valid relation endpoint combinations.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Logical.SortExpressionIsSupportedForCardianlityOfRelationPropertyValidationRule"><summary>
            Validates that a relation end point defintion with cardinality one must not specify a sort expression.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Logical.SortExpressionIsValidValidationRule"><summary>
            Validates that specified sort expression for a relation is valid. 
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Logical.StorageClassIsSupportedValidationRule"><summary>
            Validates that the given storage class is supported.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Logical.StorageGroupTypesAreSameWithinInheritanceTreeRule"><summary>
            Validates that the class has the same storage group type as its base class.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.IClassDefinitionValidationRule"><summary>
            Defines the API for the class definition mapping validation rules.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Logical.VirtualRelationEndPointCardinalityMatchesPropertyTypeValidationRule"><summary>
            Validates that the virtual relation end point cardinality matches the property type.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Logical.VirtualRelationEndPointPropertyTypeIsSupportedValidationRule"><summary>
            Validates that the virtual property definition is derived from DomainObject, DomainObjectValidation or DomainObjectCollection.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Reflection.ClassDefinitionTypeIsSubclassOfDomainObjectValidationRule"><summary>
            Validates that a class definition type is a sub-class of domain object. 
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Reflection.DomainObjectTypeDoesNotHaveLegacyInfrastructureConstructorValidationRule"><summary>
            Validates that the domain object does not have a legacy infrastructure constructor taking a single data container argument.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Reflection.DomainObjectTypeIsNotGenericValidationRule"><summary>
            Validates that a class definition type is not generic.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Reflection.ForeignKeyIsSupportedForCardinalityOfRelationPropertyValidationRule"><summary>
            Validates that a foreign key is not defined for a virtual relation end point.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Reflection.InheritanceHierarchyFollowsClassHierarchyValidationRule"><summary>
            Validates that the type of a class defintion is derived from base type.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Reflection.MappingAttributesAreOnlyAppliedOnOriginalPropertyDeclarationsValidationRule"><summary>
            Validates that the property mapping attributes are applied at the original property declaration.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Reflection.MappingAttributesAreSupportedForPropertyTypeValidationRule"><summary>
            Validates that all applied attribute types of a property are supported.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Reflection.RelationEndPointNamesAreConsistentValidationRule"><summary>
            Validates that a matching <see cref="T:Remotion.Data.DomainObjects.ConfigurationLoader.ReflectionBasedConfigurationLoader.BidirectionalRelationAttribute" /> is defined on both end points and that the corresponding defined opposite
            property names do match.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Reflection.RelationEndPointTypesAreConsistentValidationRule"><summary>
            Validates that the relation end point property types are consistent.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.Reflection.StorageGroupAttributeIsOnlyDefinedOncePerInheritanceHierarchyValidationRule"><summary>
            Validates that the StorageGroupAttribute is not defined twice in the class hierarchy.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.ClassDefinitionValidator"><summary>
            Holds a read-only collection of class definition validation rules and exposes a Validate-method, which gets a list of 
            class definitions to validate. Each validation rule is applied to each class definition and for every rule which is invalid a 
            mapping validation result with the respective error message is returned.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.IClassDefinitionValidator"><summary>
            Defines the API for the class definition mapping validator.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.IPersistenceMappingValidationRule"><summary>
            Defines the API for the persistence mapping validation rules.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.IPersistenceMappingValidator"><summary>
            Defines the API for the persistence mapping validator.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.IPropertyDefinitionValidator"><summary>
            Defines the API for the property definition mapping validator.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.IRelationDefinitionValidator"><summary>
            Defines the API for the class definition mapping validator.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.ISortExpressionValidator"><summary>
            Defines the API for the sort expression mapping validator.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.MappingValidationResult"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Mapping.Validation.MappingValidationResult" /> is returned by the validate-methods of the mapping configuration validators and contains the information,
            if the rule is valid. If not, it also returns an error message.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.PersistenceMappingValidator"><summary>
            Holds a read-only collection of class definition validation rules and exposes a Validate-method, which gets a list of 
            class definitions to validate. Each validation rule is applied to each class definition and for every rule which is invalid a 
            mapping validation result with the respective error message is returned.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.PropertyDefinitionValidator"><summary>
            Holds a read-only collection of class definition validation rules and exposes a Validate-method, which gets a list of 
            class definitions to validate. Each validation rule is applied to all property definition for each class definition and for every rule which 
            is invalid a mapping validation result with the respective error message is returned.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.RelationDefinitionValidator"><summary>
            Holds a read-only collection of relation definition validation rules and exposes a Validate-method, which gets a list of 
            relation definitions to validate. Each validation rule is applied to each relation definition and for every rule which is invalid a 
            mapping validation result with the respective error message is returned.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.Validation.SortExpressionValidator"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.Mapping.Validation.SortExpressionValidator" /> validates the sort expression text of the <see cref="T:Remotion.Data.DomainObjects.DBBidirectionalRelationAttribute" /> 
            on the <see cref="T:System.Reflection.PropertyInfo" /> of the <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition" />s.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.AnonymousRelationEndPointDefinition"><summary>
            Represents the non-existing side of a unidirectional relationship.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.ClassDefinitionCollectionFactory"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinitionCollectionFactory" /> is used to get a <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinitionCollection" /> for a set of types. It automatically
            sets base classes and derived classes correctly.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Mapping.IMappingNameResolver.GetPropertyName(Remotion.Reflection.IPropertyInformation)"><summary>
            Returns the mapping name for the given <paramref name="propertyInformation" />.
            </summary><param name="propertyInformation">The property whose mapping name should be retrieved.</param></member><member name="T:Remotion.Data.DomainObjects.Mapping.IMappingObjectFactory"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Mapping.IMappingObjectFactory" /> defines the API for creating maping objects.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Mapping.MappingConfiguration.ResolveTypes"><summary>
            Gets a flag whether type names in the configuration file should be resolved to their corresponding .NET <see cref="T:System.Type" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.PersistenceModelLoader"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.Mapping.PersistenceModelLoader" /> applied the persistence model to a class hierarchy.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Model.IPersistenceModelLoader"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Model.IPersistenceModelLoader" /> defines the API for all persistence model loader implementations.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.PropertyAccessorDataCache"><summary>
            Holds all <see cref="T:Remotion.Data.DomainObjects.Infrastructure.PropertyAccessorData" /> object for a <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition" />, providing fast access via full property name or
            declaring type and short (.NET) property name.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.PropertyNotFoundRelationEndPointDefinition"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyNotFoundRelationEndPointDefinition" /> represents an invalid relation endpoint where the property could not be found.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.ReflectionBasedClassDefinition"><summary><see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition" /> used when loading the mapping from the reflection meta data.</summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.ReflectionBasedMappingObjectFactory"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.Mapping.ReflectionBasedMappingObjectFactory" /> is used to create new mapping objects.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.ReflectionBasedNameResolver"><summary>
            Resolves <see cref="T:System.Reflection.PropertyInfo" /> objects into property names and the other way around.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Mapping.ReflectionBasedNameResolver.GetPropertyName(Remotion.Reflection.IPropertyInformation)"><summary>
            Returns the mapping name for the given <paramref name="propertyInformation" />.
            </summary><param name="propertyInformation">The property whose mapping name should be retrieved.</param></member><member name="T:Remotion.Data.DomainObjects.Mapping.ReflectionBasedPropertyResolver"><summary>
            Provides functionality to resolve <see cref="T:System.Reflection.PropertyInfo" /> objects into child objects of <see cref="T:Remotion.Data.DomainObjects.Mapping.ReflectionBasedClassDefinition" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.VirtualRelationEndPointDefinition"><summary>
            Represents the non-foreign-key side of a unidirectional relationship.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.RelationEndPointDefinition"><summary>
            Represents the non-anonymous, foreign-key side of a bidirectional or unidirectional relationship.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.RelationEndPointDefinitionExtensions"><summary>
            Provides extension methods for <see cref="T:Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.RelationKindType"><summary>
            Defines the kind of a given <see cref="T:Remotion.Data.DomainObjects.Mapping.RelationDefinition" />.
            </summary></member><member name="F:Remotion.Data.DomainObjects.Mapping.RelationKindType.OneToOne"><summary>
            There is a one-to-one relationship between referenced objects.
            </summary></member><member name="F:Remotion.Data.DomainObjects.Mapping.RelationKindType.OneToMany"><summary>
            There is a one-to-many (or many-to-one) relationship between referenced objects.
            </summary></member><member name="F:Remotion.Data.DomainObjects.Mapping.RelationKindType.Unidirectional"><summary>
            There is a one-to-many relationship between referenced objects, but only the "many" side has a reference to its one related object; there
            is no back-reference to the many objects from the "one" side.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Mapping.StorageClass"><summary>The storage class options available in the persistence framework.</summary></member><member name="F:Remotion.Data.DomainObjects.Mapping.StorageClass.Persistent"><summary>The property is persistet into the data store.</summary></member><member name="F:Remotion.Data.DomainObjects.Mapping.StorageClass.Transaction"><summary>The property is managed by the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />, but not persistet.</summary></member><member name="F:Remotion.Data.DomainObjects.Mapping.StorageClass.None"><summary>The property is ignored by the persistence framework.</summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.CopyOnWriteDomainObjectCollectionData"><summary>
            Represents a copy of another collection. The data is only copied if either this or the other collection changes.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.ObservableCollectionDataDecoratorBase"><summary>
            Implements <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" /> as an abstract class by delegating to another instance of 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" />, calling the abstract <see cref="M:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.ObservableCollectionDataDecoratorBase.OnDataChanging(Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.ObservableCollectionDataDecoratorBase.OperationKind,Remotion.Data.DomainObjects.DomainObject,System.Int32)" /> and <see cref="M:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.ObservableCollectionDataDecoratorBase.OnDataChanged(Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.ObservableCollectionDataDecoratorBase.OperationKind,Remotion.Data.DomainObjects.DomainObject,System.Int32)" />
            methods each for each change to the collection.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.DomainObjectCollectionDataDecoratorBase"><summary>
            Provides a common base class for classes decorating a <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" /> instance. If not overridden, all
            the methods directly delegate to an inner <see cref="P:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.DomainObjectCollectionDataDecoratorBase.WrappedData" /> object.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData"><summary>
            Provides an interface for an encapsulation of the data stored inside a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />. A number of decorators
            implements this interface in order to wrap the data store with additional functionality.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.DomainObjectCollectionData"><summary>
            Provides an an encapsulation of the data stored inside a <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />, implementing the 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" /> interface. The data is stored by means of two collections, an ordered <see cref="T:System.Collections.Generic.List`1" /> of 
            <see cref="T:Remotion.Data.DomainObjects.ObjectID" />s and a <see cref="T:System.Collections.Generic.Dictionary`2" /> mapping the IDs to <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances.
            This class does not perform any fancy argument checking, use <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.ModificationCheckingCollectionDataDecorator" /> for that. It does, however,
            ensure that no inconsistent state can be created, even when calling its members with invalid arguments.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.DomainObjectCollectionDataExtensions"><summary>
            Provides extension methods for working with <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" /> instances.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.EventRaisingCollectionDataDecorator"><summary>
            Decorates <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" /> by raising events whenever the inner collection is modified. The events are raised via
            an <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionEventRaiser" /> instance before and after the modification.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.ICollectionDataStateUpdateListener"><summary>
            Used by <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPointDataManagement.ChangeCachingCollectionDataDecorator" /> to signal when the cached state value is updated.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IndirectDomainObjectCollectionEventRaiser"><summary>
            Implements the <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionEventRaiser" /> interface by delegating to another implementation of 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionEventRaiser" />. This is useful when the event raiser needs to be changed after e.g. the 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.EventRaisingCollectionDataDecorator" /> has been created.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.ModificationCheckingCollectionDataDecorator"><summary>
            Implements a decorator for <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" /> that performs semantic checks on the arguments passed to 
            <see cref="M:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.ModificationCheckingCollectionDataDecorator.Insert(System.Int32,Remotion.Data.DomainObjects.DomainObject)" />, <see cref="M:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.ModificationCheckingCollectionDataDecorator.Replace(System.Int32,Remotion.Data.DomainObjects.DomainObject)" />, and <see cref="M:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.ModificationCheckingCollectionDataDecorator.Remove(Remotion.Data.DomainObjects.DomainObject)" />. Those checks are
            performed in a decorator so that they lead to exceptions before any events are raised by <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.EventRaisingCollectionDataDecorator" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.ObservableCollectionDataDecorator"><summary>
            Decorates <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" /> by raising events whenever the inner collection is modified.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.ReadOnlyCollectionDataDecorator"><summary>
            This class acts as a read-only decorator for another <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" /> object. Every modifying method 
            of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" /> interface will throw an <see cref="T:System.InvalidOperationException" /> when invoked on this class.
            Modifications are still possible via <see cref="M:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData.GetDataStore" /> unless the <see cref="P:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.ReadOnlyCollectionDataDecorator.IsGetDataStoreAllowed" />
            flag is <see langword="false" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPointDataManagement.ChangeCachingCollectionDataDecorator"><summary>
            Decorates another <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" /> object and provides an <see cref="M:Remotion.Data.DomainObjects.DataManagement.CollectionEndPointDataManagement.ChangeCachingCollectionDataDecorator.HasChanged(Remotion.Data.DomainObjects.DataManagement.ICollectionEndPointChangeDetectionStrategy)" /> method that determines
            whether the contents of that <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" /> object has changed when compared to an original 
            <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> instance. The result of the comparison is cached until the <see cref="M:Remotion.Data.DomainObjects.DataManagement.CollectionEndPointDataManagement.ChangeCachingCollectionDataDecorator.OnDataChanged(Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.ObservableCollectionDataDecoratorBase.OperationKind,Remotion.Data.DomainObjects.DomainObject,System.Int32)" /> method is
            called or a modifying method is called on <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPointDataManagement.ChangeCachingCollectionDataDecorator" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.CollectionEndPointDataManagement.ChangeCachingCollectionDataDecorator.RegisterOriginalItem(Remotion.Data.DomainObjects.DomainObject)"><summary>
            Registers the given <paramref name="domainObject" /> as an original item of this collection. This means the item is added to the 
            <see cref="P:Remotion.Data.DomainObjects.DataManagement.CollectionEndPointDataManagement.ChangeCachingCollectionDataDecorator.OriginalData" /> collection, and it is also added to this <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPointDataManagement.ChangeCachingCollectionDataDecorator" /> collection. If the 
            <see cref="P:Remotion.Data.DomainObjects.DataManagement.CollectionEndPointDataManagement.ChangeCachingCollectionDataDecorator.OriginalData" /> collection already contains the item, an exception is thrown. If this collection already contains the item, it is
            only added to the <see cref="P:Remotion.Data.DomainObjects.DataManagement.CollectionEndPointDataManagement.ChangeCachingCollectionDataDecorator.OriginalData" />. This operation may invalidate the state cache.
            </summary><param name="domainObject">The <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to be registered.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.CollectionEndPointDataManagement.ChangeCachingCollectionDataDecorator.UnregisterOriginalItem(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Unregisters the item with the given <paramref name="objectID" /> as an original item of this collection. This means the item is removed from 
            the <see cref="P:Remotion.Data.DomainObjects.DataManagement.CollectionEndPointDataManagement.ChangeCachingCollectionDataDecorator.OriginalData" /> collection, and it is also removed from this <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPointDataManagement.ChangeCachingCollectionDataDecorator" /> collection. If 
            the <see cref="P:Remotion.Data.DomainObjects.DataManagement.CollectionEndPointDataManagement.ChangeCachingCollectionDataDecorator.OriginalData" /> collection does not contain the item, an exception is thrown. If this collection does not contain the item, it 
            is only removed from the <see cref="P:Remotion.Data.DomainObjects.DataManagement.CollectionEndPointDataManagement.ChangeCachingCollectionDataDecorator.OriginalData" />. This operation may invalidate the state cache.
            </summary><param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> to be unregistered.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.CollectionEndPointDataManagement.ChangeCachingCollectionDataDecorator.SortOriginalAndCurrent(System.Collections.Generic.IComparer{Remotion.Data.DomainObjects.DomainObject})"><summary>
            Sorts the data in this <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPointDataManagement.ChangeCachingCollectionDataDecorator" /> and the data in the <see cref="P:Remotion.Data.DomainObjects.DataManagement.CollectionEndPointDataManagement.ChangeCachingCollectionDataDecorator.OriginalData" /> collection
            using the given <paramref name="comparer" />. This operation causes the change state to be invalidated if the original data is not the same
            as the current data.
            </summary><param name="comparer">The comparer to use for sorting the data.</param></member><member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPointDataManagement.EndPointDelegatingCollectionData"><summary>
            Implements the <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" /> by forwarding all requests to an implementation of 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.ICollectionEndPoint" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPointDataManagement.ICollectionEndPointDataKeeper"><summary>
            Defines an interface for classes storing the data for a <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPoint" />. Used by <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPoint" /> as
            its data store and by <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPointDataManagement.EndPointDelegatingCollectionData" /> in order to delegate to the end-point's data store.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPointDataManagement.LazyLoadingCollectionEndPointDataKeeper"><summary>
            Implements lazy-loading support for the <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPoint" /> class by wrapping the data kept by a <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPoint" /> 
            and allowing that data to be unloaded. When the <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPointDataManagement.LazyLoadingCollectionEndPointDataKeeper" /> is accessed and its data is empty, 
            it loads the data from a <see cref="P:Remotion.Data.DomainObjects.DataManagement.CollectionEndPointDataManagement.LazyLoadingCollectionEndPointDataKeeper.ClientTransaction" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPointDataManagement.SortedPropertyComparer"><summary>
            Compares two <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances based on a <see cref="P:Remotion.Data.DomainObjects.DataManagement.CollectionEndPointDataManagement.SortedPropertyComparer.SortedPropertySpecification" />. The property values are retrieved
            without raising any events. If the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances are not loaded, their data is lazily loaded.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.CollectionEndPointInsertCommand"><summary>
            Represents the insertion of an element into a <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPoint" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.RelationEndPointModificationCommand"><summary>
            Represents a modification performed on a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoint" />. Provides default behavior for triggering the required
            events and notifying the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> about the modification. The actual modification has to be specified by subclasses
            by implementing <see cref="M:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.RelationEndPointModificationCommand.Perform" />. In addition, <see cref="M:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.RelationEndPointModificationCommand.ExpandToAllRelatedObjects" /> has to be overridden to return a 
            composite object containing all commands needed to be performed when this modification starts a bidirectional relation change.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand"><summary>
            Provides a common interface for classes performing actions on the re-store data structures on the data management level.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.NotifyClientTransactionOfBegin"><summary>
            Notifies the client transaction that the operation is about to begin. The operation can be canceled at this point of time if an event 
            handler throws an exception.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.Begin"><summary>
            Raises all begin event notifications on the objects involved in the operation. The operation can be canceled at this point of time if an event 
            handler throws an exception.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.Perform"><summary>
            Actually performs the operation without raising any events.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.End"><summary>
            Raises all end event notifications on the objects involved in the operation. Event handlers should not throw any exceptions at this point of 
            time, the operation has already been performed.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.NotifyClientTransactionOfEnd"><summary>
            Raises all end event notifications on the associated <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />. Event handlers should not throw any exceptions at this 
            point of time, the operation has already been performed.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.ExpandToAllRelatedObjects"><summary>
            Returns an <see cref="T:Remotion.Data.DomainObjects.DataManagement.Commands.ExpandedCommand" /> that involves changes to all objects affected by this 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand" />. If no other objects are involved by the change, that <see cref="T:Remotion.Data.DomainObjects.DataManagement.Commands.ExpandedCommand" /> method contains just 
            this <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.RelationEndPointModificationCommand.Perform"><summary>
            Performs this command without raising any events and without performing any bidirectional modifications.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.RelationEndPointModificationCommand.ExpandToAllRelatedObjects"><summary>
            Returns a new <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand" /> instance that involves changes to all objects affected by this
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.RelationEndPointModificationCommand" />. If no other objects are involved by the change, this method returns just this
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.CollectionEndPointInsertCommand.ExpandToAllRelatedObjects"><summary>
            Creates all commands needed to perform a bidirectional insert operation into this collection end point.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.CollectionEndPointRemoveCommand"><summary>
            Represents the removal of an element from a <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPoint" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.CollectionEndPointRemoveCommand.ExpandToAllRelatedObjects"><summary>
            Creates all commands needed to perform a bidirectional remove operation from this collection end point.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.CollectionEndPointReplaceCommand"><summary>
            Represents the replacement of an element in a <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPoint" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.CollectionEndPointReplaceCommand.ExpandToAllRelatedObjects"><summary>
            Creates all commands needed to perform a bidirectional replace operation within this collection end point.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.CollectionEndPointReplaceSameCommand"><summary>
            Represents the replacement of an element in a <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPoint" /> with itself. Calling <see cref="M:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.CollectionEndPointReplaceSameCommand.ExpandToAllRelatedObjects" />
            results in an <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand" /> that does not raise any events.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.CollectionEndPointReplaceSameCommand.ExpandToAllRelatedObjects"><summary>
            Creates all commands needed to perform a self-replace operation within this collection end point.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.CollectionEndPointReplaceWholeCollectionCommand"><summary>
            Represents the replacement of the whole <see cref="P:Remotion.Data.DomainObjects.DataManagement.CollectionEndPoint.OppositeDomainObjects" /> collection, including the transformation
            of the involved <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> instances into stand-alone resp. associated collections.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.CollectionEndPointReplaceWholeCollectionCommand.ExpandToAllRelatedObjects"><summary>
            Creates all commands needed to perform a bidirectional collection replace operation within this collection end point.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.ObjectEndPointSetCommand"><summary>
            Implementations of this class represents the operation of setting the object stored by an <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectEndPoint" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.ObjectEndPointSetOneManyCommand"><summary>
            Represents the operation of setting the object stored by an <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectEndPoint" /> that is part of a one-to-many relation.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.ObjectEndPointSetOneManyCommand.ExpandToAllRelatedObjects"><summary>
            Creates all commands needed to perform a bidirectional 1:n set operation on this <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectEndPoint" />. One of the steps is 
            this command, the other steps are the opposite commands on the new/old related objects.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.ObjectEndPointSetOneOneCommand"><summary>
            Represents the operation of setting the object stored by an <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectEndPoint" /> that is part of a one-to-one relation.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.ObjectEndPointSetOneOneCommand.ExpandToAllRelatedObjects"><summary>
            Creates all commands needed to perform a bidirectional 1:1 set operation on this <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectEndPoint" />. One of the steps is 
            this command, the other steps are the opposite commands on the new/old related objects.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.ObjectEndPointSetSameCommand"><summary>
            Represents the operation of setting the object stored by an <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectEndPoint" /> to the same value as before. Calling 
            <see cref="M:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.ObjectEndPointSetSameCommand.ExpandToAllRelatedObjects" /> results in a <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand" /> that does not raise any events.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.ObjectEndPointSetSameCommand.ExpandToAllRelatedObjects"><summary>
            Creates all commands needed to perform a bidirectional set-same operation on this <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectEndPoint" />. One of the steps is 
            this command, the other steps are the opposite commands on the new/old related objects.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.ObjectEndPointSetUnidirectionalCommand"><summary>
            Represents the operation of setting the object stored by an <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectEndPoint" /> that is part of a unidirectional relation.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.RelationEndPointTouchCommand"><summary>
            Represents a command that touches, but does not change the modified end point.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.AdHocCommand"><summary>
            Provides the possibility to implement <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand" /> ad-hoc using delegates and lambdas, without having to create a 
            new class.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.CompositeCommand"><summary>
            Composes several <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand" /> instances into a single command.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.DeleteCommand"><summary>
            Encapsulates all logic that is required to delete a <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.ExpandedCommand"><summary>
            Represents the result of an <see cref="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.ExpandToAllRelatedObjects" /> operation. Similar to a 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.Commands.CompositeCommand" />, but calling  <see cref="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.ExpandToAllRelatedObjects" /> again on this object will
            result in the same <see cref="T:Remotion.Data.DomainObjects.DataManagement.Commands.ExpandedCommand" /> as before.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.NopCommand"><summary>
            Implements a command that performs no operation.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.Commands.UnloadCommand"><summary>
            Encapsulates all logic that is required to unload a <see cref="T:Remotion.Data.DomainObjects.DomainObject" />'s data from a <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataManager" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoint"><summary>
            Provides an abstract base implementation of non-transient relation end points that can be stored in the <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointMap" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.IEndPoint"><summary>
            Provides a common interface for objects representing one side of a relation between <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.ICollectionEndPoint"><summary>
            Represents an <see cref="T:Remotion.Data.DomainObjects.DataManagement.IEndPoint" /> holding a collection of <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances, i.e. the "many" side of a relation.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.DataContainer"><summary>
            Represents a container for the persisted properties of a DomainObject.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.CreateNew(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Creates an empty <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> for a new <see cref="T:Remotion.Data.DomainObjects.DomainObject" />. The <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />
            contains a new <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> object for every <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition" /> in the respective <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.ClassDefinition" />.
            The <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> has be to <see cref="M:Remotion.Data.DomainObjects.DataManagement.DataManager.RegisterDataContainer(Remotion.Data.DomainObjects.DataManagement.DataContainer)">registered</see> with a 
            <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.ClientTransaction" /> and its <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject" /> must <see cref="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.SetDomainObject(Remotion.Data.DomainObjects.DomainObject)">be set</see> before it can be used.
            </summary><param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the new <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> to create. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.CreateForExisting(Remotion.Data.DomainObjects.ObjectID,System.Object,System.Func{Remotion.Data.DomainObjects.Mapping.PropertyDefinition,System.Object})"><summary>
            Creates an empty <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> for an existing <see cref="T:Remotion.Data.DomainObjects.DomainObject" />. The <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />
            contain all <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> objects, just as if it had been created with <see cref="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.CreateNew(Remotion.Data.DomainObjects.ObjectID)" />, but the values for persistent 
            properties are set as returned by a lookup method.
            The <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> has be to <see cref="M:Remotion.Data.DomainObjects.DataManagement.DataManager.RegisterDataContainer(Remotion.Data.DomainObjects.DataManagement.DataContainer)">registered</see> with a 
            <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.ClientTransaction" /> and its <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject" /> must <see cref="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.SetDomainObject(Remotion.Data.DomainObjects.DomainObject)">be set</see> before it can be used.
            </summary><param name="id">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the new <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> to create. Must not be <see langword="null" />.</param><param name="timestamp">The timestamp value of the existing object in the data source.</param><param name="persistentValueLookup">A function object returning the value of a given persistent property for the existing object.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.GetValue(System.String)"><summary>
            Gets the value of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> specified by <paramref name="propertyName" />.
            </summary><param name="propertyName">The name of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.SetValue(System.String,System.Object)"><summary>
            Sets the value of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> specified by <paramref name="propertyName" />.
            </summary><param name="propertyName">The name of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" />. Must not be <see langword="null" />.</param><param name="value">The value the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> is set to.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.MarkAsChanged"><summary>
            Marks an existing <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> as changed. <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.State" /> will return <see cref="F:Remotion.Data.DomainObjects.StateType.Changed" /> after this method
            has been called.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.DataContainer.Clone(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Creates a copy of this data container and its state.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.Item(System.String)"><summary>
            Gets the value of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> specified by <paramref name="propertyName" />.
            </summary><param name="propertyName">The name of the property. Must not be <see langword="null" />.</param></member><member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.ClientTransaction"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> which the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> is part of.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.IsRegistered"><summary>
            Gets a value indicating whether this instance has been registered with a <see cref="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.ClientTransaction" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObject"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> associated with the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.HasDomainObject"><summary>
            Gets a value indicating whether this instance has been associated with a <see cref="T:Remotion.Data.DomainObjects.DomainObject" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.ID"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.ClassDefinition"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition" /> of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.DomainObjectType"><summary>
            Gets the <see cref="T:System.Type" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.PropertyValues"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" /> of all <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" />s that are part of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.State"><summary>
            Gets the state of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.Timestamp"><summary>
            Gets the timestamp of the last committed change of the data in the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.DataContainer.IsDiscarded"><summary>
            Gets a value indicating the discarded status of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.IDataContainerMapReadOnlyView"><summary>
            Provides a read-only API to access the <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> instances loaded into a <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainerMap" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.DataManagementCommandExtensions"><summary>
            Provides extension methods for <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.DataManagementCommandExtensions.NotifyAndPerform(Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand)"><summary>
            Raises all events and performs the action of the given <see cref="T:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand" />.
            The order of events is as follows: <see cref="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.NotifyClientTransactionOfBegin" />,
            <see cref="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.Begin" />, <see cref="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.Perform" />, 
            <see cref="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.NotifyClientTransactionOfEnd" />, <see cref="M:Remotion.Data.DomainObjects.DataManagement.IDataManagementCommand.End" />.
            </summary><param name="command">The command to be executed.</param></member><member name="T:Remotion.Data.DomainObjects.DataManagement.IDataManager"><summary>
            Provides an interface for classes managing the data inside a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.DomainObjectCollectionFactory"><summary>
            Creates <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> instances via reflection for use with the data management classes (mostly 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionEndPoint" />).
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.DomainObjectCollectionFactory.CreateCollection(System.Type,Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData)"><summary>
            Creates a collection of the given <paramref name="collectionType" /> via reflection, passing in the given 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" /> object as the data storage strategy.
            The collection must provide a constructor that takes a single parameter of type <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" />.
            </summary><param name="collectionType">The type of the collection to create.</param><param name="dataStrategy">The data strategy to use for the new collection.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.DomainObjectCollectionFactory.CreateCollection(System.Type,System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.DomainObject},System.Type)"><summary>
            Creates a stand-alone collection of the given <paramref name="collectionType" /> via reflection. The collection is initialized to have
            the given <paramref name="requiredItemType" /> and initial <paramref name="content" />.
            The collection must provide a constructor that takes a single parameter of type <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" />.
            </summary><param name="collectionType">The type of the collection to create.</param><param name="content">The initial content of the collection. This must match <paramref name="requiredItemType" /> and it cannot contain
            duplicates or <see langword="null" /> values.</param><param name="requiredItemType">The required item type of the collection.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.DomainObjectCollectionFactory.CreateCollection(System.Type,System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.DomainObject})"><summary>
            Creates a stand-alone collection of the given <paramref name="collectionType" /> via reflection, inferring the collection's required item
            type from the <paramref name="collectionType" />. The collection is initialized to have the given initial <paramref name="content" />.
            The collection must provide a constructor that takes a single parameter of type <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" />.
            </summary><param name="collectionType">The type of the collection to create.</param><param name="content">The initial content of the collection. This must not contain duplicates or <see langword="null" /> values.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.DomainObjectCollectionFactory.CreateReadOnlyCollection(System.Type,System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.DomainObject})"><summary>
            Creates a stand-alone read-only collection of the given <paramref name="collectionType" /> via reflection. Read-onlyness is enforced by a
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.ReadOnlyCollectionDataDecorator" />. The collection is initialized to have the given initial <paramref name="content" />.
            The collection must provide a constructor that takes a single parameter of type <see cref="T:Remotion.Data.DomainObjects.DataManagement.CollectionDataManagement.IDomainObjectCollectionData" />.
            </summary><param name="collectionType">The type of the collection to create.</param><param name="content">The initial content of the collection. This must not contain duplicates or <see langword="null" /> values.</param></member><member name="T:Remotion.Data.DomainObjects.DataManagement.EndPointExtensions"><summary>
            Provides extension methods for <see cref="T:Remotion.Data.DomainObjects.DataManagement.IEndPoint" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.IInvalidDomainObjectManager"><summary>
            Defines an API for classes keeping a collection of <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> references that were marked as invalid in a given 
            <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.InvalidDomainObjectManager"><summary>
            Keeps a collection of <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> references that were marked as invalid in a given <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.IObjectEndPoint"><summary>
            Represents an <see cref="T:Remotion.Data.DomainObjects.DataManagement.IEndPoint" /> holding the <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instance, i.e. the "one" side of a 
            relation.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.IRelationEndPointMapReadOnlyView"><summary>
            Provides a read-only API to access the <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPoint" /> instances loaded into a <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointMap" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.LoadConflictException"><summary>
            Thrown when an object cannot be loaded or a relation cannot be resolved because it would generate an inconsistent state in the 
            <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.NullCollectionEndPoint"><summary>
            Represents an <see cref="T:Remotion.Data.DomainObjects.DataManagement.ICollectionEndPoint" /> (with a specific <see cref="T:Remotion.Data.DomainObjects.Mapping.RelationEndPointDefinition" />) for a <see langword="null" /> object.
            This is used by the different end point modification commands - when a bidirectional relation modification extends to a <see langword="null" /> 
            object, this end point (or <see cref="T:Remotion.Data.DomainObjects.DataManagement.NullObjectEndPoint" />) is used to represent the object's part in the relation, and a 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.NullEndPointModificationCommand" /> is used to represent the modification. The end point is created by 
            <see cref="M:Remotion.Data.DomainObjects.DataManagement.RelationEndPoint.CreateNullRelationEndPoint(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition)" /> (e.g. via 
            <see cref="M:Remotion.Data.DomainObjects.DataManagement.EndPointExtensions.GetEndPointWithOppositeDefinition``1(Remotion.Data.DomainObjects.DataManagement.IEndPoint,Remotion.Data.DomainObjects.DomainObject)" />)
            and is usually discarded after executing the modification.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.NullObjectEndPoint"><summary>
            Represents an <see cref="T:Remotion.Data.DomainObjects.DataManagement.IObjectEndPoint" /> (with a specific <see cref="T:Remotion.Data.DomainObjects.Mapping.RelationEndPointDefinition" />) for a <see langword="null" /> object.
            This is used by the different end point modification commands - when a bidirectional relation modification extends to a <see langword="null" /> 
            object, this end point (or <see cref="T:Remotion.Data.DomainObjects.DataManagement.NullCollectionEndPoint" />) is used to represent the object's part in the relation, and a 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.Commands.EndPointModifications.NullEndPointModificationCommand" /> is used to represent the modification. The end point is created by 
            <see cref="M:Remotion.Data.DomainObjects.DataManagement.RelationEndPoint.CreateNullRelationEndPoint(Remotion.Data.DomainObjects.ClientTransaction,Remotion.Data.DomainObjects.Mapping.IRelationEndPointDefinition)" /> (e.g. via 
            <see cref="M:Remotion.Data.DomainObjects.DataManagement.EndPointExtensions.GetEndPointWithOppositeDefinition``1(Remotion.Data.DomainObjects.DataManagement.IEndPoint,Remotion.Data.DomainObjects.DomainObject)" />)
            and is usually discarded after executing the modification.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.ObjectEndPointExtensions"><summary>
            Provides extension methods for <see cref="T:Remotion.Data.DomainObjects.DataManagement.IObjectEndPoint" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException"><summary>
            The exception that is thrown when properties or methods of an object are accessed in a transaction where that object is invalid.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.ObjectInvalidException.ID"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the object that caused the exception.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue"><summary>
            Represents a property of a domain object that is persisted by the framework.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValue.#ctor(Remotion.Data.DomainObjects.Mapping.PropertyDefinition)"><summary>
            Initializes a new <b>PropertyValue</b> with a given <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition" />.
            </summary><param name="definition">The <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition" /> to use for initializing the <b>PropertyValue</b>. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValue.#ctor(Remotion.Data.DomainObjects.Mapping.PropertyDefinition,System.Object)"><summary>
            Initializes a new <b>PropertyValue</b> with a given <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition" /> and an initial <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Value" />.
            </summary><param name="definition">The <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition" /> to use for initializing the <b>PropertyValue</b>. Must not be <see langword="null" />.</param><param name="value">The initial <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Value" /> for the <b>PropertyValue</b>.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Equals(System.Object)"><summary>
            Determines whether the specified <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> is equal to the current <b>PropertyValue</b>.
            </summary><param name="obj">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> to compare with the current <b>PropertyValue</b>. </param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValue.GetHashCode"><summary>
            Returns the hash code for this instance.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Definition"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition" /> of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Name"><summary>
            Gets the name of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Value"><summary>
            Gets or sets the value of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.OriginalValue"><summary>
            Gets the original <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Value" /> of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> at the point of instantiation, loading, commit or rollback.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.HasChanged"><summary>
            Indicates if the <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Value" /> of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> has changed since instantiation, loading, commit or rollback.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.HasBeenTouched"><summary>
            Indicates if the <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Value" /> of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> has been assigned since instantiation, loading, commit or rollback,
            regardless of whether the current value differs from the <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.OriginalValue" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.IsDiscarded"><summary>
            Gets a value indicating the discarded status of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection"><summary>
            A typed collection for <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> objects.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.#ctor"><summary>
            Initializes a new <b>PropertyValueCollection</b> object.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.#ctor(Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection,System.Boolean)"><summary>
            Initializes a new <b>PropertyValueCollection</b> as a shallow copy of a given <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" />.
            </summary><param name="collection">The <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> to copy. Must not be <see langword="null" />.</param><param name="makeCollectionReadOnly">Indicates whether the new collection should be read-only.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.Contains(Remotion.Data.DomainObjects.DataManagement.PropertyValue)"><summary>
            Determines whether the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" /> contains a specific <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" />.
            </summary><param name="propertyValue">The object to locate in the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.Contains(System.String)"><summary>
            Determines whether the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" /> contains a specific property name.
            </summary><param name="propertyName">The name of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> to locate in the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.Add(Remotion.Data.DomainObjects.DataManagement.PropertyValue)"><summary>
            Adds a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> to the collection.
            </summary><param name="value">The <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> to add. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.CopyTo(System.Array,System.Int32)"><summary>
            Copies the items of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" /> to an array, starting at a particular array index.
            </summary><param name="array">The one-dimensional array that is the destination of the items copied from <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" />. The array must have zero-based indexing. Must not be <see langword="null" />.</param><param name="index">The zero-based index in array at which copying begins.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.GetEnumerator"><summary>
            Returns an enumerator that can iterate through the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.OnPropertyChanging(Remotion.Data.DomainObjects.PropertyChangeEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.PropertyChanging" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.PropertyChangeEventArgs" /> object that contains the event data.</param></member><member name="M:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.OnPropertyChanged(Remotion.Data.DomainObjects.PropertyChangeEventArgs)"><summary>
            Raises the <see cref="E:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.PropertyChanged" /> event.
            </summary><param name="args">A <see cref="T:Remotion.Data.DomainObjects.PropertyChangeEventArgs" /> object that contains the event data.</param></member><member name="E:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.PropertyChanging"><summary>
            Occurs before the <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Value" /> of a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> in the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" /> is changed.
            </summary></member><member name="E:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.PropertyChanged"><summary>
            Occurs after the <see cref="P:Remotion.Data.DomainObjects.DataManagement.PropertyValue.Value" /> of a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> in the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" /> is changed.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> with a given <paramref name="index" /> in the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.Item(System.String)"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> with a given <paramref name="propertyName" /> in the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" />.
            </summary><param name="propertyName">The name of the property. Must not be <see langword="null" />.</param></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.Count"><summary>
            Gets the number of items contained in the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.IsReadOnly"><summary>
            Gets a value indicating whether the <see cref="T:Remotion.Data.DomainObjects.CommonCollection" /> is read-only.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.IsSynchronized"><summary>
            Gets a value indicating whether access to the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" /> is synchronized (thread-safe).
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.SyncRoot"><summary>
            Gets an object that can be used to synchronize access to the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection.IsDiscarded"><summary>
            Gets a value indicating the discarded status of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValueCollection" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.RealObjectEndPoint"><summary>
            Represents an <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectEndPoint" /> that holds the foreign key in a relation. The foreign key is actually held by a 
            <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> object, this end point implementation just delegates to the <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID"><summary>
            Identifies a relation end point on a given object (<see cref="P:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID.ObjectID" />) of a given kind (<see cref="P:Remotion.Data.DomainObjects.DataManagement.RelationEndPointID.Definition" />).
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointValueChecker"><summary>
            Provides common checks needed by relation end points when they are assigned new values.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.StateValueSet"><summary>
            Represents a set of <see cref="T:Remotion.Data.DomainObjects.StateType" /> values, allowing efficient <see cref="T:Remotion.Data.DomainObjects.StateType" /> matching via the <see cref="M:Remotion.Data.DomainObjects.DataManagement.StateValueSet.Matches(Remotion.Data.DomainObjects.StateType)" /> method.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.ValueAccess"><summary>
            An value indicating whether the original or current value of a <see cref="T:Remotion.Data.DomainObjects.DataManagement.PropertyValue" /> is being accessed.
            </summary></member><member name="F:Remotion.Data.DomainObjects.DataManagement.ValueAccess.Original"><summary>
            The original value is being accessed.
            </summary></member><member name="F:Remotion.Data.DomainObjects.DataManagement.ValueAccess.Current"><summary>
            The current value is being accessed.
            </summary></member><member name="T:Remotion.Data.DomainObjects.DataManagement.VirtualObjectEndPoint"><summary>
            Represents an <see cref="T:Remotion.Data.DomainObjects.DataManagement.ObjectEndPoint" /> that does not hold the foreign key in a relation. The <see cref="T:Remotion.Data.DomainObjects.DataManagement.VirtualObjectEndPoint" /> is
            constructed by the <see cref="T:Remotion.Data.DomainObjects.DataManagement.RelationEndPointMap" /> as an in-memory representation of the opposite of the <see cref="T:Remotion.Data.DomainObjects.DataManagement.RealObjectEndPoint" /> 
            holding the foreign key.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectDefaultValueStrategy"><summary>
            Implements <see cref="T:Remotion.ObjectBinding.BindableObject.IDefaultValueStrategy" /> for <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances. A <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> property is defined
            to have its default value set if it is a new object and the property has not been touched yet.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectMetadataFactory"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectMetadataFactory" /> implements the <see cref="T:Remotion.ObjectBinding.BindableObject.IMetadataFactory" /> interface for domain objects.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectPropertyReflector"><summary>
            Use the <see cref="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectPropertyReflector" /> to create <see cref="T:Remotion.ObjectBinding.IBusinessObjectProperty" /> implementations for the 
            bindable domain object extension of the business object interfaces.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectProvider"><summary>
            The implementation of  <see cref="T:Remotion.ObjectBinding.IBusinessObjectProvider" /> to be used with the <see cref="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectMixin" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectProviderAttribute"><summary>
            Apply this attribute to your BindableDomainObject-type to classify the this type as using the DomainObject-specific implementation of object binding.
            </summary></member><member name="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectServiceFactoryMixin"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.ObjectBinding.BindableDomainObjectServiceFactoryMixin" /> is an extension of the <see cref="T:Remotion.ObjectBinding.BindableObject.BindableObjectServiceFactory" /> used by
            the <see cref="T:Remotion.ObjectBinding.BindableObject.BindableObjectProvider" /> and provides default service instances for bindable domain object implementations.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderDefinition"><summary>
            Defines the configuration for a specific <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider" />. Subclasses of <see cref="T:Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderDefinition" /> can be 
            instantiated from a config file entry.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Model.IStorageEntityDefinition"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Model.IStorageEntityDefinition" /> defines the API for a storable entity definition.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Model.IStoragePropertyDefinition"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Model.IStoragePropertyDefinition" /> defines the API for a storable property defintion.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Validation.ClassAboveTableIsAbstractValidationRule"><summary>
            Validates that each non-abstract class in the mapping can resolve it's entity-name.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Validation.ColumnNamesAreUniqueWithinInheritanceTreeValidationRule"><summary>
            Validates that each defined persistent property storage specific name is not already defined in a class in the same inheritance hierarchy.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IColumnDefinitionVisitor"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IColumnDefinitionVisitor" /> defines the API for all column definition visitors.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Validation.OnlyOneTablePerHierarchyValidationRule"><summary>
            Validates that the entity-name of a class is the same as the inherited entity-name.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Validation.PropertyTypeIsSupportedByStorageProviderValidationRule"><summary>
            Validates that a persistent property type is supported by the storage provider.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.Validation.TableNamesAreDistinctWithinConcreteTableInheritanceHierarchyValidationRule"><summary>
            Validates that a specified entity name within concrete table inheritance hierarchy classes in different inheritance brachnes is unique.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ColumnDefinitionFactory"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ColumnDefinitionFactory" /> is responsible to create a <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IColumnDefinition" /> objects for <see cref="T:Remotion.Data.DomainObjects.Mapping.PropertyDefinition" />
            instances.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IColumnDefinitionFactory"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IColumnDefinitionFactory" /> defines the API to create instances of <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IColumnDefinition" />. 
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ColumnDefinitionResolver"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ColumnDefinitionResolver" /> is responsible to get all <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IColumnDefinition" />s for a <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition" />
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IColumnDefinitionResolver"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IColumnDefinitionResolver" /> defines the API for all column definition resolver implementations.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.EntityDefinitionFactory"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.EntityDefinitionFactory" /> provides factory methods to create <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IEntityDefinition" />s.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IEntityDefinitionFactory"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IEntityDefinitionFactory" /> defines the API for all entity definition factory implementations.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.FilterViewDefinition"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.FilterViewDefinition" /> defines a filtered view in a relational database.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IEntityDefinition"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IEntityDefinition" /> defines the API for an entity definition for a relational database.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ForeignKeyConstraintDefinition"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.PrimaryKeyConstraintDefinition" /> represents a foreign key constraint in a relational database management system.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ITableConstraintDefinition"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ITableConstraintDefinition" /> defines the API for all table constraint definition implementations.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ForeignKeyConstraintDefinitionFactory"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ForeignKeyConstraintDefinitionFactory" /> is responsible to create all <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ForeignKeyConstraintDefinition" />s for a 
            <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IForeignKeyConstraintDefinitionFactory"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IForeignKeyConstraintDefinitionFactory" /> defines the API for all foreign key constraint definition factories.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IColumnDefinition"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IColumnDefinition" /> defines the API for all column definitions.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IDColumnDefinition"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IDColumnDefinition" /> represents an <see cref="T:Remotion.Data.DomainObjects.ObjectID" />-column with a class id.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IEntityDefinitionVisitor"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IEntityDefinitionVisitor" /> defines the API for the entity definition visitor implementations.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IStorageNameCalculator"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IStorageNameCalculator" /> defines the API for classes providing names for RDBMS items. There is a default implementation
            called <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageNameCalculator" /> that retrieves the item names via reflection and custom attributes. Storage providers with
            specific naming constraints (eg., length limits, forbidden characters, etc.) can decorate (or reimplement) this interface to fulfill those
            constraints.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ITableConstraintDefinitionVisitor"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ITableConstraintDefinitionVisitor" /> defines the API for all table constraint definition visitor implementations.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.NullColumnDefinition"><summary>
            Represents a non-existing column.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.NullEntityDefinition"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.NullEntityDefinition" /> represents a non-existing entity.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.PrimaryKeyConstraintDefinition"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.PrimaryKeyConstraintDefinition" /> represents a primary key constraint in a relational database management system.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.RdbmsPersistenceModelLoader"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.RdbmsPersistenceModelLoader" /> is responsible to load a persistence model for a relational database.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.SimpleColumnDefinition"><summary>
            Defines a column in a SQL database.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.SqlColumnDefinitionFindingVisitor"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.SqlColumnDefinitionFindingVisitor" /> findes all <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.SimpleColumnDefinition" />s in the specified column list.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageNameCalculator"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageNameCalculator" /> provides methods to obtain names for RDBMS items (tables, columns, ...) using default names for
            system items ("ID", "ClassID", "Timestamp") and custom attributes (<see cref="T:Remotion.Data.DomainObjects.DBTableAttribute" />, <see cref="T:Remotion.Data.DomainObjects.DBColumnAttribute" />) for 
            user-defined names.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageTypeCalculator"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.StorageTypeCalculator" /> is the base class for type-calculator implementations which determine the storage-specific type for a 
            storable column definition.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.TableDefinition"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.TableDefinition" /> defines a table in a relational database.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.UnionViewDefinition"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.UnionViewDefinition" /> defines a union view in a relational database.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.DeclarationListColumnDefinitionVisitor"><summary>
            Visits <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IColumnDefinition" /> objects and generates a list of SQL declarations for the visited columns.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.ForeignKeyDeclarationTableConstraintDefinitionVisitor"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.ForeignKeyDeclarationTableConstraintDefinitionVisitor" /> visits the <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.ForeignKeyConstraintDefinition" />s and generates 
            the  corresponding constraint statement for it.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.NameListColumnDefinitionVisitor"><summary>
            Visits <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.IColumnDefinition" /> objects and generates a list of column names for the visited columns.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.PrimaryKeyDeclarationTableConstraintDefinitionVisitor"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.PrimaryKeyDeclarationTableConstraintDefinitionVisitor" /> visits the <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.Model.PrimaryKeyConstraintDefinition" /> and generates 
            the  corresponding constraint statement for it.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SchemaGeneration.ViewBuilderBase"><summary>
            Contains database-independent code for generating views for the persistence model.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.Model.SqlStorageTypeCalculator"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.Model.SqlStorageTypeCalculator" /> calculates the SQL Server-specific type for a column in a relational database.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SchemaGeneration.ViewBuilder"><summary>
            Generates SQL Server-specific views for the persistence model.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.Sql2005.SqlStorageObjectFactory"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.Sql2005.SqlStorageObjectFactory" /> is responsible to create SQL Server-specific storage provider instances.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.IRdbmsStorageObjectFactory"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.IStorageObjectFactory" /> defines the API for all relational database management system storage object factories.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.IStorageObjectFactory"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.IStorageObjectFactory" /> defines the API for all storage object factories.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SqlServer.SqlDialect"><summary>
            Defines the <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.ISqlDialect" /> for MS SQL Server.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.ISqlDialect"><summary>
            Provides a common interface for classes defining the specifics of a SQL dialect. Used by <see cref="T:Remotion.Data.DomainObjects.Persistence.Rdbms.RdbmsProvider" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Persistence.Rdbms.ISqlDialect.DelimitIdentifier(System.String)"><summary> Surrounds an identifier with delimiters according to the database's syntax. </summary></member><member name="P:Remotion.Data.DomainObjects.Persistence.Rdbms.ISqlDialect.StatementDelimiter"><summary> A delimiter to end a SQL statement if the database requires one, an empty string otherwise. </summary></member><member name="P:Remotion.Data.DomainObjects.Persistence.Rdbms.ISqlDialect.ConstraintDelimiter"><summary> A delimiter to split constraints in a SQL statement if the database requires one, an empty string otherwise. </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.StorageProvider"><summary>
            Provides an abstract base implementation for classes encapsulating persistence-related functionality. Subclasses of <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider" /> 
            are used by <see cref="T:Remotion.Data.DomainObjects.Infrastructure.RootPersistenceStrategy" /> to load and store <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> 
            instances and execute queries.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Persistence.Rdbms.RdbmsProvider.DelimitIdentifier(System.String)"><summary> Surrounds an identifier with delimiters according to the database's syntax. </summary></member><member name="M:Remotion.Data.DomainObjects.Persistence.Rdbms.RdbmsProvider.CreateValueConverter"><summary> Gets a value converter that converts database types to .NET types according to the providers type mapping rules. </summary></member><member name="P:Remotion.Data.DomainObjects.Persistence.Rdbms.RdbmsProvider.StatementDelimiter"><summary> A delimiter to end a SQL statement if the database requires one, an empty string otherwise. </summary></member><member name="M:Remotion.Data.DomainObjects.Persistence.Rdbms.ICommandBuilder.AddCommandParameter(System.Data.IDbCommand,System.String,System.Object)"></member><member name="M:Remotion.Data.DomainObjects.Persistence.Rdbms.CommandBuilder.AddCommandParameter(System.Data.IDbCommand,System.String,System.Object)"></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.MultiIDLookupCommandBuilder"><summary>
            Builds a command that allows retrieving a set of records whose ID column is contained in a range of <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> values.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SingleIDLookupCommandBuilder"><summary>
            Builds a command that allows retrieving a set of records where a certain column matches a given <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> value.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.Rdbms.SortExpressionSqlGenerator"><summary>
            Generates a SQL order by clause for a <see cref="T:Remotion.Data.DomainObjects.Mapping.SortExpressions.SortExpressionDefinition" />. Identifier quotations are
            added via <see cref="M:Remotion.Data.DomainObjects.Persistence.Rdbms.RdbmsProvider.DelimitIdentifier(System.String)" />
            </summary></member><member name="M:Remotion.Data.DomainObjects.Persistence.Rdbms.WhereClauseBuilder.SetInExpression(System.String,System.String,System.Object[])"><summary>
            Defines a SQL IN expression matching the column defined by <paramref name="columnName" /> with the given <paramref name="values" />. The
            values are embedded in an XML <see cref="T:System.Data.IDataParameter" />, so they must be convertable to <see cref="T:System.String" /> values via their
            <see cref="M:System.Object.ToString" /> method.
            </summary><param name="columnName">The name of the column to check.</param><param name="values">The values to match the column against.</param><param name="columnType">The database type of the column to check. The values must be convertable from the textual representation
            embedded in the XML file to this type.</param></member><member name="T:Remotion.Data.DomainObjects.Persistence.BulkLoadException"><summary>
            Thrown when the process of loading multiple objects at the same time fails.
            </summary></member><member name="F:Remotion.Data.DomainObjects.Persistence.BulkLoadException._exceptions"><summary>
            The exceptions that occurred while the objects were loaded.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Persistence.BulkLoadException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Persistence.BulkLoadException" /> class.
            </summary><param name="exceptions">The exceptions thrown while the objects were loaded.</param></member><member name="P:Remotion.Data.DomainObjects.Persistence.BulkLoadException.Exceptions"><summary>
            The exceptions that occurred while the objects were loaded.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.IStorageProviderDefinitionFinder"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Persistence.IStorageProviderDefinitionFinder" /> defines the API for the storage provider definition finder implementations.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Persistence.StorageProviderDefinitionFinder"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProviderDefinitionFinder" /> is responsible for finding the <see cref="T:Remotion.Data.DomainObjects.Persistence.Configuration.StorageProviderDefinition" /> for a 
            <see cref="T:Remotion.Data.DomainObjects.Mapping.ClassDefinition" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryConfiguration"><summary>
            Represents the current query configuration.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryConfigurationException"><summary>
            The exception that is thrown when a problem occurs while constructing a <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryConfiguration" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition"><summary>
            Represents the definition of a query.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.#ctor(System.String,System.String,System.String,Remotion.Data.DomainObjects.Queries.Configuration.QueryType)"><summary>
            Initializes a new instance of the <b>QueryDefinition</b> class.
            </summary><param name="queryID">The <paramref name="queryID" /> to be associated with this <b>QueryDefinition</b>. Must not be <see langword="null" />.</param><param name="storageProviderID">The ID of the <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider" /> responsible for executing instances of this <b>QueryDefinition</b>. Must not be <see langword="null" />.</param><param name="statement">The <paramref name="statement" /> of the <b>QueryDefinition</b>. The <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider" /> specified through <paramref name="storageProviderID" /> must understand the syntax of the <paramref name="statement" />. Must not be <see langword="null" />.</param><param name="queryType">One of the <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.QueryType" /> enumeration constants.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.#ctor(System.String,System.String,System.String,Remotion.Data.DomainObjects.Queries.Configuration.QueryType,System.Type)"><summary>
            Initializes a new instance of the <b>QueryDefinition</b> class.
            </summary><param name="queryID">The <paramref name="queryID" /> to be associated with this <b>QueryDefinition</b>. Must not be <see langword="null" />.</param><param name="storageProviderID">The ID of the <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider" /> responsible for executing instances of this <b>QueryDefinition</b>. Must not be <see langword="null" />.</param><param name="statement">The <paramref name="statement" /> of the <b>QueryDefinition</b>. The <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider" /> specified through <paramref name="storageProviderID" /> must understand the syntax of the <paramref name="statement" />. Must not be <see langword="null" />.</param><param name="queryType">One of the <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.QueryType" /> enumeration constants.</param><param name="collectionType">If <paramref name="queryType" /> specifies a collection to be returned, <paramref name="collectionType" /> specifies the type of the collection. If <paramref name="queryType" /> is <see langword="null" />, <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> is used.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"><summary>
            This constructor is used for deserializing the object and is not intended to be used directly from code.
            </summary><param name="info">The data needed to serialize or deserialize an object. </param><param name="context">The source and destination of a given serialized stream.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"><summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the 
            data needed to serialize the current <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> instance. See remarks 
            on <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> for further details.
            </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param><param name="context">The contextual information about the source or destination of the serialization.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"><summary>
            Populates a specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the 
            data needed to serialize the current <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> instance. See remarks 
            on <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> for further details.
            </summary><param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param><param name="context">The contextual information about the source or destination of the serialization.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.System#Runtime#Serialization#IObjectReference#GetRealObject(System.Runtime.Serialization.StreamingContext)"><summary>
            Returns a reference to the real object that should be deserialized. See remarks 
            on <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> for further details.
            </summary><param name="context">The source and destination of a given serialized stream.</param></member><member name="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.ID"><summary>
            Gets the unique ID for this <b>QueryDefinition</b>.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.StorageProviderID"><summary>
            Gets the ID of the <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider" /> responsible for executing instances of this <b>QueryDefinition</b>.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.Statement"><summary>
            Gets the statement-text of the <b>QueryDefinition</b>. The <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider" /> specified through <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.StorageProviderID" /> must understand the syntax of the <b>Statement</b>.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.QueryType"><summary>
            Gets the <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.QueryType" /> of this <b>QueryDefinition</b>.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.CollectionType"><summary>
            If <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.QueryType" /> specifies a collection to be returned, <b>CollectionType</b> specifies the type of the collection. The default is <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" />. 
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection"><summary>
            Represents a collection of <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" />s.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection.#ctor"><summary>
            Initializes a new instance of the <b>QueryDefinitionCollection</b> class.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection.#ctor(Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection,System.Boolean)"><summary>
            Initializes a new <b>QueryDefinitionCollection</b> as a shallow copy of a given <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection" />.
            </summary><param name="collection">The <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection" /> to copy. Must not be <see langword="null" />.</param><param name="makeCollectionReadOnly">Indicates whether the new collection should be read-only.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection.GetMandatory(System.String)"><summary>
            Returns the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> identified through <paramref name="queryID" />. If no <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> can be found an exception is thrown.
            </summary><param name="queryID">The <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.ID" /> of the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> to be found.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection.Contains(Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition)"><summary>
            Determines whether an item is in the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection" />.
            </summary><param name="queryDefinition">The <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> to locate in the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection.Contains(System.String)"><summary>
            Determines whether an item is in the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection" />.
            </summary><param name="queryID">The <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.ID" /> of the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> to locate in the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection" />. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection.Add(Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition)"><summary>
            Adds a <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> to the collection.
            </summary><param name="queryDefinition">The <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> to add. Must not be <see langword="null" />.</param></member><member name="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection.Item(System.Int32)"><summary>
            Gets or sets the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> with a given <paramref name="index" /> in the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection.Item(System.String)"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> with a given <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.ID" /> from the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinitionCollection" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryType"><summary>
            Indicates the type of a <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" />.
            </summary></member><member name="F:Remotion.Data.DomainObjects.Queries.Configuration.QueryType.Collection"><summary>
            Instances of a <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> return a collection of <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s.
            </summary></member><member name="F:Remotion.Data.DomainObjects.Queries.Configuration.QueryType.Scalar"><summary>
            Instances of a <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> return only a single value.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.EagerFetcher"><summary>
            Used by the <see cref="T:Remotion.Data.DomainObjects.Infrastructure.ObjectLoader" /> in order to perform eager fetching of collection queries.
            See <see cref="P:Remotion.Data.DomainObjects.Queries.IQuery.EagerFetchQueries" /> for more information on eager fetching.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.IEagerFetcher"><summary>
            Provides an interface for classes that can execute, correlate, and register eager fetch queries.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.EagerFetchQueryCollection"><summary>
            Holds the eager fetch queries for a given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> instance. See <see cref="P:Remotion.Data.DomainObjects.Queries.IQuery.EagerFetchQueries" /> for more information about
            eager fetch queries.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.ILinqParserCustomizer"><summary>
            Defines an interface for classes needing to customize the re-store LINQ provider. Instances of types 
            implementing this interface are retrieved from the <see cref="T:Microsoft.Practices.ServiceLocation.ServiceLocator" /> by the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryFactory" /> when the first LINQ query is
            executed. They are then used to customize the LINQ provider for the rest of the application.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.IQuery"><summary>
            Represents an executable query.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.IQuery.ID"><summary>
            Gets a unique identifier for the query.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.IQuery.Statement"><summary>
            Gets the statement of the query.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.IQuery.StorageProviderID"><summary>
            Gets the unique ID of the <see cref="T:Remotion.Data.DomainObjects.Persistence.StorageProvider" /> responsible for executing the query.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.IQuery.CollectionType"><summary>
            Gets the type of the collection if the query returns a collection of <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.IQuery.QueryType"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryType" /> of the query.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.IQuery.Parameters"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" />s that are used to execute the query.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.IQuery.EagerFetchQueries"><summary>
            Gets the eager fetch queries associated with this <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> instance.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.IQueryManager"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Queries.IQueryManager" /> provides an interface for methods to execute queries within a <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.IQueryManager.GetScalar(Remotion.Data.DomainObjects.Queries.IQuery)"><summary>
            Executes a given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> and returns the scalar value.
            </summary><param name="query">The query to execute. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.IQueryManager.GetCollection(Remotion.Data.DomainObjects.Queries.IQuery)"><summary>
            Executes a given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> and returns a collection of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s returned by the query.
            </summary><param name="query">The query to execute. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.IQueryManager.GetCollection``1(Remotion.Data.DomainObjects.Queries.IQuery)"><summary>
            Executes a given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> and returns a collection of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s returned by the query.
            </summary><param name="query">The query to execute. Must not be <see langword="null" />.</param></member><member name="T:Remotion.Data.DomainObjects.Queries.IQueryResult"><summary>
            Represents an untyped result of a collection query.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.IQueryResult.ContainsDuplicates"><summary>
            Determines whether the result set contains duplicates.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.IQueryResult.ContainsNulls"><summary>
            Determines whether result set contains <see langword="null" /> values.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.IQueryResult.AsEnumerable"><summary>
            Returns the query result set as an enumerable object. Might contain duplicates or <see langword="null" /> values.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.IQueryResult.ToArray"><summary>
            Returns the query result set as an array. Might contain duplicates or <see langword="null" /> values.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.IQueryResult.ToObjectList"><summary>
            Returns the query result set as an <see cref="T:Remotion.Data.DomainObjects.ObjectList`1" />. If the result set contains duplicates or <see langword="null" /> values, this
            method throws an exception.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.IQueryResult.ToCustomCollection"><summary>
            Returns the query result set as the custom collection specified by the query <see cref="T:Remotion.Data.DomainObjects.ObjectList`1" />. If the result set contains
            duplicates or <see langword="null" /> values, this method throws an exception. If no custom collection was specified, a standard 
            <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> is returned.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.IQueryResult.Count"><summary>
            Gets the number of <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances returned by the query.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.IQueryResult.Query"><summary>
            Gets the query used to construct this result.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.Query"><summary>
            Represents a default implementation of <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.Query.#ctor(Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition,Remotion.Data.DomainObjects.Queries.QueryParameterCollection)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Queries.Query" /> class using a <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> and a given collection of <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" />s.
            </summary><param name="definition">The <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> to use for the query.</param><param name="parameters">The <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" />s to use for executing the query.</param></member><member name="P:Remotion.Data.DomainObjects.Queries.Query.Definition"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" /> that is associated with the query.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.Query.ID"><summary>
            Gets the <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.ID" /> of the associated <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.Query.CollectionType"><summary>
            Gets the <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.CollectionType" /> of the associated <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.Query.QueryType"><summary>
            Gets the <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.QueryType" /> of the associated <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.Query.Statement"><summary>
            Gets the <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.Statement" /> of the associated <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.Query.StorageProviderID"><summary>
            Gets the <see cref="P:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition.StorageProviderID" /> of the associated <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.Query.Parameters"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" />s that are used to execute the <see cref="T:Remotion.Data.DomainObjects.Queries.Query" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.QueryCache"><summary>
            Provides a thread-safe way to cache LINQ queries by a unique identifier.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryCache.GetQuery``1(System.String,System.Func{Remotion.Data.DomainObjects.Linq.DomainObjectQueryable{``0},System.Linq.IQueryable})"><summary>
            Gets a query for the given LINQ query, returning it from the cache if possible.
            </summary><param name="id">The ID to associate with the LINQ queryable. This ID is used as the cache key of the parsed query.</param><param name="queryGenerator">A delegate returning the LINQ queryable. The argument of this delegate is a <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1" />
            to start the LINQ query with.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryCache.ExecuteCollectionQuery``1(Remotion.Data.DomainObjects.ClientTransaction,System.String,System.Func{Remotion.Data.DomainObjects.Linq.DomainObjectQueryable{``0},System.Linq.IQueryable})"><summary>
            Gets a query for the given LINQ query and executes it in the given <paramref name="transaction" />. The query is taken from the cache if 
            possible.
            </summary><param name="transaction">The transaction whose <see cref="T:Remotion.Data.DomainObjects.Queries.IQueryManager" /> is used to execute the query.</param><param name="id">The ID to associate with the LINQ queryable. This ID is used as the cache key of the parsed query.</param><param name="queryGenerator">A delegate returning the LINQ queryable. The argument of this delegate is a <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1" />
            to start the LINQ query with.</param></member><member name="T:Remotion.Data.DomainObjects.Queries.QueryFactory"><summary>
            Provides a central entry point to get instances of <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> and <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1" /> query objects. Use this 
            factory to create LINQ queries or to read queries from the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryConfiguration" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateLinqQuery``1"><summary>
            Creates a <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1" /> used as the entry point to a LINQ query with the default implementation of the SQL 
            generation.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateLinqQuery``1(Remotion.Data.Linq.SqlBackend.SqlPreparation.ISqlPreparationStage,Remotion.Data.Linq.SqlBackend.MappingResolution.IMappingResolutionStage,Remotion.Data.Linq.SqlBackend.SqlGeneration.ISqlGenerationStage,Remotion.Data.Linq.Parsing.Structure.MethodCallExpressionNodeTypeRegistry)"><summary>
            Creates a <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1" /> used as the entry point to a LINQ query 
            with user defined SQL generation.
            </summary><param name="preparationStage">An implementation of <see cref="T:Remotion.Data.Linq.SqlBackend.SqlPreparation.ISqlPreparationStage" /> to be used when generating SQL for the query.</param><param name="resolutionStage">An implementation of <see cref="T:Remotion.Data.Linq.SqlBackend.MappingResolution.IMappingResolutionStage" /> to be used when generating SQL for the query.</param><param name="generationStage">An implementation of <see cref="T:Remotion.Data.Linq.SqlBackend.SqlGeneration.ISqlGenerationStage" /> to be used when generating SQL for the query.</param><param name="nodeTypeRegistry">An <see cref="T:Remotion.Data.Linq.Parsing.Structure.MethodCallExpressionNodeTypeRegistry" /> instance to be used when generating SQL for the query.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateQuery(Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition)"><summary>
            Creates a new query object from a given <paramref name="queryDefinition" />.
            </summary><param name="queryDefinition">The query definition to construct a query from.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateQuery(Remotion.Data.DomainObjects.Queries.Configuration.QueryDefinition,Remotion.Data.DomainObjects.Queries.QueryParameterCollection)"><summary>
            Creates a new query object from a given <paramref name="queryDefinition" />.
            </summary><param name="queryDefinition">The query definition to construct a query from.</param><param name="queryParameterCollection">The parameter collection to use for the query.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateQuery(System.String,System.Linq.IQueryable)"><summary>
            Creates a new query object from a given LINQ query.
            </summary><param name="id">The ID to assign to the query.</param><param name="queryable">The queryable constituting the LINQ query. This must be obtained by forming a LINQ query starting with an instance of 
            <see cref="T:Remotion.Data.DomainObjects.Linq.DomainObjectQueryable`1" />. Use <see cref="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateLinqQuery``1" /> to create such a query source.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateQueryFromConfiguration(System.String)"><summary>
            Creates a new query object, loading its data from the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryConfiguration" />.
            </summary><param name="id">The id of the query to load.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateQueryFromConfiguration(System.String,Remotion.Data.DomainObjects.Queries.QueryParameterCollection)"><summary>
            Creates a new query object, loading its data from the <see cref="T:Remotion.Data.DomainObjects.Queries.Configuration.QueryConfiguration" />.
            </summary><param name="id">The id of the query to load.</param><param name="queryParameterCollection">The parameter collection to use for the query.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateScalarQuery(System.String,System.String,System.String,Remotion.Data.DomainObjects.Queries.QueryParameterCollection)"><summary>
            Creates a new scalar query with the given statement, parameters, and metadata.
            Note that creating queries with a hard-coded SQL statement is not very flexible and not portable at all.
            Therefore, the <see cref="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateLinqQuery``1" /> and <see cref="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateQueryFromConfiguration(System.String)" />
            methods should usually be preferred to this method.
            </summary><param name="id">A string identifying the query.</param><param name="storageProviderID">The ID of the storage provider used to execute the query.</param><param name="statement">The scalar query statement.</param><param name="queryParameterCollection">The parameter collection to be used for the query.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateCollectionQuery(System.String,System.String,System.String,Remotion.Data.DomainObjects.Queries.QueryParameterCollection,System.Type)"><summary>
            Creates a new collection query with the given statement, parameters, and metadata.
            Note that creating queries with a hard-coded SQL statement is not very flexible and not portable at all.
            Therefore, the <see cref="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateLinqQuery``1" /> and <see cref="M:Remotion.Data.DomainObjects.Queries.QueryFactory.CreateQueryFromConfiguration(System.String)" />
            methods should usually be preferred to this method.
            </summary><param name="id">A string identifying the query.</param><param name="storageProviderID">The ID of the storage provider used to execute the query.</param><param name="statement">The scalar query statement.</param><param name="queryParameterCollection">The parameter collection to be used for the query.</param><param name="collectionType">The collection type to be returned from the query. Pass <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> if you don't care
            about the collection type. The type passed here is used by <see cref="M:Remotion.Data.DomainObjects.Queries.QueryResult`1.ToCustomCollection" />.</param></member><member name="T:Remotion.Data.DomainObjects.Queries.QueryManager"><summary>
            <see cref="T:Remotion.Data.DomainObjects.Queries.QueryManager" /> provides methods to execute queries within a <see cref="T:Remotion.Data.DomainObjects.Infrastructure.RootPersistenceStrategy" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryManager.#ctor(Remotion.Data.DomainObjects.Infrastructure.IPersistenceStrategy,Remotion.Data.DomainObjects.Infrastructure.IObjectLoader,Remotion.Data.DomainObjects.Infrastructure.IClientTransactionListener)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryManager" /> class.
            </summary><param name="persistenceStrategy">The <see cref="T:Remotion.Data.DomainObjects.Infrastructure.IPersistenceStrategy" /> used to load query results not involving <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances.</param><param name="objectLoader">An <see cref="T:Remotion.Data.DomainObjects.Infrastructure.IObjectLoader" /> implementation that can be used to load objects. This parameter determines
            the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> housing the objects loaded by queries.</param><param name="transactionEventSink">The transaction event sink to use for raising query-related notifications.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryManager.GetScalar(Remotion.Data.DomainObjects.Queries.IQuery)"><summary>
            Executes a given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> and returns the scalar value.
            </summary><param name="query">The query to execute. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryManager.GetCollection(Remotion.Data.DomainObjects.Queries.IQuery)"><summary>
            Executes a given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> and returns a collection of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s returned by the query.
            </summary><param name="query">The query to execute. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryManager.GetCollection``1(Remotion.Data.DomainObjects.Queries.IQuery)"><summary>
            Executes a given <see cref="T:Remotion.Data.DomainObjects.Queries.IQuery" /> and returns a collection of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" />s returned by the query.
            </summary><param name="query">The query to execute. Must not be <see langword="null" />.</param></member><member name="T:Remotion.Data.DomainObjects.Queries.QueryParameter"><summary>
            Represents a parameter that is used in a query.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryParameter.#ctor(System.String,System.Object)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" /> class with a <see cref="P:Remotion.Data.DomainObjects.Queries.QueryParameter.ParameterType" /> of <see cref="F:Remotion.Data.DomainObjects.Queries.QueryParameterType.Value" />.
            </summary><param name="name">The name of the parameter.</param><param name="value">The value of the parameter.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryParameter.#ctor(System.String,System.Object,Remotion.Data.DomainObjects.Queries.QueryParameterType)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" /> class.
            </summary><param name="name">The name of the parameter. Must not be <see langword="null" />.</param><param name="value">The value of the parameter.</param><param name="parameterType">The <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterType" /> of the parameter.</param></member><member name="P:Remotion.Data.DomainObjects.Queries.QueryParameter.Name"><summary>
            Gets the name of the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.QueryParameter.Value"><summary>
            Gets or sets the value of the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.QueryParameter.ParameterType"><summary>
            Gets or sets the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterType" /> of the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.QueryParameterCollection"><summary>
            Represents a collection of <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" /> objects.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryParameterCollection.#ctor"><summary>
            Initializes a new <b>QueryParameterCollection</b>.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryParameterCollection.#ctor(Remotion.Data.DomainObjects.Queries.QueryParameterCollection,System.Boolean)"><summary>
            Initializes a new <b>QueryParameterCollection</b> as a shallow copy of a given <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterCollection" />.
            </summary><param name="collection">The <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterCollection" /> to copy. Must not be <see langword="null" />.</param><param name="makeCollectionReadOnly">Indicates whether the new collection should be read-only.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryParameterCollection.Add(System.String,System.Object)"><summary>
            Adds a new <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" /> to the collection with <see cref="P:Remotion.Data.DomainObjects.Queries.QueryParameter.ParameterType" /> of Value.
            </summary><param name="parameterName">The <see cref="P:Remotion.Data.DomainObjects.Queries.QueryParameter.Name" /> of the new parameter. Must not be <see langword="null" />.</param><param name="parameterValue">The <see cref="P:Remotion.Data.DomainObjects.Queries.QueryParameter.Value" /> of the new parameter.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryParameterCollection.Add(System.String,System.Object,Remotion.Data.DomainObjects.Queries.QueryParameterType)"><summary>
            Adds a new <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" /> to the collection.
            </summary><param name="parameterName">The <see cref="P:Remotion.Data.DomainObjects.Queries.QueryParameter.Name" /> of the new parameter. Must not be <see langword="null" />.</param><param name="parameterValue">The <see cref="P:Remotion.Data.DomainObjects.Queries.QueryParameter.Value" /> of the new parameter.</param><param name="parameterType">The <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterType" /> of the new parameter.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryParameterCollection.Contains(Remotion.Data.DomainObjects.Queries.QueryParameter)"><summary>
            Determines whether an item is in the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterCollection" />.
            </summary><param name="queryParameter">The <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" /> to locate in the collection. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryParameterCollection.Contains(System.String)"><summary>
            Determines whether an item is in the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterCollection" />.
            </summary><param name="name">The <see cref="P:Remotion.Data.DomainObjects.Queries.QueryParameter.Name" /> of the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" /> to locate in the collection. Must not be <see langword="null" />.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryParameterCollection.Add(Remotion.Data.DomainObjects.Queries.QueryParameter)"><summary>
            Adds a <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" /> to the collection.
            </summary><param name="parameter">The <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" /> to add.</param></member><member name="P:Remotion.Data.DomainObjects.Queries.QueryParameterCollection.Item(System.Int32)"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" /> with a given <paramref name="index" /> in the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterCollection" />.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.QueryParameterCollection.Item(System.String)"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" /> with a given <paramref name="name" /> in the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameterCollection" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.QueryParameterType"><summary>
            Indicates the type of a <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" />.
            </summary></member><member name="F:Remotion.Data.DomainObjects.Queries.QueryParameterType.Value"><summary>
            Instances of <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" /> will be treated as parameters in the query.
            </summary></member><member name="F:Remotion.Data.DomainObjects.Queries.QueryParameterType.Text"><summary>
            Instances of <see cref="T:Remotion.Data.DomainObjects.Queries.QueryParameter" /> will replaced inline into the query.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.QueryResult`1"><summary>
            Represents a typed result of a collection query.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryResult`1.#ctor(Remotion.Data.DomainObjects.Queries.IQuery,`0[])"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Queries.QueryResult`1" /> class.
            </summary><param name="query">The query that yielded the <paramref name="queryResult" /></param><param name="queryResult">The elements making up the query result. The <see cref="T:System.Collections.Generic.IEnumerable`1" /> is enumerated exactly once by this class.</param></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryResult`1.ContainsDuplicates"><summary>
            Determines whether the result set contains duplicates.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryResult`1.ContainsNulls"><summary>
            Determines whether result set contains <see langword="null" /> values.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryResult`1.AsEnumerable"><summary>
            Returns the query result set as an enumerable object. Might contain duplicates or <see langword="null" /> values.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryResult`1.ToArray"><summary>
            Returns the query result set as an array. Might contain duplicates or <see langword="null" /> values.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryResult`1.ToObjectList"><summary>
            Returns the query result set as an <see cref="T:Remotion.Data.DomainObjects.ObjectList`1" />. If the result set contains duplicates or <see langword="null" /> values, this
            method throws an exception.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Queries.QueryResult`1.ToCustomCollection"><summary>
            Returns the query result set as the custom collection as specified by <see cref="P:Remotion.Data.DomainObjects.Queries.IQuery.CollectionType" />. If the result set contains
            duplicates or <see langword="null" /> values, this method throws an exception. If no custom collection was specified, a standard
            <see cref="T:Remotion.Data.DomainObjects.DomainObjectCollection" /> is returned.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.QueryResult`1.Count"><summary>
            Gets the number of <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances returned by the query.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Queries.QueryResult`1.Query"><summary>
            Gets the query used to construct this result.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Queries.UnexpectedQueryResultException"><summary>
            Thrown when a query yields a result unexpected in the context of the parameters given by the user.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Tracing.CompoundPersistenceListener"><summary>
            Implements a collection of <see cref="T:Remotion.Data.DomainObjects.Tracing.IPersistenceListener" /> objects.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Tracing.IPersistenceListener"><summary>
            The <see cref="T:Remotion.Data.DomainObjects.Tracing.IPersistenceListener" /> defines the API for tracing database access.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Tracing.IPersistenceListener.ConnectionOpened(System.Guid)"><summary>
            Invoking this method signals that a database connection has been established.
            </summary><param name="connectionID">An ID unique to all operations traced for this database connection.</param></member><member name="M:Remotion.Data.DomainObjects.Tracing.IPersistenceListener.ConnectionClosed(System.Guid)"><summary>
            Invoking this method signals that a database connection has been closed.
            </summary><param name="connectionID">An ID unique to all operations traced for this database connection.</param></member><member name="M:Remotion.Data.DomainObjects.Tracing.IPersistenceListener.TransactionBegan(System.Guid,System.Data.IsolationLevel)"><summary>
            Invoking this method signals the begin of a database transaction.
            </summary><param name="connectionID">An ID unique to all operations traced for this database connection.</param><param name="isolationLevel">The <see cref="T:System.Data.IsolationLevel" /> used for this transaction</param></member><member name="M:Remotion.Data.DomainObjects.Tracing.IPersistenceListener.TransactionCommitted(System.Guid)"><summary>
            Invoking this method signals that a database transaction was committed.
            </summary><param name="connectionID">An ID unique to all operations traced for this database connection.</param></member><member name="M:Remotion.Data.DomainObjects.Tracing.IPersistenceListener.TransactionRolledBack(System.Guid)"><summary>
            Invoking this method signals that a database transaction was rolled-back.
            </summary><param name="connectionID">An ID unique to all operations traced for this database connection.</param></member><member name="M:Remotion.Data.DomainObjects.Tracing.IPersistenceListener.TransactionDisposed(System.Guid)"><summary>
            Invoking this method signals that a database transaction was disposed.
            </summary><param name="connectionID">An ID unique to all operations traced for this database connection.</param></member><member name="M:Remotion.Data.DomainObjects.Tracing.IPersistenceListener.QueryExecuting(System.Guid,System.Guid,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})"><summary>
            Invoking this method signals the begin of a database query.
            </summary><param name="connectionID">An ID unique to all operations traced for this database connection.</param><param name="queryID">An ID unique to this specific database query.</param><param name="commandText">The command-text of the query.</param><param name="parameters">The parameters of the query.</param></member><member name="M:Remotion.Data.DomainObjects.Tracing.IPersistenceListener.QueryExecuted(System.Guid,System.Guid,System.TimeSpan)"><summary>
            Invoking this method signals the return of the executing database query.
            </summary><param name="connectionID">An ID unique to all operations traced for this database connection.</param><param name="queryID">An ID unique to this specific database query.</param><param name="durationOfQueryExecution">The time taken for exeucting the query against the database.</param></member><member name="M:Remotion.Data.DomainObjects.Tracing.IPersistenceListener.QueryCompleted(System.Guid,System.Guid,System.TimeSpan,System.Int32)"><summary>
            Invoking this method signals that the application has finished processing the query result.
            </summary><param name="connectionID">An ID unique to all operations traced for this database connection.</param><param name="queryID">An ID unique to this specific database query.</param><param name="durationOfDataRead">The time taken for processing the query result.</param><param name="rowCount">The number of rows processed.</param></member><member name="M:Remotion.Data.DomainObjects.Tracing.IPersistenceListener.QueryError(System.Guid,System.Guid,System.Exception)"><summary>
            Invoking this method signals that the executing query has generated an error.
            </summary><param name="connectionID">An ID unique to all operations traced for this database connection.</param><param name="queryID">An ID unique to this specific database query.</param><param name="e">The exection thrown becasue of the error.</param></member><member name="T:Remotion.Data.DomainObjects.Tracing.IPersistenceListenerFactory"><summary>
            Defines the API for creating the listeners used by the <see cref="T:Remotion.Data.DomainObjects.ClientTransaction" /> and the peristence layer.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Tracing.NullPersistenceListener"><summary>
            <see cref="T:Remotion.INullObject" /> implementation of <see cref="T:Remotion.Data.DomainObjects.Tracing.IPersistenceListener" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Tracing.TracingDataReader"><summary>
            Provides a wrapper for implementations of <see cref="T:System.Data.IDataReader" />. The number of records read and the lifetime of the reader 
            are traced using <see cref="T:Remotion.Data.DomainObjects.Tracing.IPersistenceListener" /> passed during the instantiation.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Tracing.TracingDbCommand"><summary>
            Provides a wrapper for implementations of <see cref="T:System.Data.IDbCommand" />. Execution of the query is traced using the 
            <see cref="T:Remotion.Data.DomainObjects.Tracing.IPersistenceListener" /> passed during the instantiation.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Tracing.TracingDbConnection"><summary>
            Provides a wrapper for implementations of <see cref="T:System.Data.IDbConnection" />. The lifetime of the connection is traced using the
            <see cref="T:Remotion.Data.DomainObjects.Tracing.IPersistenceListener" /> passed during the instantiation.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Tracing.TracingDbTransaction"><summary>
            Provides a wrapper for implementations of <see cref="T:System.Data.IDbTransaction" />. The lifetime of the transaction is traced using the
            <see cref="T:Remotion.Data.DomainObjects.Tracing.IPersistenceListener" /> passed during the instantiation.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Transport.BinaryExportStrategy"><summary>
            Represents an export strategy for <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances using binary serialization. This matches <see cref="T:Remotion.Data.DomainObjects.Transport.BinaryImportStrategy" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Transport.IExportStrategy"><summary>
            Implements a strategy to export a set of <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances to a <see cref="T:System.IO.Stream" />. The exported objects are
            wrapped as <see cref="T:Remotion.Data.DomainObjects.Transport.TransportItem" /> property holders by the <see cref="T:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter" /> class.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Transport.IExportStrategy.Export(System.IO.Stream,Remotion.Data.DomainObjects.Transport.TransportItem[])"><summary>
            Exports the specified transported objects.
            </summary><param name="transportedObjects">The objects to be exported.</param><param name="outputStream">The <see cref="T:System.IO.Stream" /> to which the data should be exported.</param></member><member name="T:Remotion.Data.DomainObjects.Transport.BinaryImportStrategy"><summary>
            Represents an import strategy for <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances using binary serialization. This matches <see cref="T:Remotion.Data.DomainObjects.Transport.BinaryExportStrategy" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Transport.IImportStrategy"><summary>
            Implements a strategy to import a set of transported <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances from a <see cref="T:System.IO.Stream" />. The imported objects
            should be wrapped as <see cref="T:Remotion.Data.DomainObjects.Transport.TransportItem" /> property holders, the <see cref="T:Remotion.Data.DomainObjects.Transport.DomainObjectImporter" /> class creates 
            <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances from those holders and synchronizes them with the database.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Transport.IImportStrategy.Import(System.IO.Stream)"><summary>
            Imports the specified data.
            </summary><param name="inputStream">A <see cref="T:System.IO.Stream" /> delivering the data to be imported.</param></member><member name="T:Remotion.Data.DomainObjects.Transport.DomainObjectImporter"><summary>
            Assists in importing data exported by a <see cref="T:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter" /> object. This class is used by
            <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadTransportData(System.IO.Stream,Remotion.Data.DomainObjects.Transport.IImportStrategy)" /> and is usually 
            not instantiated by users.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter"><summary>
            Collects domain objects to be transported to another system.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadTransportData(System.IO.Stream)"><summary>
            Loads the data transported from another system into a <see cref="T:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects" /> container using the <see cref="T:Remotion.Data.DomainObjects.Transport.BinaryImportStrategy" />.
            </summary><param name="stream">The <see cref="T:System.IO.Stream" /> from which to load the data.</param></member><member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadTransportData(System.IO.Stream,Remotion.Data.DomainObjects.Transport.IImportStrategy)"><summary>
            Loads the data transported from another system into a <see cref="T:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects" /> container.
            </summary><param name="stream">The <see cref="T:System.IO.Stream" /> from which to load the data.</param><param name="strategy">The strategy to use when importing data. This must match the strategy being used with <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.Export(System.IO.Stream,Remotion.Data.DomainObjects.Transport.IExportStrategy)" />.</param></member><member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.IsLoaded(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Determines whether the specified <paramref name="objectID" /> has been loaded for transportation.
            </summary><param name="objectID">The object ID to check.</param></member><member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadNew(System.Type,Remotion.Reflection.ParamList)"><summary>
            Loads a new instance of a domain object for transportation.
            </summary><param name="type">The domain object type to instantiate.</param><param name="constructorParameters">A <see cref="T:Remotion.Reflection.ParamList" /> encapsulating the parameters to be passed to the constructor. Instantiate this
            by using one of the <see cref="M:Remotion.Reflection.ParamList.Create``2(``0,``1)" /> methods.</param></member><member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.Load(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Loads the object with the specified <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> into the transporter.
            </summary><param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the object to load.</param></member><member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadWithRelatedObjects(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Loads the object with the specified <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> plus all objects directly referenced by it into the transporter.
            Each object behaves as if it were loaded via <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.Load(Remotion.Data.DomainObjects.ObjectID)" />.
            </summary><param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the object which is to be loaded together with its related objects.</param></member><member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadRecursive(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Loads the object with the specified <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> plus all objects directly or indirectly referenced by it into the
            transporter. Each object behaves as if it were loaded via <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.Load(Remotion.Data.DomainObjects.ObjectID)" />.
            </summary><param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the object which is to be loaded together with its related objects.</param></member><member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadRecursive(Remotion.Data.DomainObjects.ObjectID,Remotion.Data.DomainObjects.IGraphTraversalStrategy)"><summary>
            Loads the object with the specified <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> plus all objects directly or indirectly referenced by it into the
            transporter, as specified by the <see cref="T:Remotion.Data.DomainObjects.IGraphTraversalStrategy" />. Each object behaves as if it were loaded via <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.Load(Remotion.Data.DomainObjects.ObjectID)" />.
            </summary><param name="objectID">The <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the object which is to be loaded together with its related objects.</param><param name="strategy">An <see cref="T:Remotion.Data.DomainObjects.IGraphTraversalStrategy" /> instance defining which related object links to follow and which
            objects to include in the set of transported objects.</param></member><member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.GetTransportedObject(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Retrieves a loaded object so that it can be manipulated prior to it being transported.
            </summary><param name="loadedObjectID">The object ID of the object to be retrieved.</param></member><member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.Export(System.IO.Stream)"><summary>
            Exports the objects loaded into this transporter (including their contents) in a binary format for transport to another system using 
            <see cref="T:Remotion.Data.DomainObjects.Transport.BinaryExportStrategy" />. At the target system, the data can be loaded via <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadTransportData(System.IO.Stream)" />.
            </summary><param name="stream">The <see cref="T:System.IO.Stream" /> to which to export the loaded objects.</param></member><member name="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.Export(System.IO.Stream,Remotion.Data.DomainObjects.Transport.IExportStrategy)"><summary>
            Exports the objects loaded into this transporter (including their contents) in a custom format for transport to another system.
            At the target system, the data can be loaded via <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadTransportData(System.IO.Stream,Remotion.Data.DomainObjects.Transport.IImportStrategy)" />.
            </summary><param name="stream">The <see cref="T:System.IO.Stream" /> to which to export the loaded objects.</param><param name="strategy">The strategy to be used for exporting data. This must match the strategy used with 
            <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadTransportData(System.IO.Stream,Remotion.Data.DomainObjects.Transport.IImportStrategy)" />.</param></member><member name="P:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.ObjectIDs"><summary>
            Gets the IDs of the objects loaded into this transporter.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Transport.TransportationException"><summary>
            Indicates a problem when exporting or importing <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances using <see cref="T:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter" />. Usually,
            the data or objects either don't match the <see cref="T:Remotion.Data.DomainObjects.Transport.IImportStrategy" /> or <see cref="T:Remotion.Data.DomainObjects.Transport.IExportStrategy" /> being used, or the data has become
            corrupted.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Transport.TransportationException.#ctor(System.String)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Transport.TransportationException" /> class.
            </summary><param name="message">The exception message.</param></member><member name="M:Remotion.Data.DomainObjects.Transport.TransportationException.#ctor(System.String,System.Exception)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Transport.TransportationException" /> class.
            </summary><param name="message">The exception message.</param><param name="innerException">The inner exception.</param></member><member name="T:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects"><summary>
            Represents the data transported via a <see cref="T:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter" /> object on the target system.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.#ctor(Remotion.Data.DomainObjects.ClientTransaction,System.Collections.Generic.List{Remotion.Data.DomainObjects.DomainObject})"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects" /> class. This constructor is typically only used internally,
            use <see cref="M:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter.LoadTransportData(System.IO.Stream)" /> to instantiate this class.
            </summary><param name="dataTransaction">The transaction containing the transported objects' data.</param><param name="transportedObjects">The transported objects.</param></member><member name="M:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.FinishTransport"><summary>
            Finishes the transport by committing the <see cref="P:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.DataTransaction" /> to the database.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.FinishTransport(System.Func{Remotion.Data.DomainObjects.DomainObject,System.Boolean})"><summary>
            Finishes the transport by committing the <see cref="P:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.DataTransaction" /> to the database, providing a filter to exclude some objects
            from being committed.
            </summary><param name="filter">A filter delegate called for each object that would be committed to the database. Return true to include the
            object in the commit, or false to leave its state in the database as is.</param></member><member name="P:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.DataTransaction"><summary>
            Gets the transaction holding the data of the transported objects. Use <see cref="M:Remotion.Data.DomainObjects.ClientTransaction.EnterNonDiscardingScope" /> to
            inspect the data in an application.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.TransportedObjects"><summary>
            Gets the transported objects. Use <see cref="P:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.DataTransaction" /> to inspect or change their data before calling <see cref="M:Remotion.Data.DomainObjects.Transport.TransportedDomainObjects.FinishTransport" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Transport.TransportItem"><summary>
            Represents a <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instance when it is to be transported by <see cref="T:Remotion.Data.DomainObjects.Transport.DomainObjectTransporter" />.
            </summary></member><member name="M:Remotion.Data.DomainObjects.Transport.TransportItem.PackageDataContainer(Remotion.Data.DomainObjects.DataManagement.DataContainer)"><summary>
            Packages the data held by a <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> into a <see cref="T:Remotion.Data.DomainObjects.Transport.TransportItem" />. This method is only meant for internal purposes.
            </summary><param name="container">The container to package.</param></member><member name="M:Remotion.Data.DomainObjects.Transport.TransportItem.PackageDataContainers(System.Collections.Generic.IEnumerable{Remotion.Data.DomainObjects.DataManagement.DataContainer})"><summary>
            Packages the data held by a stream of <see cref="T:Remotion.Data.DomainObjects.DataManagement.DataContainer" /> instances into a stream of <see cref="T:Remotion.Data.DomainObjects.Transport.TransportItem" /> values. This method 
            is only meant for internal purposes.
            </summary><param name="containers">The containers to package.</param></member><member name="M:Remotion.Data.DomainObjects.Transport.TransportItem.#ctor(Remotion.Data.DomainObjects.ObjectID)"><summary>
            Initializes a new instance of the <see cref="T:Remotion.Data.DomainObjects.Transport.TransportItem" /> class.
            </summary><param name="id">The id of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> represented by this item.</param></member><member name="P:Remotion.Data.DomainObjects.Transport.TransportItem.ID"><summary>
            Gets the <see cref="T:Remotion.Data.DomainObjects.ObjectID" /> of the <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> represented by this item.
            </summary></member><member name="P:Remotion.Data.DomainObjects.Transport.TransportItem.Properties"><summary>
            Gets the properties to be transported by this item.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Transport.XmlExportStrategy"><summary>
            Represents an export strategy for <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances using XML serialization. This matches <see cref="T:Remotion.Data.DomainObjects.Transport.XmlImportStrategy" />.
            </summary></member><member name="T:Remotion.Data.DomainObjects.Transport.XmlImportStrategy"><summary>
            Represents an import strategy for <see cref="T:Remotion.Data.DomainObjects.DomainObject" /> instances using XML serialization. This matches <see cref="T:Remotion.Data.DomainObjects.Transport.XmlExportStrategy" />.
            </summary></member></members></doc>